
TOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015a98  08008ae0  08008ae0  00018ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e578  0801e578  000300ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801e578  0801e578  0002e578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e580  0801e580  000300ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e580  0801e580  0002e580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e584  0801e584  0002e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0801e588  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a7c  200000ac  0801e634  000300ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b28  0801e634  00032b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155f7  00000000  00000000  0003011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003516  00000000  00000000  00045716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00048c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7a  00000000  00000000  00049dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000280fd  00000000  00000000  0004ab52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c30  00000000  00000000  00072c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2ae2  00000000  00000000  0008a87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f4c  00000000  00000000  0017d364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001822b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000ac 	.word	0x200000ac
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008ac8 	.word	0x08008ac8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000b0 	.word	0x200000b0
 800021c:	08008ac8 	.word	0x08008ac8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f003 fed6 	bl	8004370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f807 	bl	80005d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f850 	bl	800066c <MX_GPIO_Init>
  MX_TOF_Init();
 80005cc:	f007 f93c 	bl	8007848 <MX_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 80005d0:	f007 f940 	bl	8007854 <MX_TOF_Process>
 80005d4:	e7fc      	b.n	80005d0 <main+0x14>

080005d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b094      	sub	sp, #80	; 0x50
 80005da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005dc:	f107 0318 	add.w	r3, r7, #24
 80005e0:	2238      	movs	r2, #56	; 0x38
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f007 fca5 	bl	8007f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f005 f977 	bl	80058ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fe:	2302      	movs	r3, #2
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000614:	2304      	movs	r3, #4
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000618:	2355      	movs	r3, #85	; 0x55
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0318 	add.w	r3, r7, #24
 800062c:	4618      	mov	r0, r3
 800062e:	f005 fa11 	bl	8005a54 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000638:	f000 f8ba 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2303      	movs	r3, #3
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2104      	movs	r1, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f005 fd15 	bl	8006084 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000660:	f000 f8a6 	bl	80007b0 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	4b49      	ldr	r3, [pc, #292]	; (80007a8 <MX_GPIO_Init+0x13c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a48      	ldr	r2, [pc, #288]	; (80007a8 <MX_GPIO_Init+0x13c>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <MX_GPIO_Init+0x13c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069a:	4b43      	ldr	r3, [pc, #268]	; (80007a8 <MX_GPIO_Init+0x13c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a42      	ldr	r2, [pc, #264]	; (80007a8 <MX_GPIO_Init+0x13c>)
 80006a0:	f043 0320 	orr.w	r3, r3, #32
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b40      	ldr	r3, [pc, #256]	; (80007a8 <MX_GPIO_Init+0x13c>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0320 	and.w	r3, r3, #32
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b3d      	ldr	r3, [pc, #244]	; (80007a8 <MX_GPIO_Init+0x13c>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a3c      	ldr	r2, [pc, #240]	; (80007a8 <MX_GPIO_Init+0x13c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b3a      	ldr	r3, [pc, #232]	; (80007a8 <MX_GPIO_Init+0x13c>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <MX_GPIO_Init+0x13c>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a36      	ldr	r2, [pc, #216]	; (80007a8 <MX_GPIO_Init+0x13c>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <MX_GPIO_Init+0x13c>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f004 fa77 	bl	8004bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_PWR_EN_Pin|TOF_LPn_Pin, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2111      	movs	r1, #17
 80006f2:	482e      	ldr	r0, [pc, #184]	; (80007ac <MX_GPIO_Init+0x140>)
 80006f4:	f004 fa72 	bl	8004bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_I2C_RST_GPIO_Port, TOF_I2C_RST_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2108      	movs	r1, #8
 80006fc:	482b      	ldr	r0, [pc, #172]	; (80007ac <MX_GPIO_Init+0x140>)
 80006fe:	f004 fa6d 	bl	8004bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOF_INT_Pin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 8000702:	2310      	movs	r3, #16
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000706:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f003 fffb 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800071e:	2320      	movs	r3, #32
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f003 ffec 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_PWR_EN_Pin */
  GPIO_InitStruct.Pin = TOF_PWR_EN_Pin;
 800073c:	2301      	movs	r3, #1
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4816      	ldr	r0, [pc, #88]	; (80007ac <MX_GPIO_Init+0x140>)
 8000754:	f003 ffde 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_I2C_RST_Pin */
  GPIO_InitStruct.Pin = TOF_I2C_RST_Pin;
 8000758:	2308      	movs	r3, #8
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_I2C_RST_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480f      	ldr	r0, [pc, #60]	; (80007ac <MX_GPIO_Init+0x140>)
 8000770:	f003 ffd0 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_LPn_Pin */
  GPIO_InitStruct.Pin = TOF_LPn_Pin;
 8000774:	2310      	movs	r3, #16
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	2301      	movs	r3, #1
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_LPn_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <MX_GPIO_Init+0x140>)
 800078c:	f003 ffc2 	bl	8004714 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	200a      	movs	r0, #10
 8000796:	f003 ff58 	bl	800464a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800079a:	200a      	movs	r0, #10
 800079c:	f003 ff6f 	bl	800467e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000400 	.word	0x48000400

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6613      	str	r3, [r2, #96]	; 0x60
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x44>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6593      	str	r3, [r2, #88]	; 0x58
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007f2:	f005 f91f 	bl	8005a34 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <NMI_Handler+0x4>

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f003 fde0 	bl	8004414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 800085c:	2010      	movs	r0, #16
 800085e:	f004 f9d5 	bl	8004c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <BSP_I2C1_Init+0x70>)
 8000874:	4a19      	ldr	r2, [pc, #100]	; (80008dc <BSP_I2C1_Init+0x74>)
 8000876:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <BSP_I2C1_Init+0x78>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	4918      	ldr	r1, [pc, #96]	; (80008e0 <BSP_I2C1_Init+0x78>)
 8000880:	600a      	str	r2, [r1, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d122      	bne.n	80008cc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <BSP_I2C1_Init+0x70>)
 8000888:	f004 fcd8 	bl	800523c <HAL_I2C_GetState>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d11c      	bne.n	80008cc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <BSP_I2C1_Init+0x70>)
 8000894:	f000 f8fe 	bl	8000a94 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d116      	bne.n	80008cc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800089e:	480e      	ldr	r0, [pc, #56]	; (80008d8 <BSP_I2C1_Init+0x70>)
 80008a0:	f000 f8b4 	bl	8000a0c <MX_I2C1_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80008aa:	f06f 0307 	mvn.w	r3, #7
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	e00c      	b.n	80008cc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <BSP_I2C1_Init+0x70>)
 80008b6:	f004 ff81 	bl	80057bc <HAL_I2CEx_ConfigAnalogFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d003      	beq.n	80008c8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80008c0:	f06f 0307 	mvn.w	r3, #7
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	e001      	b.n	80008cc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000c8 	.word	0x200000c8
 80008dc:	40005400 	.word	0x40005400
 80008e0:	20000114 	.word	0x20000114

080008e4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <BSP_I2C1_DeInit+0x48>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <BSP_I2C1_DeInit+0x48>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <BSP_I2C1_DeInit+0x48>)
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <BSP_I2C1_DeInit+0x48>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10b      	bne.n	8000920 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <BSP_I2C1_DeInit+0x4c>)
 800090a:	f000 f927 	bl	8000b5c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800090e:	4808      	ldr	r0, [pc, #32]	; (8000930 <BSP_I2C1_DeInit+0x4c>)
 8000910:	f004 fa23 	bl	8004d5a <HAL_I2C_DeInit>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800091a:	f06f 0307 	mvn.w	r3, #7
 800091e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000920:	687b      	ldr	r3, [r7, #4]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000114 	.word	0x20000114
 8000930:	200000c8 	.word	0x200000c8

08000934 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af04      	add	r7, sp, #16
 800093a:	60ba      	str	r2, [r7, #8]
 800093c:	461a      	mov	r2, r3
 800093e:	4603      	mov	r3, r0
 8000940:	81fb      	strh	r3, [r7, #14]
 8000942:	460b      	mov	r3, r1
 8000944:	81bb      	strh	r3, [r7, #12]
 8000946:	4613      	mov	r3, r2
 8000948:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800094e:	89ba      	ldrh	r2, [r7, #12]
 8000950:	89f9      	ldrh	r1, [r7, #14]
 8000952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000956:	9302      	str	r3, [sp, #8]
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2302      	movs	r3, #2
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <BSP_I2C1_WriteReg16+0x60>)
 8000964:	f004 fa3c 	bl	8004de0 <HAL_I2C_Mem_Write>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00c      	beq.n	8000988 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <BSP_I2C1_WriteReg16+0x60>)
 8000970:	f004 fc72 	bl	8005258 <HAL_I2C_GetError>
 8000974:	4603      	mov	r3, r0
 8000976:	2b04      	cmp	r3, #4
 8000978:	d103      	bne.n	8000982 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800097a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e002      	b.n	8000988 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000982:	f06f 0303 	mvn.w	r3, #3
 8000986:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000988:	697b      	ldr	r3, [r7, #20]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000c8 	.word	0x200000c8

08000998 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af04      	add	r7, sp, #16
 800099e:	60ba      	str	r2, [r7, #8]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4603      	mov	r3, r0
 80009a4:	81fb      	strh	r3, [r7, #14]
 80009a6:	460b      	mov	r3, r1
 80009a8:	81bb      	strh	r3, [r7, #12]
 80009aa:	4613      	mov	r3, r2
 80009ac:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80009b2:	89ba      	ldrh	r2, [r7, #12]
 80009b4:	89f9      	ldrh	r1, [r7, #14]
 80009b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2302      	movs	r3, #2
 80009c6:	480c      	ldr	r0, [pc, #48]	; (80009f8 <BSP_I2C1_ReadReg16+0x60>)
 80009c8:	f004 fb1e 	bl	8005008 <HAL_I2C_Mem_Read>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00c      	beq.n	80009ec <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80009d2:	4809      	ldr	r0, [pc, #36]	; (80009f8 <BSP_I2C1_ReadReg16+0x60>)
 80009d4:	f004 fc40 	bl	8005258 <HAL_I2C_GetError>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b04      	cmp	r3, #4
 80009dc:	d003      	beq.n	80009e6 <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80009de:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e002      	b.n	80009ec <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80009e6:	f06f 0303 	mvn.w	r3, #3
 80009ea:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80009ec:	697b      	ldr	r3, [r7, #20]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000c8 	.word	0x200000c8

080009fc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000a00:	f003 fd1a 	bl	8004438 <HAL_GetTick>
 8000a04:	4603      	mov	r3, r0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_I2C1_Init+0x80>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10802D9B;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <MX_I2C1_Init+0x84>)
 8000a22:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f004 f8f4 	bl	8004c3c <HAL_I2C_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f004 feab 	bl	80057bc <HAL_I2CEx_ConfigAnalogFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f004 feed 	bl	8005852 <HAL_I2CEx_ConfigDigitalFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	10802d9b 	.word	0x10802d9b

08000a94 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09e      	sub	sp, #120	; 0x78
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2254      	movs	r2, #84	; 0x54
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f007 fa45 	bl	8007f34 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000aaa:	2340      	movs	r3, #64	; 0x40
 8000aac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f005 fd00 	bl	80064bc <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <I2C1_MspInit+0xbc>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <I2C1_MspInit+0xbc>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <I2C1_MspInit+0xbc>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000aea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aee:	4619      	mov	r1, r3
 8000af0:	4818      	ldr	r0, [pc, #96]	; (8000b54 <I2C1_MspInit+0xc0>)
 8000af2:	f003 fe0f 	bl	8004714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000b0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b10:	4619      	mov	r1, r3
 8000b12:	4810      	ldr	r0, [pc, #64]	; (8000b54 <I2C1_MspInit+0xc0>)
 8000b14:	f003 fdfe 	bl	8004714 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <I2C1_MspInit+0xc4>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <I2C1_MspInit+0xc4>)
 8000b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b22:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <I2C1_MspInit+0xc4>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <I2C1_MspInit+0xc4>)
 8000b2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b2e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <I2C1_MspInit+0xbc>)
 8000b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <I2C1_MspInit+0xbc>)
 8000b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <I2C1_MspInit+0xbc>)
 8000b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3778      	adds	r7, #120	; 0x78
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000400 	.word	0x48000400
 8000b58:	40010000 	.word	0x40010000

08000b5c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <I2C1_MspDeInit+0x30>)
 8000b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b68:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <I2C1_MspDeInit+0x30>)
 8000b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b6e:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b74:	4806      	ldr	r0, [pc, #24]	; (8000b90 <I2C1_MspDeInit+0x34>)
 8000b76:	f003 ff4f 	bl	8004a18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7e:	4804      	ldr	r0, [pc, #16]	; (8000b90 <I2C1_MspDeInit+0x34>)
 8000b80:	f003 ff4a 	bl	8004a18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000400 	.word	0x48000400

08000b94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e00a      	b.n	8000bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba6:	f3af 8000 	nop.w
 8000baa:	4601      	mov	r1, r0
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf0      	blt.n	8000ba6 <_read+0x12>
  }

  return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e009      	b.n	8000bf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 fb51 	bl	8004290 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf1      	blt.n	8000be0 <_write+0x12>
  }
  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_close>:

int _close(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_isatty>:

int _isatty(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f007 f996 	bl	8007fd0 <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20020000 	.word	0x20020000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	20000118 	.word	0x20000118
 8000cd8:	20002b28 	.word	0x20002b28

08000cdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d06:	490e      	ldr	r1, [pc, #56]	; (8000d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <LoopForever+0xe>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d1c:	4c0b      	ldr	r4, [pc, #44]	; (8000d4c <LoopForever+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d2a:	f7ff ffd7 	bl	8000cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f007 f955 	bl	8007fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d32:	f7ff fc43 	bl	80005bc <main>

08000d36 <LoopForever>:

LoopForever:
    b LoopForever
 8000d36:	e7fe      	b.n	8000d36 <LoopForever>
  ldr   r0, =_estack
 8000d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000d44:	0801e588 	.word	0x0801e588
  ldr r2, =_sbss
 8000d48:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000d4c:	20002b28 	.word	0x20002b28

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>

08000d52 <VL53L7A1_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d903      	bls.n	8000d68 <VL53L7A1_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d60:	f06f 0301 	mvn.w	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e003      	b.n	8000d70 <VL53L7A1_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L7CX_Probe(Instance);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f8f5 	bl	8000f58 <VL53L7CX_Probe>
 8000d6e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000d70:	68fb      	ldr	r3, [r7, #12]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <VL53L7A1_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d903      	bls.n	8000d94 <VL53L7A1_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d8c:	f06f 0301 	mvn.w	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e012      	b.n	8000dba <VL53L7A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->ReadID(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <VL53L7A1_RANGING_SENSOR_ReadID+0x48>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	490b      	ldr	r1, [pc, #44]	; (8000dc8 <VL53L7A1_RANGING_SENSOR_ReadID+0x4c>)
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000da2:	6839      	ldr	r1, [r7, #0]
 8000da4:	4610      	mov	r0, r2
 8000da6:	4798      	blx	r3
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	da03      	bge.n	8000db6 <VL53L7A1_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000dae:	f06f 0304 	mvn.w	r3, #4
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e001      	b.n	8000dba <VL53L7A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000128 	.word	0x20000128
 8000dc8:	2000011c 	.word	0x2000011c

08000dcc <VL53L7A1_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d903      	bls.n	8000de4 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ddc:	f06f 0301 	mvn.w	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	e012      	b.n	8000e0a <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x48>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	490b      	ldr	r1, [pc, #44]	; (8000e18 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x4c>)
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000df2:	6839      	ldr	r1, [r7, #0]
 8000df4:	4610      	mov	r0, r2
 8000df6:	4798      	blx	r3
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	da03      	bge.n	8000e06 <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000dfe:	f06f 0304 	mvn.w	r3, #4
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	e001      	b.n	8000e0a <VL53L7A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000128 	.word	0x20000128
 8000e18:	2000011c 	.word	0x2000011c

08000e1c <VL53L7A1_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d903      	bls.n	8000e34 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e2c:	f06f 0301 	mvn.w	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	e012      	b.n	8000e5a <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x48>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	490b      	ldr	r1, [pc, #44]	; (8000e68 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x4c>)
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e42:	6839      	ldr	r1, [r7, #0]
 8000e44:	4610      	mov	r0, r2
 8000e46:	4798      	blx	r3
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da03      	bge.n	8000e56 <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000e4e:	f06f 0304 	mvn.w	r3, #4
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e001      	b.n	8000e5a <VL53L7A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000128 	.word	0x20000128
 8000e68:	2000011c 	.word	0x2000011c

08000e6c <VL53L7A1_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d903      	bls.n	8000e84 <VL53L7A1_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e7c:	f06f 0301 	mvn.w	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	e012      	b.n	8000eaa <VL53L7A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->GetDistance(VL53L7A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <VL53L7A1_RANGING_SENSOR_GetDistance+0x48>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	490b      	ldr	r1, [pc, #44]	; (8000eb8 <VL53L7A1_RANGING_SENSOR_GetDistance+0x4c>)
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e92:	6839      	ldr	r1, [r7, #0]
 8000e94:	4610      	mov	r0, r2
 8000e96:	4798      	blx	r3
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da03      	bge.n	8000ea6 <VL53L7A1_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000e9e:	f06f 0304 	mvn.w	r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	e001      	b.n	8000eaa <VL53L7A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000128 	.word	0x20000128
 8000eb8:	2000011c 	.word	0x2000011c

08000ebc <VL53L7A1_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d903      	bls.n	8000ed4 <VL53L7A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ecc:	f06f 0301 	mvn.w	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	e012      	b.n	8000efa <VL53L7A1_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->Start(VL53L7A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <VL53L7A1_RANGING_SENSOR_Start+0x48>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	490b      	ldr	r1, [pc, #44]	; (8000f08 <VL53L7A1_RANGING_SENSOR_Start+0x4c>)
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ee2:	6839      	ldr	r1, [r7, #0]
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4798      	blx	r3
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da03      	bge.n	8000ef6 <VL53L7A1_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000eee:	f06f 0304 	mvn.w	r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e001      	b.n	8000efa <VL53L7A1_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000128 	.word	0x20000128
 8000f08:	2000011c 	.word	0x2000011c

08000f0c <VL53L7A1_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L7A1_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d903      	bls.n	8000f22 <VL53L7A1_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f1a:	f06f 0301 	mvn.w	r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e011      	b.n	8000f46 <VL53L7A1_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L7A1_RANGING_SENSOR_Drv->Stop(VL53L7A1_RANGING_SENSOR_CompObj[Instance]) < 0)
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <VL53L7A1_RANGING_SENSOR_Stop+0x44>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	490a      	ldr	r1, [pc, #40]	; (8000f54 <VL53L7A1_RANGING_SENSOR_Stop+0x48>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f30:	4610      	mov	r0, r2
 8000f32:	4798      	blx	r3
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da03      	bge.n	8000f42 <VL53L7A1_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000f3a:	f06f 0304 	mvn.w	r3, #4
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e001      	b.n	8000f46 <VL53L7A1_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000128 	.word	0x20000128
 8000f54:	2000011c 	.word	0x2000011c

08000f58 <VL53L7CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L7CX_Probe(uint32_t Instance)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  VL53L7CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L7CX_Object_t   VL53L7CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L7CX_ADDRESS;
 8000f60:	2352      	movs	r3, #82	; 0x52
 8000f62:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L7A1_I2C_Init;
 8000f64:	4b38      	ldr	r3, [pc, #224]	; (8001048 <VL53L7CX_Probe+0xf0>)
 8000f66:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L7A1_I2C_DeInit;
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <VL53L7CX_Probe+0xf4>)
 8000f6a:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L7A1_I2C_WriteReg;
 8000f6c:	4b38      	ldr	r3, [pc, #224]	; (8001050 <VL53L7CX_Probe+0xf8>)
 8000f6e:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L7A1_I2C_ReadReg;
 8000f70:	4b38      	ldr	r3, [pc, #224]	; (8001054 <VL53L7CX_Probe+0xfc>)
 8000f72:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L7A1_GetTick;
 8000f74:	4b38      	ldr	r3, [pc, #224]	; (8001058 <VL53L7CX_Probe+0x100>)
 8000f76:	623b      	str	r3, [r7, #32]

  if (VL53L7CX_RegisterBusIO(&(VL53L7CXObj[Instance]), &IOCtx) != VL53L7CX_OK)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f640 1258 	movw	r2, #2392	; 0x958
 8000f7e:	fb02 f303 	mul.w	r3, r2, r3
 8000f82:	4a36      	ldr	r2, [pc, #216]	; (800105c <VL53L7CX_Probe+0x104>)
 8000f84:	4413      	add	r3, r2
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fb28 	bl	80035e2 <VL53L7CX_RegisterBusIO>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <VL53L7CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8000f98:	f06f 0304 	mvn.w	r3, #4
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9e:	e04d      	b.n	800103c <VL53L7CX_Probe+0xe4>
  }
  else
  {
    VL53L7A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L7CX_RANGING_SENSOR_Driver;
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <VL53L7CX_Probe+0x108>)
 8000fa2:	4a30      	ldr	r2, [pc, #192]	; (8001064 <VL53L7CX_Probe+0x10c>)
 8000fa4:	601a      	str	r2, [r3, #0]
    VL53L7A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L7CXObj[Instance]);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f640 1258 	movw	r2, #2392	; 0x958
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4a2a      	ldr	r2, [pc, #168]	; (800105c <VL53L7CX_Probe+0x104>)
 8000fb2:	441a      	add	r2, r3
 8000fb4:	492c      	ldr	r1, [pc, #176]	; (8001068 <VL53L7CX_Probe+0x110>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L7CX_ReadID(&(VL53L7CXObj[Instance]), &id) != VL53L7CX_OK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f640 1258 	movw	r2, #2392	; 0x958
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <VL53L7CX_Probe+0x104>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	f107 0208 	add.w	r2, r7, #8
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fbb6 	bl	8003742 <VL53L7CX_ReadID>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <VL53L7CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8000fdc:	f06f 0304 	mvn.w	r3, #4
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe2:	e02b      	b.n	800103c <VL53L7CX_Probe+0xe4>
    }
    else if (id != VL53L7CX_ID)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	f24f 0202 	movw	r2, #61442	; 0xf002
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d003      	beq.n	8000ff6 <VL53L7CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8000fee:	f06f 0306 	mvn.w	r3, #6
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff4:	e022      	b.n	800103c <VL53L7CX_Probe+0xe4>
    }
    else if (VL53L7A1_RANGING_SENSOR_Drv->Init(VL53L7A1_RANGING_SENSOR_CompObj[Instance]) != VL53L7CX_OK)
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <VL53L7CX_Probe+0x108>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	491a      	ldr	r1, [pc, #104]	; (8001068 <VL53L7CX_Probe+0x110>)
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001004:	4610      	mov	r0, r2
 8001006:	4798      	blx	r3
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <VL53L7CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800100e:	f06f 0304 	mvn.w	r3, #4
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
 8001014:	e012      	b.n	800103c <VL53L7CX_Probe+0xe4>
    }
    else if (VL53L7A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L7A1_RANGING_SENSOR_CompObj[Instance],
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <VL53L7CX_Probe+0x108>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4912      	ldr	r1, [pc, #72]	; (8001068 <VL53L7CX_Probe+0x110>)
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001024:	4911      	ldr	r1, [pc, #68]	; (800106c <VL53L7CX_Probe+0x114>)
 8001026:	4610      	mov	r0, r2
 8001028:	4798      	blx	r3
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <VL53L7CX_Probe+0xe0>
                                                          &VL53L7A1_RANGING_SENSOR_Cap) != VL53L7CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001030:	f06f 0304 	mvn.w	r3, #4
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
 8001036:	e001      	b.n	800103c <VL53L7CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800103e:	4618      	mov	r0, r3
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	08000869 	.word	0x08000869
 800104c:	080008e5 	.word	0x080008e5
 8001050:	08000935 	.word	0x08000935
 8001054:	08000999 	.word	0x08000999
 8001058:	080009fd 	.word	0x080009fd
 800105c:	2000013c 	.word	0x2000013c
 8001060:	20000128 	.word	0x20000128
 8001064:	20000004 	.word	0x20000004
 8001068:	2000011c 	.word	0x2000011c
 800106c:	2000012c 	.word	0x2000012c

08001070 <_vl53l7cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	4608      	mov	r0, r1
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	4603      	mov	r3, r0
 8001080:	70fb      	strb	r3, [r7, #3]
 8001082:	460b      	mov	r3, r1
 8001084:	70bb      	strb	r3, [r7, #2]
 8001086:	4613      	mov	r3, r2
 8001088:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8001092:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	8839      	ldrh	r1, [r7, #0]
 800109e:	f002 fa39 	bl	8003514 <RdMulti>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	210a      	movs	r1, #10
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fa7c 	bl	80035ae <WaitMs>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	4313      	orrs	r3, r2
 80010be:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	2bc7      	cmp	r3, #199	; 0xc7
 80010c4:	d904      	bls.n	80010d0 <_vl53l7cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L7CX_STATUS_TIMEOUT_ERROR;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
			break;
 80010ce:	e01a      	b.n	8001106 <_vl53l7cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d909      	bls.n	80010ea <_vl53l7cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 80010dc:	2b7e      	cmp	r3, #126	; 0x7e
 80010de:	d904      	bls.n	80010ea <_vl53l7cx_poll_for_answer+0x7a>
		{
			status |= VL53L7CX_MCU_ERROR;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80010e6:	73fb      	strb	r3, [r7, #15]
			break;
 80010e8:	e00d      	b.n	8001106 <_vl53l7cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 80010ea:	7bbb      	ldrb	r3, [r7, #14]
 80010ec:	3301      	adds	r3, #1
 80010ee:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80010f0:	78bb      	ldrb	r3, [r7, #2]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80010fa:	7e3b      	ldrb	r3, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	7f3a      	ldrb	r2, [r7, #28]
 8001102:	429a      	cmp	r2, r3
 8001104:	d1c5      	bne.n	8001092 <_vl53l7cx_poll_for_answer+0x22>

	return status;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_vl53l7cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l7cx_poll_for_mcu_boot(
              VL53L7CX_Configuration      *p_dev)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L7CX_STATUS_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f107 020b 	add.w	r2, r7, #11
 8001126:	2106      	movs	r1, #6
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f9b1 	bl	8003490 <RdByte>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	4313      	orrs	r3, r2
 8001136:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8001138:	7afb      	ldrb	r3, [r7, #11]
 800113a:	b25b      	sxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	da10      	bge.n	8001162 <_vl53l7cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f107 020a 	add.w	r2, r7, #10
 8001146:	2107      	movs	r1, #7
 8001148:	4618      	mov	r0, r3
 800114a:	f002 f9a1 	bl	8003490 <RdByte>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	4313      	orrs	r3, r2
 8001156:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8001158:	7aba      	ldrb	r2, [r7, #10]
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	4313      	orrs	r3, r2
 800115e:	73fb      	strb	r3, [r7, #15]
			break;
 8001160:	e012      	b.n	8001188 <_vl53l7cx_poll_for_mcu_boot+0x78>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2101      	movs	r1, #1
 8001166:	4618      	mov	r0, r3
 8001168:	f002 fa21 	bl	80035ae <WaitMs>
		timeout++;
 800116c:	89bb      	ldrh	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <_vl53l7cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 800117c:	89bb      	ldrh	r3, [r7, #12]
 800117e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001182:	d3cd      	bcc.n	8001120 <_vl53l7cx_poll_for_mcu_boot+0x10>
 8001184:	e000      	b.n	8001188 <_vl53l7cx_poll_for_mcu_boot+0x78>
			break;
 8001186:	bf00      	nop

   return status;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <_vl53l7cx_send_offset_data>:
 */

static uint8_t _vl53l7cx_send_offset_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0ea      	sub	sp, #424	; 0x1a8
 8001198:	af02      	add	r7, sp, #8
 800119a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800119e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80011a2:	6018      	str	r0, [r3, #0]
 80011a4:	460a      	mov	r2, r1
 80011a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011aa:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 80011ae:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 80011b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011ba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80011be:	4ad9      	ldr	r2, [pc, #868]	; (8001524 <_vl53l7cx_send_offset_data+0x390>)
 80011c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80011c8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011cc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80011d0:	4ad5      	ldr	r2, [pc, #852]	; (8001528 <_vl53l7cx_send_offset_data+0x394>)
 80011d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d6:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80011da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011de:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L7CX_OFFSET_BUFFER_SIZE);
 80011e8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 80011f4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80011f8:	4619      	mov	r1, r3
 80011fa:	f006 ff15 	bl	8008028 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4){
 80011fe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001202:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b10      	cmp	r3, #16
 800120a:	f040 8122 	bne.w	8001452 <_vl53l7cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800120e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001212:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 800121c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001220:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001224:	cb03      	ldmia	r3!, {r0, r1}
 8001226:	6010      	str	r0, [r2, #0]
 8001228:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 800122a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800122e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001238:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f980 	bl	8003542 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8001242:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001246:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 8001250:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001258:	4618      	mov	r0, r3
 800125a:	f006 fee5 	bl	8008028 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 800125e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001262:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 800126c:	f107 0318 	add.w	r3, r7, #24
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	4618      	mov	r0, r3
 8001274:	f006 fed8 	bl	8008028 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001278:	2300      	movs	r3, #0
 800127a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800127e:	e0ac      	b.n	80013da <_vl53l7cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8001286:	e09c      	b.n	80013c2 <_vl53l7cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8001288:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800128c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4413      	add	r3, r2
 8001294:	005a      	lsls	r2, r3, #1
 8001296:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800129a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800129e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 80012a2:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80012a6:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80012b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80012ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012be:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80012c0:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80012c4:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	3304      	adds	r3, #4
 80012ce:	0059      	lsls	r1, r3, #1
 80012d0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80012d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80012d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012dc:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80012de:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80012e2:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	f103 0109 	add.w	r1, r3, #9
 80012f0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80012f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80012f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012fc:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80012fe:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001302:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	440a      	add	r2, r1
                                  /(uint32_t)4;
 800130a:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800130c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8001318:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800131c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	005a      	lsls	r2, r3, #1
 8001326:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800132a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800132e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001332:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8001334:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001338:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001348:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800134c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001350:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8001352:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001356:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800135a:	00d2      	lsls	r2, r2, #3
 800135c:	440a      	add	r2, r1
 800135e:	3204      	adds	r2, #4
 8001360:	0051      	lsls	r1, r2, #1
 8001362:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001366:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800136a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800136e:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8001370:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001374:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8001378:	00d2      	lsls	r2, r2, #3
 800137a:	440a      	add	r2, r1
 800137c:	0052      	lsls	r2, r2, #1
 800137e:	f102 0109 	add.w	r1, r2, #9
 8001382:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001386:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800138a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800138e:	4413      	add	r3, r2
                                  /(int16_t)4;
 8001390:	2b00      	cmp	r3, #0
 8001392:	da00      	bge.n	8001396 <_vl53l7cx_send_offset_data+0x202>
 8001394:	3303      	adds	r3, #3
 8001396:	109b      	asrs	r3, r3, #2
 8001398:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800139a:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800139e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	441a      	add	r2, r3
 80013a6:	b209      	sxth	r1, r1
 80013a8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80013ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80013b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 80013b4:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	3301      	adds	r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80013c2:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	f77f af5e 	ble.w	8001288 <_vl53l7cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80013cc:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80013da:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80013de:	2b03      	cmp	r3, #3
 80013e0:	f77f af4e 	ble.w	8001280 <_vl53l7cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	3320      	adds	r3, #32
 80013ea:	2260      	movs	r2, #96	; 0x60
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f006 fda0 	bl	8007f34 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80013f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013f8:	3340      	adds	r3, #64	; 0x40
 80013fa:	22c0      	movs	r2, #192	; 0xc0
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f006 fd98 	bl	8007f34 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8001404:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001408:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8001412:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141a:	4618      	mov	r0, r3
 800141c:	f006 fe04 	bl	8008028 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8001420:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001424:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800142e:	f107 0118 	add.w	r1, r7, #24
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	4618      	mov	r0, r3
 8001436:	f006 fdf7 	bl	8008028 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L7CX_OFFSET_BUFFER_SIZE);
 800143a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800143e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001448:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800144c:	4618      	mov	r0, r3
 800144e:	f002 f878 	bl	8003542 <SwapBuffer>
	}

	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001452:	2300      	movs	r3, #0
 8001454:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8001458:	e01b      	b.n	8001492 <_vl53l7cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800145a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800145e:	f103 0208 	add.w	r2, r3, #8
 8001462:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001466:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800146a:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 800146e:	6809      	ldr	r1, [r1, #0]
 8001470:	440a      	add	r2, r1
 8001472:	f892 1510 	ldrb.w	r1, [r2, #1296]	; 0x510
 8001476:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800147a:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	4413      	add	r3, r2
 8001482:	460a      	mov	r2, r1
 8001484:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(k = 0; k < (VL53L7CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001488:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800148c:	3301      	adds	r3, #1
 800148e:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8001492:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001496:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 800149a:	d3de      	bcc.n	800145a <_vl53l7cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 800149c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80014a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 80014aa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80014ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80014b2:	cb03      	ldmia	r3!, {r0, r1}
 80014b4:	6010      	str	r0, [r2, #0]
 80014b6:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80014b8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80014bc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80014c6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80014d0:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80014d4:	f642 6118 	movw	r1, #11800	; 0x2e18
 80014d8:	f002 f805 	bl	80034e6 <WrMulti>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80014e4:	4313      	orrs	r3, r2
 80014e6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80014ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80014ee:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80014f2:	2303      	movs	r3, #3
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	23ff      	movs	r3, #255	; 0xff
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80014fe:	2201      	movs	r2, #1
 8001500:	2104      	movs	r1, #4
 8001502:	6800      	ldr	r0, [r0, #0]
 8001504:	f7ff fdb4 	bl	8001070 <_vl53l7cx_poll_for_answer>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8001510:	4313      	orrs	r3, r2
 8001512:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001516:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 800151a:	4618      	mov	r0, r3
 800151c:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	08008ae0 	.word	0x08008ae0
 8001528:	08008ae8 	.word	0x08008ae8

0800152c <_vl53l7cx_send_xtalk_data>:
 */

static uint8_t _vl53l7cx_send_xtalk_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0ca      	sub	sp, #296	; 0x128
 8001530:	af02      	add	r7, sp, #8
 8001532:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001536:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800153a:	6018      	str	r0, [r3, #0]
 800153c:	460a      	mov	r2, r1
 800153e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001542:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8001546:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800154e:	4a9a      	ldr	r2, [pc, #616]	; (80017b8 <_vl53l7cx_send_xtalk_data+0x28c>)
 8001550:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001558:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 800155c:	4a97      	ldr	r2, [pc, #604]	; (80017bc <_vl53l7cx_send_xtalk_data+0x290>)
 800155e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001566:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800156a:	4b95      	ldr	r3, [pc, #596]	; (80017c0 <_vl53l7cx_send_xtalk_data+0x294>)
 800156c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8001570:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001574:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 800157e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001582:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800158c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8001590:	4619      	mov	r1, r3
 8001592:	f006 fd49 	bl	8008028 <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L7CX_RESOLUTION_4X4)
 8001596:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800159a:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	f040 80d2 	bne.w	800174a <_vl53l7cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80015a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80015b4:	461a      	mov	r2, r3
 80015b6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80015ba:	cb03      	ldmia	r3!, {r0, r1}
 80015bc:	6010      	str	r0, [r2, #0]
 80015be:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80015c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80015ce:	461a      	mov	r2, r3
 80015d0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80015d4:	cb03      	ldmia	r3!, {r0, r1}
 80015d6:	6010      	str	r0, [r2, #0]
 80015d8:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 80015da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80015e8:	f44f 7142 	mov.w	r1, #776	; 0x308
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 ffa8 	bl	8003542 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80015f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f203 5144 	addw	r1, r3, #1348	; 0x544
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001608:	4618      	mov	r0, r3
 800160a:	f006 fd0d 	bl	8008028 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800160e:	2300      	movs	r3, #0
 8001610:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001614:	e05d      	b.n	80016d2 <_vl53l7cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001616:	2300      	movs	r3, #0
 8001618:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800161c:	e04e      	b.n	80016bc <_vl53l7cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800161e:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 8001622:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	005a      	lsls	r2, r3, #1
 800162c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001630:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001634:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8001638:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800163c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	1c59      	adds	r1, r3, #1
 8001648:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800164c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001650:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001654:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8001656:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800165a:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	440b      	add	r3, r1
 8001662:	3304      	adds	r3, #4
 8001664:	0059      	lsls	r1, r3, #1
 8001666:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800166a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800166e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001672:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001674:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001678:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	f103 0109 	add.w	r1, r3, #9
 8001686:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800168a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800168e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001692:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8001694:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001698:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80016a0:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 80016a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80016ae:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80016bc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	ddac      	ble.n	800161e <_vl53l7cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 80016c4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80016d2:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	dd9d      	ble.n	8001616 <_vl53l7cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	3340      	adds	r3, #64	; 0x40
 80016e0:	22c0      	movs	r2, #192	; 0xc0
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f006 fc25 	bl	8007f34 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80016ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80016f8:	f107 0108 	add.w	r1, r7, #8
 80016fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001700:	4618      	mov	r0, r3
 8001702:	f006 fc91 	bl	8008028 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 8001706:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800170a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001714:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001718:	4618      	mov	r0, r3
 800171a:	f001 ff12 	bl	8003542 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800171e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001722:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f203 6344 	addw	r3, r3, #1604	; 0x644
 800172c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001730:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8001732:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001736:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8001740:	2204      	movs	r2, #4
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f006 fbf5 	bl	8007f34 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 800174a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800174e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001752:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L7CX_XTALK_BUFFER_SIZE);
 8001754:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001758:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8001762:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001766:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 800176a:	f001 febc 	bl	80034e6 <WrMulti>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001776:	4313      	orrs	r3, r2
 8001778:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l7cx_poll_for_answer(p_dev, 4, 1,
 800177c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001780:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001784:	2303      	movs	r3, #3
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	23ff      	movs	r3, #255	; 0xff
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001790:	2201      	movs	r2, #1
 8001792:	2104      	movs	r1, #4
 8001794:	6800      	ldr	r0, [r0, #0]
 8001796:	f7ff fc6b 	bl	8001070 <_vl53l7cx_poll_for_answer>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80017a2:	4313      	orrs	r3, r2
 80017a4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80017a8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	08008af0 	.word	0x08008af0
 80017bc:	08008af8 	.word	0x08008af8
 80017c0:	0001fca0 	.word	0x0001fca0

080017c4 <vl53l7cx_init>:
	return status;
}

uint8_t vl53l7cx_init(
		VL53L7CX_Configuration		*p_dev)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af04      	add	r7, sp, #16
 80017ca:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L7CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80017d0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80017d4:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80017d6:	2301      	movs	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L7CX_DEFAULT_XTALK;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a80      	ldr	r2, [pc, #512]	; (80019e0 <vl53l7cx_init+0x21c>)
 80017de:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L7CX_DEFAULT_CONFIGURATION;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a80      	ldr	r2, [pc, #512]	; (80019e4 <vl53l7cx_init+0x220>)
 80017e4:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 fe5f 	bl	80034ba <WrByte>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	4313      	orrs	r3, r2
 8001804:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2204      	movs	r2, #4
 800180a:	2109      	movs	r1, #9
 800180c:	4618      	mov	r0, r3
 800180e:	f001 fe54 	bl	80034ba <WrByte>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	4313      	orrs	r3, r2
 800181a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	210f      	movs	r1, #15
 8001822:	4618      	mov	r0, r3
 8001824:	f001 fe49 	bl	80034ba <WrByte>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	4313      	orrs	r3, r2
 8001830:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2203      	movs	r2, #3
 8001836:	210a      	movs	r1, #10
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fe3e 	bl	80034ba <WrByte>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	4313      	orrs	r3, r2
 8001846:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f107 0216 	add.w	r2, r7, #22
 800184e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001852:	4618      	mov	r0, r3
 8001854:	f001 fe1c 	bl	8003490 <RdByte>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	4313      	orrs	r3, r2
 8001860:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	210c      	movs	r1, #12
 8001868:	4618      	mov	r0, r3
 800186a:	f001 fe26 	bl	80034ba <WrByte>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	4313      	orrs	r3, r2
 8001876:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f240 1101 	movw	r1, #257	; 0x101
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fe1a 	bl	80034ba <WrByte>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	4313      	orrs	r3, r2
 800188e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001898:	4618      	mov	r0, r3
 800189a:	f001 fe0e 	bl	80034ba <WrByte>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 fe02 	bl	80034ba <WrByte>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	4313      	orrs	r3, r2
 80018be:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f244 0102 	movw	r1, #16386	; 0x4002
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 fdf6 	bl	80034ba <WrByte>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f244 0102 	movw	r1, #16386	; 0x4002
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 fdea 	bl	80034ba <WrByte>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2203      	movs	r2, #3
 80018f4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80018f8:	4618      	mov	r0, r3
 80018fa:	f001 fdde 	bl	80034ba <WrByte>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	4313      	orrs	r3, r2
 8001906:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f240 1103 	movw	r1, #259	; 0x103
 8001910:	4618      	mov	r0, r3
 8001912:	f001 fdd2 	bl	80034ba <WrByte>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	4313      	orrs	r3, r2
 800191e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	210c      	movs	r1, #12
 8001926:	4618      	mov	r0, r3
 8001928:	f001 fdc7 	bl	80034ba <WrByte>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	4313      	orrs	r3, r2
 8001934:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2243      	movs	r2, #67	; 0x43
 800193a:	210f      	movs	r1, #15
 800193c:	4618      	mov	r0, r3
 800193e:	f001 fdbc 	bl	80034ba <WrByte>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	4313      	orrs	r3, r2
 800194a:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2101      	movs	r1, #1
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fe2c 	bl	80035ae <WaitMs>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	4313      	orrs	r3, r2
 800195e:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2240      	movs	r2, #64	; 0x40
 8001964:	210f      	movs	r1, #15
 8001966:	4618      	mov	r0, r3
 8001968:	f001 fda7 	bl	80034ba <WrByte>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	4313      	orrs	r3, r2
 8001974:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	210a      	movs	r1, #10
 800197c:	4618      	mov	r0, r3
 800197e:	f001 fd9c 	bl	80034ba <WrByte>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	4313      	orrs	r3, r2
 800198a:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2164      	movs	r1, #100	; 0x64
 8001990:	4618      	mov	r0, r3
 8001992:	f001 fe0c 	bl	80035ae <WaitMs>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	4313      	orrs	r3, r2
 800199e:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 fd86 	bl	80034ba <WrByte>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80019b8:	2301      	movs	r3, #1
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	23ff      	movs	r3, #255	; 0xff
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2306      	movs	r3, #6
 80019c2:	2200      	movs	r2, #0
 80019c4:	2101      	movs	r1, #1
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fb52 	bl	8001070 <_vl53l7cx_poll_for_answer>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 8354 	bne.w	8002086 <vl53l7cx_init+0x8c2>
 80019de:	e003      	b.n	80019e8 <vl53l7cx_init+0x224>
 80019e0:	0801e1dc 	.word	0x0801e1dc
 80019e4:	0801de10 	.word	0x0801de10
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	210e      	movs	r1, #14
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fd63 	bl	80034ba <WrByte>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2202      	movs	r2, #2
 8001a02:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fd57 	bl	80034ba <WrByte>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	220d      	movs	r2, #13
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 fd4c 	bl	80034ba <WrByte>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a34:	4618      	mov	r0, r3
 8001a36:	f001 fd40 	bl	80034ba <WrByte>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001a44:	2310      	movs	r3, #16
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	2310      	movs	r3, #16
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2321      	movs	r3, #33	; 0x21
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fb0c 	bl	8001070 <_vl53l7cx_poll_for_answer>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 fd25 	bl	80034ba <WrByte>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f107 0216 	add.w	r2, r7, #22
 8001a80:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fd03 	bl	8003490 <RdByte>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	210c      	movs	r1, #12
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 fd0d 	bl	80034ba <WrByte>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 fd01 	bl	80034ba <WrByte>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f240 1101 	movw	r1, #257	; 0x101
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 fcf5 	bl	80034ba <WrByte>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fce9 	bl	80034ba <WrByte>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fcdd 	bl	80034ba <WrByte>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f244 0102 	movw	r1, #16386	; 0x4002
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 fcd1 	bl	80034ba <WrByte>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f244 0102 	movw	r1, #16386	; 0x4002
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f001 fcc5 	bl	80034ba <WrByte>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 fcb9 	bl	80034ba <WrByte>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f240 1103 	movw	r1, #259	; 0x103
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 fcad 	bl	80034ba <WrByte>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f244 010f 	movw	r1, #16399	; 0x400f
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 fca1 	bl	80034ba <WrByte>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2243      	movs	r2, #67	; 0x43
 8001b86:	f240 211a 	movw	r1, #538	; 0x21a
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fc95 	bl	80034ba <WrByte>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	f240 211a 	movw	r1, #538	; 0x21a
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fc89 	bl	80034ba <WrByte>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f240 211a 	movw	r1, #538	; 0x21a
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 fc7d 	bl	80034ba <WrByte>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f240 211a 	movw	r1, #538	; 0x21a
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 fc71 	bl	80034ba <WrByte>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f240 2119 	movw	r1, #537	; 0x219
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 fc65 	bl	80034ba <WrByte>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f240 211b 	movw	r1, #539	; 0x21b
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 fc59 	bl	80034ba <WrByte>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 fc4d 	bl	80034ba <WrByte>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f107 0216 	add.w	r2, r7, #22
 8001c30:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 fc2b 	bl	8003490 <RdByte>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	210c      	movs	r1, #12
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fc35 	bl	80034ba <WrByte>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 fc29 	bl	80034ba <WrByte>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2207      	movs	r2, #7
 8001c76:	2120      	movs	r1, #32
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 fc1e 	bl	80034ba <WrByte>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2206      	movs	r2, #6
 8001c8c:	2120      	movs	r1, #32
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f001 fc13 	bl	80034ba <WrByte>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461a      	mov	r2, r3
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L7CX */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2209      	movs	r2, #9
 8001ca2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 fc07 	bl	80034ba <WrByte>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cbc:	4ae1      	ldr	r2, [pc, #900]	; (8002044 <vl53l7cx_init+0x880>)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	f001 fc11 	bl	80034e6 <WrMulti>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 fbef 	bl	80034ba <WrByte>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cec:	4ad6      	ldr	r2, [pc, #856]	; (8002048 <vl53l7cx_init+0x884>)
 8001cee:	2100      	movs	r1, #0
 8001cf0:	f001 fbf9 	bl	80034e6 <WrMulti>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	220b      	movs	r2, #11
 8001d02:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 fbd7 	bl	80034ba <WrByte>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001d1c:	4acb      	ldr	r2, [pc, #812]	; (800204c <vl53l7cx_init+0x888>)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	f001 fbe1 	bl	80034e6 <WrMulti>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L7CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fbbf 	bl	80034ba <WrByte>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 fbb3 	bl	80034ba <WrByte>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	220d      	movs	r2, #13
 8001d62:	2103      	movs	r1, #3
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 fba8 	bl	80034ba <WrByte>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fb9c 	bl	80034ba <WrByte>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	2310      	movs	r3, #16
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2321      	movs	r3, #33	; 0x21
 8001d96:	2200      	movs	r2, #0
 8001d98:	2101      	movs	r1, #1
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff f968 	bl	8001070 <_vl53l7cx_poll_for_answer>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f040 816c 	bne.w	800208a <vl53l7cx_init+0x8c6>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fb7d 	bl	80034ba <WrByte>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f107 0216 	add.w	r2, r7, #22
 8001dd0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f001 fb5b 	bl	8003490 <RdByte>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	210c      	movs	r1, #12
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 fb65 	bl	80034ba <WrByte>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 fb59 	bl	80034ba <WrByte>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f001 fb4d 	bl	80034ba <WrByte>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f240 1115 	movw	r1, #277	; 0x115
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 fb41 	bl	80034ba <WrByte>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2242      	movs	r2, #66	; 0x42
 8001e46:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 fb35 	bl	80034ba <WrByte>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f240 1117 	movw	r1, #279	; 0x117
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 fb29 	bl	80034ba <WrByte>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	210b      	movs	r1, #11
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 fb1e 	bl	80034ba <WrByte>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f107 0216 	add.w	r2, r7, #22
 8001e8e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 fafc 	bl	8003490 <RdByte>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	210c      	movs	r1, #12
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 fb06 	bl	80034ba <WrByte>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	210b      	movs	r1, #11
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 fafb 	bl	80034ba <WrByte>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l7cx_poll_for_mcu_boot(p_dev);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff f91e 	bl	8001110 <_vl53l7cx_poll_for_mcu_boot>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f040 80d4 	bne.w	800208e <vl53l7cx_init+0x8ca>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fae3 	bl	80034ba <WrByte>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	2328      	movs	r3, #40	; 0x28
 8001f02:	4a53      	ldr	r2, [pc, #332]	; (8002050 <vl53l7cx_init+0x88c>)
 8001f04:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8001f08:	f001 faed 	bl	80034e6 <WrMulti>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L7CX_GET_NVM_CMD, sizeof(VL53L7CX_GET_NVM_CMD));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 0,
 8001f16:	2302      	movs	r3, #2
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	23ff      	movs	r3, #255	; 0xff
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001f22:	2200      	movs	r2, #0
 8001f24:	2104      	movs	r1, #4
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff f8a2 	bl	8001070 <_vl53l7cx_poll_for_answer>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8001f36:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L7CX_NVM_DATA_SIZE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8001f3e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001f42:	f642 4104 	movw	r1, #11268	; 0x2c04
 8001f46:	f001 fae5 	bl	8003514 <RdMulti>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f103 0020 	add.w	r0, r3, #32
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001f60:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001f64:	4619      	mov	r1, r3
 8001f66:	f006 f85f 	bl	8008028 <memcpy>
		VL53L7CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l7cx_send_offset_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 8001f6a:	2110      	movs	r1, #16
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff f911 	bl	8001194 <_vl53l7cx_send_offset_data>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L7CX_DEFAULT_XTALK,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f82:	4a34      	ldr	r2, [pc, #208]	; (8002054 <vl53l7cx_init+0x890>)
 8001f84:	4618      	mov	r0, r3
 8001f86:	4611      	mov	r1, r2
 8001f88:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f006 f84b 	bl	8008028 <memcpy>
		VL53L7CX_XTALK_BUFFER_SIZE);
	status |= _vl53l7cx_send_xtalk_data(p_dev, VL53L7CX_RESOLUTION_4X4);
 8001f92:	2110      	movs	r1, #16
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff fac9 	bl	800152c <_vl53l7cx_send_xtalk_data>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L7CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8001fae:	f642 4134 	movw	r1, #11316	; 0x2c34
 8001fb2:	f001 fa98 	bl	80034e6 <WrMulti>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L7CX_DEFAULT_CONFIGURATION));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	23ff      	movs	r3, #255	; 0xff
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2104      	movs	r1, #4
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff f84d 	bl	8001070 <_vl53l7cx_poll_for_answer>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	75fb      	strb	r3, [r7, #23]
		VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8001fe0:	f107 0110 	add.w	r1, r7, #16
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	f64d 3280 	movw	r2, #56192	; 0xdb80
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 ffe8 	bl	8002fc0 <vl53l7cx_dci_write_data>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	75fb      	strb	r3, [r7, #23]
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L7CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8001ffa:	f107 010c 	add.w	r1, r7, #12
 8001ffe:	2304      	movs	r3, #4
 8002000:	f64d 1264 	movw	r2, #55652	; 0xd964
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 ffdb 	bl	8002fc0 <vl53l7cx_dci_write_data>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	4313      	orrs	r3, r2
 8002012:	75fb      	strb	r3, [r7, #23]
			VL53L7CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8002014:	2301      	movs	r3, #1
 8002016:	75bb      	strb	r3, [r7, #22]
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 800201e:	2326      	movs	r3, #38	; 0x26
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	2301      	movs	r3, #1
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	f107 0316 	add.w	r3, r7, #22
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2328      	movs	r3, #40	; 0x28
 800202e:	f24e 1208 	movw	r2, #57608	; 0xe108
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f001 f862 	bl	80030fc <vl53l7cx_dci_replace_data>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	4313      	orrs	r3, r2
 8002040:	e00a      	b.n	8002058 <vl53l7cx_init+0x894>
 8002042:	bf00      	nop
 8002044:	08008e10 	.word	0x08008e10
 8002048:	08010e10 	.word	0x08010e10
 800204c:	08018e10 	.word	0x08018e10
 8002050:	0801e4e4 	.word	0x0801e4e4
 8002054:	0801e1dc 	.word	0x0801e1dc
 8002058:	75fb      	strb	r3, [r7, #23]
			VL53L7CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002060:	2325      	movs	r3, #37	; 0x25
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	2301      	movs	r3, #1
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	f107 0316 	add.w	r3, r7, #22
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2328      	movs	r3, #40	; 0x28
 8002070:	f24e 1208 	movw	r2, #57608	; 0xe108
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f001 f841 	bl	80030fc <vl53l7cx_dci_replace_data>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	4313      	orrs	r3, r2
 8002082:	75fb      	strb	r3, [r7, #23]
 8002084:	e004      	b.n	8002090 <vl53l7cx_init+0x8cc>
		goto exit;
 8002086:	bf00      	nop
 8002088:	e002      	b.n	8002090 <vl53l7cx_init+0x8cc>
		goto exit;
 800208a:	bf00      	nop
 800208c:	e000      	b.n	8002090 <vl53l7cx_init+0x8cc>
		goto exit;
 800208e:	bf00      	nop
			VL53L7CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);
exit:
	return status;
 8002090:	7dfb      	ldrb	r3, [r7, #23]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop

0800209c <vl53l7cx_set_i2c_address>:

uint8_t vl53l7cx_set_i2c_address(
		VL53L7CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 fa00 	bl	80034ba <WrByte>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	085b      	lsrs	r3, r3, #1
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	2104      	movs	r1, #4
 80020d2:	f001 f9f2 	bl	80034ba <WrByte>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	4313      	orrs	r3, r2
 80020de:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 f9e3 	bl	80034ba <WrByte>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	73fb      	strb	r3, [r7, #15]

	return status;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <vl53l7cx_get_power_mode>:

uint8_t vl53l7cx_get_power_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800211e:	4618      	mov	r0, r3
 8002120:	f001 f9cb 	bl	80034ba <WrByte>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	4313      	orrs	r3, r2
 800212c:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f107 020e 	add.w	r2, r7, #14
 8002134:	2109      	movs	r1, #9
 8002136:	4618      	mov	r0, r3
 8002138:	f001 f9aa 	bl	8003490 <RdByte>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	4313      	orrs	r3, r2
 8002144:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d005      	beq.n	8002158 <vl53l7cx_get_power_mode+0x50>
 800214c:	2b04      	cmp	r3, #4
 800214e:	d107      	bne.n	8002160 <vl53l7cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L7CX_POWER_MODE_WAKEUP;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
			break;
 8002156:	e009      	b.n	800216c <vl53l7cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L7CX_POWER_MODE_SLEEP;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]

			break;
 800215e:	e005      	b.n	800216c <vl53l7cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
			status = VL53L7CX_STATUS_ERROR;
 8002166:	23ff      	movs	r3, #255	; 0xff
 8002168:	73fb      	strb	r3, [r7, #15]
			break;
 800216a:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002174:	4618      	mov	r0, r3
 8002176:	f001 f9a0 	bl	80034ba <WrByte>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	4313      	orrs	r3, r2
 8002182:	73fb      	strb	r3, [r7, #15]

	return status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <vl53l7cx_set_power_mode>:

uint8_t vl53l7cx_set_power_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af02      	add	r7, sp, #8
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L7CX_STATUS_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_get_power_mode(p_dev, &current_power_mode);
 800219e:	f107 030e 	add.w	r3, r7, #14
 80021a2:	4619      	mov	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ffaf 	bl	8002108 <vl53l7cx_get_power_mode>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d061      	beq.n	8002280 <vl53l7cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d028      	beq.n	8002214 <vl53l7cx_set_power_mode+0x86>
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d14d      	bne.n	8002262 <vl53l7cx_set_power_mode+0xd4>
	{
		case VL53L7CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 f973 	bl	80034ba <WrByte>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	4313      	orrs	r3, r2
 80021dc:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	2109      	movs	r1, #9
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 f968 	bl	80034ba <WrByte>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l7cx_poll_for_answer(
 80021f4:	2301      	movs	r3, #1
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	2301      	movs	r3, #1
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2306      	movs	r3, #6
 80021fe:	2200      	movs	r2, #0
 8002200:	2101      	movs	r1, #1
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe ff34 	bl	8001070 <_vl53l7cx_poll_for_answer>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	4313      	orrs	r3, r2
 8002210:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 8002212:	e029      	b.n	8002268 <vl53l7cx_set_power_mode+0xda>

		case VL53L7CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800221c:	4618      	mov	r0, r3
 800221e:	f001 f94c 	bl	80034ba <WrByte>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	4313      	orrs	r3, r2
 800222a:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	2109      	movs	r1, #9
 8002232:	4618      	mov	r0, r3
 8002234:	f001 f941 	bl	80034ba <WrByte>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	4313      	orrs	r3, r2
 8002240:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l7cx_poll_for_answer(
 8002242:	2300      	movs	r3, #0
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	2301      	movs	r3, #1
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2306      	movs	r3, #6
 800224c:	2200      	movs	r2, #0
 800224e:	2101      	movs	r1, #1
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe ff0d 	bl	8001070 <_vl53l7cx_poll_for_answer>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	4313      	orrs	r3, r2
 800225e:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8002260:	e002      	b.n	8002268 <vl53l7cx_set_power_mode+0xda>

		default:
			status = VL53L7CX_STATUS_ERROR;
 8002262:	23ff      	movs	r3, #255	; 0xff
 8002264:	73fb      	strb	r3, [r7, #15]
			break;
 8002266:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002270:	4618      	mov	r0, r3
 8002272:	f001 f922 	bl	80034ba <WrByte>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	4313      	orrs	r3, r2
 800227e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <vl53l7cx_start_ranging>:

uint8_t vl53l7cx_start_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 800228c:	b5b0      	push	{r4, r5, r7, lr}
 800228e:	b09c      	sub	sp, #112	; 0x70
 8002290:	af02      	add	r7, sp, #8
 8002292:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L7CX_STATUS_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 800229a:	2300      	movs	r3, #0
 800229c:	653b      	str	r3, [r7, #80]	; 0x50
 800229e:	2300      	movs	r3, #0
 80022a0:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 80022a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l7cx_get_resolution(p_dev, &resolution);
 80022a8:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fc56 	bl	8002b60 <vl53l7cx_get_resolution>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022bc:	4313      	orrs	r3, r2
 80022be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	p_dev->data_read_size = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	22ff      	movs	r2, #255	; 0xff
 80022cc:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 80022ce:	4ba7      	ldr	r3, [pc, #668]	; (800256c <vl53l7cx_start_ranging+0x2e0>)
 80022d0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80022d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L7CX_START_BH,
 80022da:	4ba5      	ldr	r3, [pc, #660]	; (8002570 <vl53l7cx_start_ranging+0x2e4>)
 80022dc:	f107 040c 	add.w	r4, r7, #12
 80022e0:	461d      	mov	r5, r3
 80022e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L7CX_TARGET_STATUS_BH,
		VL53L7CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 80022f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f4:	3308      	adds	r3, #8
 80022f6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 80022f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fa:	3320      	adds	r3, #32
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 80022fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002300:	3340      	adds	r3, #64	; 0x40
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8002304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002306:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 800230c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002312:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8002314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 800231c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002324:	2300      	movs	r3, #0
 8002326:	663b      	str	r3, [r7, #96]	; 0x60
 8002328:	e073      	b.n	8002412 <vl53l7cx_start_ranging+0x186>
	{
		if ((output[i] == (uint8_t)0) 
 800232a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	3368      	adds	r3, #104	; 0x68
 8002330:	443b      	add	r3, r7
 8002332:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d067      	beq.n	800240a <vl53l7cx_start_ranging+0x17e>
                    || ((output_bh_enable[i/(uint32_t)32]
 800233a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3368      	adds	r3, #104	; 0x68
 8002342:	443b      	add	r3, r7
 8002344:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8002348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d057      	beq.n	800240a <vl53l7cx_start_ranging+0x17e>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 800235a:	f107 020c 	add.w	r2, r7, #12
 800235e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8002366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d03a      	beq.n	80023ea <vl53l7cx_start_ranging+0x15e>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8002374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d833      	bhi.n	80023ea <vl53l7cx_start_ranging+0x15e>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8002382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002384:	885b      	ldrh	r3, [r3, #2]
 8002386:	f245 42cf 	movw	r2, #21711	; 0x54cf
 800238a:	4293      	cmp	r3, r2
 800238c:	d910      	bls.n	80023b0 <vl53l7cx_start_ranging+0x124>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 800238e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002390:	885b      	ldrh	r3, [r3, #2]
 8002392:	f645 028f 	movw	r2, #22671	; 0x588f
 8002396:	4293      	cmp	r3, r2
 8002398:	d80a      	bhi.n	80023b0 <vl53l7cx_start_ranging+0x124>
			{
				bh_ptr->size = resolution;
 800239a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800239e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a2:	b299      	uxth	r1, r3
 80023a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023a6:	8813      	ldrh	r3, [r2, #0]
 80023a8:	f361 130f 	bfi	r3, r1, #4, #12
 80023ac:	8013      	strh	r3, [r2, #0]
 80023ae:	e009      	b.n	80023c4 <vl53l7cx_start_ranging+0x138>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 80023b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	b299      	uxth	r1, r3
 80023ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023bc:	8813      	ldrh	r3, [r2, #0]
 80023be:	f361 130f 	bfi	r3, r1, #4, #12
 80023c2:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L7CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023ca:	7812      	ldrb	r2, [r2, #0]
 80023cc:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	4611      	mov	r1, r2
 80023d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023d6:	8812      	ldrh	r2, [r2, #0]
 80023d8:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80023dc:	b292      	uxth	r2, r2
 80023de:	fb01 f202 	mul.w	r2, r1, r2
 80023e2:	441a      	add	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	615a      	str	r2, [r3, #20]
 80023e8:	e009      	b.n	80023fe <vl53l7cx_start_ranging+0x172>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80023f6:	b292      	uxth	r2, r2
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	615a      	str	r2, [r3, #20]
 8002408:	e000      	b.n	800240c <vl53l7cx_start_ranging+0x180>
			continue;
 800240a:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 800240c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800240e:	3301      	adds	r3, #1
 8002410:	663b      	str	r3, [r7, #96]	; 0x60
 8002412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002414:	2b0b      	cmp	r3, #11
 8002416:	d988      	bls.n	800232a <vl53l7cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)24;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f103 0218 	add.w	r2, r3, #24
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	615a      	str	r2, [r3, #20]

	status |= vl53l7cx_dci_write_data(p_dev,
 8002424:	f107 010c 	add.w	r1, r7, #12
 8002428:	2330      	movs	r3, #48	; 0x30
 800242a:	f64d 1280 	movw	r2, #55680	; 0xd980
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fdc6 	bl	8002fc0 <vl53l7cx_dci_write_data>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800243c:	4313      	orrs	r3, r2
 800243e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output), VL53L7CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t)1;
 8002448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800244a:	3301      	adds	r3, #1
 800244c:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l7cx_dci_write_data(p_dev,
 800244e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002452:	2308      	movs	r3, #8
 8002454:	f64d 1268 	movw	r2, #55656	; 0xd968
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fdb1 	bl	8002fc0 <vl53l7cx_dci_write_data>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002466:	4313      	orrs	r3, r2
 8002468:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(header_config), VL53L7CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l7cx_dci_write_data(p_dev,
 800246c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002470:	2310      	movs	r3, #16
 8002472:	f64d 1270 	movw	r2, #55664	; 0xd970
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fda2 	bl	8002fc0 <vl53l7cx_dci_write_data>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002484:	4313      	orrs	r3, r2
 8002486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output_bh_enable), VL53L7CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002492:	4618      	mov	r0, r3
 8002494:	f001 f811 	bl	80034ba <WrByte>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2205      	movs	r2, #5
 80024aa:	2109      	movs	r1, #9
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 f804 	bl	80034ba <WrByte>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461a      	mov	r2, r3
 80024b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fff6 	bl	80034ba <WrByte>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L7CX_UI_CMD_END -
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80024e2:	2304      	movs	r3, #4
 80024e4:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 80024e8:	f000 fffd 	bl	80034e6 <WrMulti>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80024fa:	2303      	movs	r3, #3
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	23ff      	movs	r3, #255	; 0xff
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002506:	2201      	movs	r2, #1
 8002508:	2104      	movs	r1, #4
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fdb0 	bl	8001070 <_vl53l7cx_poll_for_answer>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002518:	4313      	orrs	r3, r2
 800251a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l7cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l7cx_dci_read_data(p_dev,
 8002524:	230c      	movs	r3, #12
 8002526:	f245 4240 	movw	r2, #21568	; 0x5440
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fcbe 	bl	8002eac <vl53l7cx_dci_read_data>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002538:	4313      	orrs	r3, r2
 800253a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	if(tmp != p_dev->data_read_size)
 800254c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002550:	461a      	mov	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	429a      	cmp	r2, r3
 8002558:	d002      	beq.n	8002560 <vl53l7cx_start_ranging+0x2d4>
	{
		status |= VL53L7CX_STATUS_ERROR;
 800255a:	23ff      	movs	r3, #255	; 0xff
 800255c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	return status;
 8002560:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002564:	4618      	mov	r0, r3
 8002566:	3768      	adds	r7, #104	; 0x68
 8002568:	46bd      	mov	sp, r7
 800256a:	bdb0      	pop	{r4, r5, r7, pc}
 800256c:	08008b00 	.word	0x08008b00
 8002570:	08008b10 	.word	0x08008b10

08002574 <vl53l7cx_stop_ranging>:

uint8_t vl53l7cx_stop_ranging(
		VL53L7CX_Configuration		*p_dev)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L7CX_STATUS_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	74fb      	strb	r3, [r7, #19]
 8002580:	2300      	movs	r3, #0
 8002582:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f107 020c 	add.w	r2, r7, #12
 8002592:	2304      	movs	r3, #4
 8002594:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8002598:	f000 ffbc 	bl	8003514 <RdMulti>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f240 42ff 	movw	r2, #1279	; 0x4ff
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d04d      	beq.n	800264c <vl53l7cx_stop_ranging+0xd8>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)1))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3934 	ldrb.w	r3, [r3, #2356]	; 0x934
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d148      	bne.n	800264c <vl53l7cx_stop_ranging+0xd8>
	{
	        status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 ff79 	bl	80034ba <WrByte>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2216      	movs	r2, #22
 80025d6:	2115      	movs	r1, #21
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 ff6e 	bl	80034ba <WrByte>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	75fb      	strb	r3, [r7, #23]
	        status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	2114      	movs	r1, #20
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 ff63 	bl	80034ba <WrByte>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80025fe:	e021      	b.n	8002644 <vl53l7cx_stop_ranging+0xd0>
	        {
	        	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f107 0213 	add.w	r2, r7, #19
 8002606:	2106      	movs	r1, #6
 8002608:	4618      	mov	r0, r3
 800260a:	f000 ff41 	bl	8003490 <RdByte>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	4313      	orrs	r3, r2
 8002616:	75fb      	strb	r3, [r7, #23]
	        	status |= WaitMs(&(p_dev->platform), 10);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	210a      	movs	r1, #10
 800261c:	4618      	mov	r0, r3
 800261e:	f000 ffc6 	bl	80035ae <WaitMs>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	4313      	orrs	r3, r2
 800262a:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 800262c:	8abb      	ldrh	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 8002632:	8abb      	ldrh	r3, [r7, #20]
 8002634:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002638:	d904      	bls.n	8002644 <vl53l7cx_stop_ranging+0xd0>
				{
					status |= tmp;
 800263a:	7cfa      	ldrb	r2, [r7, #19]
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	4313      	orrs	r3, r2
 8002640:	75fb      	strb	r3, [r7, #23]
					break;
 8002642:	e003      	b.n	800264c <vl53l7cx_stop_ranging+0xd8>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	b25b      	sxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	dad9      	bge.n	8002600 <vl53l7cx_stop_ranging+0x8c>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f107 0213 	add.w	r2, r7, #19
 8002652:	2106      	movs	r1, #6
 8002654:	4618      	mov	r0, r3
 8002656:	f000 ff1b 	bl	8003490 <RdByte>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	4313      	orrs	r3, r2
 8002662:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	b25b      	sxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	da15      	bge.n	8002698 <vl53l7cx_stop_ranging+0x124>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f107 0213 	add.w	r2, r7, #19
 8002672:	2107      	movs	r1, #7
 8002674:	4618      	mov	r0, r3
 8002676:	f000 ff0b 	bl	8003490 <RdByte>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	4313      	orrs	r3, r2
 8002682:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	2b84      	cmp	r3, #132	; 0x84
 8002688:	d006      	beq.n	8002698 <vl53l7cx_stop_ranging+0x124>
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b85      	cmp	r3, #133	; 0x85
 800268e:	d003      	beq.n	8002698 <vl53l7cx_stop_ranging+0x124>
		   status |= tmp;
 8002690:	7cfa      	ldrb	r2, [r7, #19]
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	4313      	orrs	r3, r2
 8002696:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 ff0a 	bl	80034ba <WrByte>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	2114      	movs	r1, #20
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 feff 	bl	80034ba <WrByte>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	2115      	movs	r1, #21
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fef4 	bl	80034ba <WrByte>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	4313      	orrs	r3, r2
 80026da:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2204      	movs	r2, #4
 80026e0:	2109      	movs	r1, #9
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fee9 	bl	80034ba <WrByte>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fedd 	bl	80034ba <WrByte>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	4313      	orrs	r3, r2
 8002708:	75fb      	strb	r3, [r7, #23]

	return status;
 800270a:	7dfb      	ldrb	r3, [r7, #23]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <vl53l7cx_check_data_ready>:

uint8_t vl53l7cx_check_data_ready(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 800272a:	2304      	movs	r3, #4
 800272c:	2100      	movs	r1, #0
 800272e:	f000 fef1 	bl	8003514 <RdMulti>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	4313      	orrs	r3, r2
 800273a:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7c1b      	ldrb	r3, [r3, #16]
 8002746:	429a      	cmp	r2, r3
 8002748:	d020      	beq.n	800278c <vl53l7cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002750:	2bff      	cmp	r3, #255	; 0xff
 8002752:	d01b      	beq.n	800278c <vl53l7cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 800275a:	2b05      	cmp	r3, #5
 800275c:	d116      	bne.n	800278c <vl53l7cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8002764:	f003 0305 	and.w	r3, r3, #5
 8002768:	2b05      	cmp	r3, #5
 800276a:	d10f      	bne.n	800278c <vl53l7cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <vl53l7cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	741a      	strb	r2, [r3, #16]
 800278a:	e00e      	b.n	80027aa <vl53l7cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8002792:	b25b      	sxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	da05      	bge.n	80027a4 <vl53l7cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <vl53l7cx_get_ranging_data>:

uint8_t vl53l7cx_get_ranging_data(
		VL53L7CX_Configuration		*p_dev,
		VL53L7CX_ResultsData		*p_results)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 80027c2:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2100      	movs	r1, #0
 80027d0:	f000 fea0 	bl	8003514 <RdMulti>
 80027d4:	4603      	mov	r3, r0
 80027d6:	461a      	mov	r2, r3
 80027d8:	7ffb      	ldrb	r3, [r7, #31]
 80027da:	4313      	orrs	r3, r2
 80027dc:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	741a      	strb	r2, [r3, #16]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f000 fea3 	bl	8003542 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 80027fc:	2310      	movs	r3, #16
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	e0db      	b.n	80029ba <vl53l7cx_get_ranging_data+0x206>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d915      	bls.n	8002848 <vl53l7cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d80e      	bhi.n	8002848 <vl53l7cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800283e:	b29b      	uxth	r3, r3
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	e005      	b.n	8002854 <vl53l7cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002850:	b29b      	uxth	r3, r3
 8002852:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	885b      	ldrh	r3, [r3, #2]
 8002858:	f24e 0284 	movw	r2, #57476	; 0xe084
 800285c:	4293      	cmp	r3, r2
 800285e:	f000 8088 	beq.w	8002972 <vl53l7cx_get_ranging_data+0x1be>
 8002862:	f24e 0284 	movw	r2, #57476	; 0xe084
 8002866:	4293      	cmp	r3, r2
 8002868:	f300 809f 	bgt.w	80029aa <vl53l7cx_get_ranging_data+0x1f6>
 800286c:	f24e 0244 	movw	r2, #57412	; 0xe044
 8002870:	4293      	cmp	r3, r2
 8002872:	d070      	beq.n	8002956 <vl53l7cx_get_ranging_data+0x1a2>
 8002874:	f24e 0244 	movw	r2, #57412	; 0xe044
 8002878:	4293      	cmp	r3, r2
 800287a:	f300 8096 	bgt.w	80029aa <vl53l7cx_get_ranging_data+0x1f6>
 800287e:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8002882:	4293      	cmp	r3, r2
 8002884:	d059      	beq.n	800293a <vl53l7cx_get_ranging_data+0x186>
 8002886:	f64d 7244 	movw	r2, #57156	; 0xdf44
 800288a:	4293      	cmp	r3, r2
 800288c:	f300 808d 	bgt.w	80029aa <vl53l7cx_get_ranging_data+0x1f6>
 8002890:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8002894:	4293      	cmp	r3, r2
 8002896:	d042      	beq.n	800291e <vl53l7cx_get_ranging_data+0x16a>
 8002898:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 800289c:	4293      	cmp	r3, r2
 800289e:	f300 8084 	bgt.w	80029aa <vl53l7cx_get_ranging_data+0x1f6>
 80028a2:	f64d 3284 	movw	r2, #56196	; 0xdb84
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d02b      	beq.n	8002902 <vl53l7cx_get_ranging_data+0x14e>
 80028aa:	f64d 3284 	movw	r2, #56196	; 0xdb84
 80028ae:	4293      	cmp	r3, r2
 80028b0:	dc7b      	bgt.n	80029aa <vl53l7cx_get_ranging_data+0x1f6>
 80028b2:	f64d 0258 	movw	r2, #55384	; 0xd858
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d069      	beq.n	800298e <vl53l7cx_get_ranging_data+0x1da>
 80028ba:	f64d 0258 	movw	r2, #55384	; 0xd858
 80028be:	4293      	cmp	r3, r2
 80028c0:	dc73      	bgt.n	80029aa <vl53l7cx_get_ranging_data+0x1f6>
 80028c2:	f245 42b4 	movw	r2, #21684	; 0x54b4
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <vl53l7cx_get_ranging_data+0x120>
 80028ca:	f245 42d0 	movw	r2, #21712	; 0x54d0
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00a      	beq.n	80028e8 <vl53l7cx_get_ranging_data+0x134>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80028d2:	e06a      	b.n	80029aa <vl53l7cx_get_ranging_data+0x1f6>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	330c      	adds	r3, #12
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80028e0:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
				break;
 80028e6:	e061      	b.n	80029ac <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->ambient_per_spad,
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	3304      	adds	r3, #4
 80028f0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4619      	mov	r1, r3
 80028fc:	f005 fb94 	bl	8008028 <memcpy>
				break;
 8002900:	e054      	b.n	80029ac <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->nb_target_detected,
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	3304      	adds	r3, #4
 800290c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4619      	mov	r1, r3
 8002918:	f005 fb86 	bl	8008028 <memcpy>
				break;
 800291c:	e046      	b.n	80029ac <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->signal_per_spad,
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	3304      	adds	r3, #4
 8002928:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4619      	mov	r1, r3
 8002934:	f005 fb78 	bl	8008028 <memcpy>
				break;
 8002938:	e038      	b.n	80029ac <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->distance_mm,
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	3304      	adds	r3, #4
 8002944:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4619      	mov	r1, r3
 8002950:	f005 fb6a 	bl	8008028 <memcpy>
				break;
 8002954:	e02a      	b.n	80029ac <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->reflectance,
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	3304      	adds	r3, #4
 8002960:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4619      	mov	r1, r3
 800296c:	f005 fb5c 	bl	8008028 <memcpy>
				break;
 8002970:	e01c      	b.n	80029ac <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->target_status,
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f503 7041 	add.w	r0, r3, #772	; 0x304
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	3304      	adds	r3, #4
 800297c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4619      	mov	r1, r3
 8002988:	f005 fb4e 	bl	8008028 <memcpy>
				break;
 800298c:	e00e      	b.n	80029ac <vl53l7cx_get_ranging_data+0x1f8>
				(void)memcpy(&p_results->motion_indicator,
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	3304      	adds	r3, #4
 8002998:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4619      	mov	r1, r3
 80029a4:	f005 fb40 	bl	8008028 <memcpy>
				break;
 80029a8:	e000      	b.n	80029ac <vl53l7cx_get_ranging_data+0x1f8>
				break;
 80029aa:	bf00      	nop
		}
		i += msize;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	3304      	adds	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	f4ff af1e 	bcc.w	8002802 <vl53l7cx_get_ranging_data+0x4e>

#ifndef VL53L7CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L7CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e00d      	b.n	80029e8 <vl53l7cx_get_ranging_data+0x234>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0ada      	lsrs	r2, r3, #11
 80029d8:	6839      	ldr	r1, [r7, #0]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	3301      	adds	r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b3f      	cmp	r3, #63	; 0x3f
 80029ec:	d9ee      	bls.n	80029cc <vl53l7cx_get_ranging_data+0x218>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L7CX_RESOLUTION_8X8
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	e045      	b.n	8002a80 <vl53l7cx_get_ranging_data+0x2cc>
			*VL53L7CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L7CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	da00      	bge.n	8002a0a <vl53l7cx_get_ranging_data+0x256>
 8002a08:	3303      	adds	r3, #3
 8002a0a:	109b      	asrs	r3, r3, #2
 8002a0c:	b219      	sxth	r1, r3
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	460a      	mov	r2, r1
 8002a1c:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da07      	bge.n	8002a42 <vl53l7cx_get_ranging_data+0x28e>
		{
			p_results->distance_mm[i] = 0;
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	2200      	movs	r2, #0
 8002a40:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L7CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	b2d9      	uxtb	r1, r3
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002a5c:	460a      	mov	r2, r1
 8002a5e:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L7CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L7CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3350      	adds	r3, #80	; 0x50
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	0ada      	lsrs	r2, r3, #11
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	3350      	adds	r3, #80	; 0x50
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	605a      	str	r2, [r3, #4]
			*VL53L7CX_NB_TARGET_PER_ZONE); i++)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L7CX_RESOLUTION_8X8
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b3f      	cmp	r3, #63	; 0x3f
 8002a84:	d9b6      	bls.n	80029f4 <vl53l7cx_get_ranging_data+0x240>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L7CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e01b      	b.n	8002ac4 <vl53l7cx_get_ranging_data+0x310>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d110      	bne.n	8002abe <vl53l7cx_get_ranging_data+0x30a>
			for(j = 0; j < (uint32_t)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e00a      	b.n	8002ab8 <vl53l7cx_get_ranging_data+0x304>
				VL53L7CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L7CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L7CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
				VL53L7CX_NB_TARGET_PER_ZONE; j++)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f1      	beq.n	8002aa2 <vl53l7cx_get_ranging_data+0x2ee>
	for(i = 0; i < (uint32_t)VL53L7CX_RESOLUTION_8X8; i++)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b3f      	cmp	r3, #63	; 0x3f
 8002ac8:	d9e0      	bls.n	8002a8c <vl53l7cx_get_ranging_data+0x2d8>
		}
	}
#endif

#ifndef VL53L7CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	e012      	b.n	8002af6 <vl53l7cx_get_ranging_data+0x342>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	33d2      	adds	r3, #210	; 0xd2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <vl53l7cx_get_ranging_data+0x3a8>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0bda      	lsrs	r2, r3, #15
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	33d2      	adds	r3, #210	; 0xd2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	3301      	adds	r3, #1
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2b1f      	cmp	r3, #31
 8002afa:	d9e9      	bls.n	8002ad0 <vl53l7cx_get_ranging_data+0x31c>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	89fb      	ldrh	r3, [r7, #14]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8002b1a:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8002b2e:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	89bb      	ldrh	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	81bb      	strh	r3, [r7, #12]
	if(header_id != footer_id)
 8002b40:	89fa      	ldrh	r2, [r7, #14]
 8002b42:	89bb      	ldrh	r3, [r7, #12]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d003      	beq.n	8002b50 <vl53l7cx_get_ranging_data+0x39c>
	{
		status |= VL53L7CX_STATUS_CORRUPTED_FRAME;
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8002b50:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	80008001 	.word	0x80008001

08002b60 <vl53l7cx_get_resolution>:

uint8_t vl53l7cx_get_resolution(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002b74:	2308      	movs	r3, #8
 8002b76:	f245 4250 	movw	r2, #21584	; 0x5450
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f996 	bl	8002eac <vl53l7cx_dci_read_data>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8002b96:	fb12 f303 	smulbb	r3, r2, r3
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	701a      	strb	r2, [r3, #0]

	return status;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <vl53l7cx_set_resolution>:


uint8_t vl53l7cx_set_resolution(
		VL53L7CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d002      	beq.n	8002bc6 <vl53l7cx_set_resolution+0x1c>
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d055      	beq.n	8002c70 <vl53l7cx_set_resolution+0xc6>
 8002bc4:	e0a9      	b.n	8002d1a <vl53l7cx_set_resolution+0x170>
		case VL53L7CX_RESOLUTION_4X4:
			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002bcc:	2310      	movs	r3, #16
 8002bce:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f96a 	bl	8002eac <vl53l7cx_dci_read_data>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2240      	movs	r2, #64	; 0x40
 8002be6:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2240      	movs	r2, #64	; 0x40
 8002bee:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002c00:	2310      	movs	r3, #16
 8002c02:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f9da 	bl	8002fc0 <vl53l7cx_dci_write_data>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);

			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	f245 4250 	movw	r2, #21584	; 0x5450
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f942 	bl	8002eac <vl53l7cx_dci_read_data>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2204      	movs	r2, #4
 8002c36:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2208      	movs	r2, #8
 8002c46:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002c58:	2308      	movs	r3, #8
 8002c5a:	f245 4250 	movw	r2, #21584	; 0x5450
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f9ae 	bl	8002fc0 <vl53l7cx_dci_write_data>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461a      	mov	r2, r3
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			break;
 8002c6e:	e057      	b.n	8002d20 <vl53l7cx_set_resolution+0x176>

		case VL53L7CX_RESOLUTION_8X8:
			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002c76:	2310      	movs	r3, #16
 8002c78:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f915 	bl	8002eac <vl53l7cx_dci_read_data>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2210      	movs	r2, #16
 8002c98:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002caa:	2310      	movs	r3, #16
 8002cac:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f985 	bl	8002fc0 <vl53l7cx_dci_write_data>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_DSS_CONFIG, 16);

			status |= vl53l7cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_read_data(p_dev,
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	f245 4250 	movw	r2, #21584	; 0x5450
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f8ed 	bl	8002eac <vl53l7cx_dci_read_data>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2208      	movs	r2, #8
 8002ce0:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l7cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l7cx_dci_write_data(p_dev,
 8002d02:	2308      	movs	r3, #8
 8002d04:	f245 4250 	movw	r2, #21584	; 0x5450
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f959 	bl	8002fc0 <vl53l7cx_dci_write_data>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_ZONE_CONFIG, 8);

			break;
 8002d18:	e002      	b.n	8002d20 <vl53l7cx_set_resolution+0x176>

		default:
			status = VL53L7CX_STATUS_INVALID_PARAM;
 8002d1a:	237f      	movs	r3, #127	; 0x7f
 8002d1c:	73fb      	strb	r3, [r7, #15]
			break;
 8002d1e:	bf00      	nop
		}

	status |= _vl53l7cx_send_offset_data(p_dev, resolution);
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	4619      	mov	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fe fa35 	bl	8001194 <_vl53l7cx_send_offset_data>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l7cx_send_xtalk_data(p_dev, resolution);
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	4619      	mov	r1, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7fe fbf7 	bl	800152c <_vl53l7cx_send_xtalk_data>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	73fb      	strb	r3, [r7, #15]

	return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <vl53l7cx_set_ranging_frequency_hz>:
}

uint8_t vl53l7cx_set_ranging_frequency_hz(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b088      	sub	sp, #32
 8002d56:	af04      	add	r7, sp, #16
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]

	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002d68:	2301      	movs	r3, #1
 8002d6a:	9302      	str	r3, [sp, #8]
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	1cfb      	adds	r3, r7, #3
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2304      	movs	r3, #4
 8002d76:	f245 4258 	movw	r2, #21592	; 0x5458
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9be 	bl	80030fc <vl53l7cx_dci_replace_data>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	73fb      	strb	r3, [r7, #15]
					VL53L7CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <vl53l7cx_set_integration_time_ms>:
}

uint8_t vl53l7cx_set_integration_time_ms(
		VL53L7CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af04      	add	r7, sp, #16
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d903      	bls.n	8002db4 <vl53l7cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002db2:	d904      	bls.n	8002dbe <vl53l7cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L7CX_STATUS_INVALID_PARAM;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e01a      	b.n	8002df4 <vl53l7cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	60bb      	str	r3, [r7, #8]

		status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9302      	str	r3, [sp, #8]
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	f107 0308 	add.w	r3, r7, #8
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2314      	movs	r3, #20
 8002de0:	f245 425c 	movw	r2, #21596	; 0x545c
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f989 	bl	80030fc <vl53l7cx_dci_replace_data>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	73fb      	strb	r3, [r7, #15]
				VL53L7CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <vl53l7cx_set_ranging_mode>:
}

uint8_t vl53l7cx_set_ranging_mode(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]

	status |= vl53l7cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002e18:	2308      	movs	r3, #8
 8002e1a:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f844 	bl	8002eac <vl53l7cx_dci_read_data>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d002      	beq.n	8002e3a <vl53l7cx_set_ranging_mode+0x3c>
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d00b      	beq.n	8002e50 <vl53l7cx_set_ranging_mode+0x52>
 8002e38:	e015      	b.n	8002e66 <vl53l7cx_set_ranging_mode+0x68>
	{
		case VL53L7CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2203      	movs	r2, #3
 8002e46:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
			break;
 8002e4e:	e00d      	b.n	8002e6c <vl53l7cx_set_ranging_mode+0x6e>

		case VL53L7CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2203      	movs	r2, #3
 8002e54:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 8002e60:	2301      	movs	r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
			break;
 8002e64:	e002      	b.n	8002e6c <vl53l7cx_set_ranging_mode+0x6e>

		default:
			status = VL53L7CX_STATUS_INVALID_PARAM;
 8002e66:	237f      	movs	r3, #127	; 0x7f
 8002e68:	73fb      	strb	r3, [r7, #15]
			break;
 8002e6a:	bf00      	nop
	}

	status |= vl53l7cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002e72:	2308      	movs	r3, #8
 8002e74:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8a1 	bl	8002fc0 <vl53l7cx_dci_write_data>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	461a      	mov	r2, r3
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002e88:	f107 0108 	add.w	r1, r7, #8
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	f64d 1264 	movw	r2, #55652	; 0xd964
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f894 	bl	8002fc0 <vl53l7cx_dci_write_data>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <vl53l7cx_dci_read_data>:
uint8_t vl53l7cx_dci_read_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08c      	sub	sp, #48	; 0x30
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L7CX_STATUS_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8002ec0:	887b      	ldrh	r3, [r7, #2]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8002ec6:	4a3d      	ldr	r2, [pc, #244]	; (8002fbc <vl53l7cx_dci_read_data+0x110>)
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ece:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8002ed8:	d903      	bls.n	8002ee2 <vl53l7cx_dci_read_data+0x36>
	{
		status |= VL53L7CX_STATUS_ERROR;
 8002eda:	23ff      	movs	r3, #255	; 0xff
 8002edc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002ee0:	e065      	b.n	8002fae <vl53l7cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8002ef0:	887b      	ldrh	r3, [r7, #2]
 8002ef2:	111b      	asrs	r3, r3, #4
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f107 0214 	add.w	r2, r7, #20
 8002f08:	230c      	movs	r3, #12
 8002f0a:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8002f0e:	f000 faea 	bl	80034e6 <WrMulti>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L7CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 8002f20:	2303      	movs	r3, #3
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	23ff      	movs	r3, #255	; 0xff
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2104      	movs	r1, #4
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7fe f89d 	bl	8001070 <_vl53l7cx_poll_for_answer>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L7CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8002f44:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L7CX_UI_CMD_START,
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	f642 4104 	movw	r1, #11268	; 0x2c04
 8002f52:	f000 fadf 	bl	8003514 <RdMulti>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f000 fae5 	bl	8003542 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002f78:	2300      	movs	r3, #0
 8002f7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f7c:	e011      	b.n	8002fa2 <vl53l7cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8002f7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002f82:	1d1a      	adds	r2, r3, #4
 8002f84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	440b      	add	r3, r1
 8002f8c:	68f9      	ldr	r1, [r7, #12]
 8002f8e:	440a      	add	r2, r1
 8002f90:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8002f94:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002f96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002fa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fa6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002faa:	429a      	cmp	r2, r3
 8002fac:	dbe7      	blt.n	8002f7e <vl53l7cx_dci_read_data+0xd2>
		}
	}

	return status;
 8002fae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3728      	adds	r7, #40	; 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	08008b40 	.word	0x08008b40

08002fc0 <vl53l7cx_dci_write_data>:
uint8_t vl53l7cx_dci_write_data(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08c      	sub	sp, #48	; 0x30
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002fd8:	2300      	movs	r3, #0
 8002fda:	753b      	strb	r3, [r7, #20]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	757b      	strb	r3, [r7, #21]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	75bb      	strb	r3, [r7, #22]
 8002fe4:	230f      	movs	r3, #15
 8002fe6:	75fb      	strb	r3, [r7, #23]
 8002fe8:	2305      	movs	r3, #5
 8002fea:	763b      	strb	r3, [r7, #24]
 8002fec:	2301      	movs	r3, #1
 8002fee:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	121b      	asrs	r3, r3, #8
 8002ff6:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002ff8:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	3308      	adds	r3, #8
 8003000:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8003002:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L7CX_UI_CMD_END -
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 800300a:	3334      	adds	r3, #52	; 0x34
 800300c:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8003014:	d903      	bls.n	800301e <vl53l7cx_dci_write_data+0x5e>
           > (uint16_t)VL53L7CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L7CX_STATUS_ERROR;
 8003016:	23ff      	movs	r3, #255	; 0xff
 8003018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800301c:	e068      	b.n	80030f0 <vl53l7cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	b2db      	uxtb	r3, r3
 8003024:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	111b      	asrs	r3, r3, #4
 8003030:	b2db      	uxtb	r3, r3
 8003032:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	b2db      	uxtb	r3, r3
 800303c:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	4619      	mov	r1, r3
 8003042:	68b8      	ldr	r0, [r7, #8]
 8003044:	f000 fa7d 	bl	8003542 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	3b01      	subs	r3, #1
 800304c:	b29b      	uxth	r3, r3
 800304e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003050:	e012      	b.n	8003078 <vl53l7cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8003052:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	441a      	add	r2, r3
 800305a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800305e:	3304      	adds	r3, #4
 8003060:	7811      	ldrb	r1, [r2, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4413      	add	r3, r2
 8003066:	460a      	mov	r2, r1
 8003068:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 800306c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29b      	uxth	r3, r3
 8003076:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003078:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	dae8      	bge.n	8003052 <vl53l7cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	3304      	adds	r3, #4
 800308e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	461a      	mov	r2, r3
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	cb03      	ldmia	r3!, {r0, r1}
 800309e:	6010      	str	r0, [r2, #0]
 80030a0:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 80030a2:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80030aa:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 80030ac:	330c      	adds	r3, #12
 80030ae:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80030b0:	f000 fa19 	bl	80034e6 <WrMulti>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030bc:	4313      	orrs	r3, r2
 80030be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l7cx_poll_for_answer(p_dev, 4, 1,
 80030c2:	2303      	movs	r3, #3
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	23ff      	movs	r3, #255	; 0xff
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80030ce:	2201      	movs	r2, #1
 80030d0:	2104      	movs	r1, #4
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7fd ffcc 	bl	8001070 <_vl53l7cx_poll_for_answer>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L7CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	4619      	mov	r1, r3
 80030ea:	68b8      	ldr	r0, [r7, #8]
 80030ec:	f000 fa29 	bl	8003542 <SwapBuffer>
	}

	return status;
 80030f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3728      	adds	r7, #40	; 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <vl53l7cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L7CX_STATUS_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]

	status |= vl53l7cx_dci_read_data(p_dev, data, index, data_size);
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff fec9 	bl	8002eac <vl53l7cx_dci_read_data>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	4313      	orrs	r3, r2
 8003122:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8003124:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	4413      	add	r3, r2
 800312a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	4618      	mov	r0, r3
 8003130:	f004 ff7a 	bl	8008028 <memcpy>
	status |= vl53l7cx_dci_write_data(p_dev, data, index, data_size);
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7ff ff40 	bl	8002fc0 <vl53l7cx_dci_write_data>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	4313      	orrs	r3, r2
 8003148:	75fb      	strb	r3, [r7, #23]

	return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <vl53l7cx_set_detection_thresholds_enable>:
}

uint8_t vl53l7cx_set_detection_thresholds_enable(
		VL53L7CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af04      	add	r7, sp, #16
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L7CX_STATUS_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8003164:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003168:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d104      	bne.n	800317a <vl53l7cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8003170:	2301      	movs	r3, #1
 8003172:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8003174:	2304      	movs	r3, #4
 8003176:	73bb      	strb	r3, [r7, #14]
 8003178:	e003      	b.n	8003182 <vl53l7cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 800317a:	2300      	movs	r3, #0
 800317c:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 800317e:	230c      	movs	r3, #12
 8003180:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003188:	2300      	movs	r3, #0
 800318a:	9302      	str	r3, [sp, #8]
 800318c:	2304      	movs	r3, #4
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	f107 0308 	add.w	r3, r7, #8
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2308      	movs	r3, #8
 8003198:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ffad 	bl	80030fc <vl53l7cx_dci_replace_data>
 80031a2:	4603      	mov	r3, r0
 80031a4:	461a      	mov	r2, r3
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l7cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80031b2:	2311      	movs	r3, #17
 80031b4:	9302      	str	r3, [sp, #8]
 80031b6:	2301      	movs	r3, #1
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	f107 030e 	add.w	r3, r7, #14
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	2314      	movs	r3, #20
 80031c2:	f245 4288 	movw	r2, #21640	; 0x5488
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ff98 	bl	80030fc <vl53l7cx_dci_replace_data>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	73fb      	strb	r3, [r7, #15]
			VL53L7CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <vl53l7cx_set_detection_thresholds>:
}

uint8_t vl53l7cx_set_detection_thresholds(
		VL53L7CX_Configuration			*p_dev,
		VL53L7CX_DetectionThresholds	*p_thresholds)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L7CX_STATUS_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 80031ee:	4aa7      	ldr	r2, [pc, #668]	; (800348c <vl53l7cx_set_detection_thresholds+0x2ac>)
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031f8:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L7CX_NB_THRESHOLDS; i++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	75fb      	strb	r3, [r7, #23]
 8003200:	e120      	b.n	8003444 <vl53l7cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	7a1b      	ldrb	r3, [r3, #8]
 8003206:	3b01      	subs	r3, #1
 8003208:	2b12      	cmp	r3, #18
 800320a:	f200 8117 	bhi.w	800343c <vl53l7cx_set_detection_thresholds+0x25c>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <vl53l7cx_set_detection_thresholds+0x34>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	08003261 	.word	0x08003261
 8003218:	080032af 	.word	0x080032af
 800321c:	0800343d 	.word	0x0800343d
 8003220:	080032fd 	.word	0x080032fd
 8003224:	0800343d 	.word	0x0800343d
 8003228:	0800343d 	.word	0x0800343d
 800322c:	0800343d 	.word	0x0800343d
 8003230:	0800334b 	.word	0x0800334b
 8003234:	0800343d 	.word	0x0800343d
 8003238:	0800343d 	.word	0x0800343d
 800323c:	0800343d 	.word	0x0800343d
 8003240:	0800343d 	.word	0x0800343d
 8003244:	08003399 	.word	0x08003399
 8003248:	0800343d 	.word	0x0800343d
 800324c:	0800343d 	.word	0x0800343d
 8003250:	0800343d 	.word	0x0800343d
 8003254:	0800343d 	.word	0x0800343d
 8003258:	0800343d 	.word	0x0800343d
 800325c:	080033e7 	.word	0x080033e7
		{
			case VL53L7CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8003260:	7dfa      	ldrb	r2, [r7, #23]
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	461a      	mov	r2, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4413      	add	r3, r2
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	7dfa      	ldrb	r2, [r7, #23]
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	461a      	mov	r2, r3
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	4413      	add	r3, r2
 8003282:	008a      	lsls	r2, r1, #2
 8003284:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8003286:	7dfa      	ldrb	r2, [r7, #23]
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	461a      	mov	r2, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	4413      	add	r3, r2
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	7dfa      	ldrb	r2, [r7, #23]
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	461a      	mov	r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	008a      	lsls	r2, r1, #2
 80032aa:	605a      	str	r2, [r3, #4]
				break;
 80032ac:	e0c7      	b.n	800343e <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 80032ae:	7dfa      	ldrb	r2, [r7, #23]
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	461a      	mov	r2, r3
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	4413      	add	r3, r2
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	7dfa      	ldrb	r2, [r7, #23]
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	461a      	mov	r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	02ca      	lsls	r2, r1, #11
 80032d2:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80032d4:	7dfa      	ldrb	r2, [r7, #23]
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	461a      	mov	r2, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	7dfa      	ldrb	r2, [r7, #23]
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	461a      	mov	r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	4413      	add	r3, r2
 80032f6:	02ca      	lsls	r2, r1, #11
 80032f8:	605a      	str	r2, [r3, #4]
				break;
 80032fa:	e0a0      	b.n	800343e <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 80032fc:	7dfa      	ldrb	r2, [r7, #23]
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	461a      	mov	r2, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4413      	add	r3, r2
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	7dfa      	ldrb	r2, [r7, #23]
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	461a      	mov	r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	4413      	add	r3, r2
 800331e:	01ca      	lsls	r2, r1, #7
 8003320:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8003322:	7dfa      	ldrb	r2, [r7, #23]
 8003324:	4613      	mov	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	461a      	mov	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	4413      	add	r3, r2
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	7dfa      	ldrb	r2, [r7, #23]
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	461a      	mov	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4413      	add	r3, r2
 8003344:	01ca      	lsls	r2, r1, #7
 8003346:	605a      	str	r2, [r3, #4]
				break;
 8003348:	e079      	b.n	800343e <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 800334a:	7dfa      	ldrb	r2, [r7, #23]
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	461a      	mov	r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	4413      	add	r3, r2
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	7dfa      	ldrb	r2, [r7, #23]
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	461a      	mov	r2, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4413      	add	r3, r2
 800336c:	02ca      	lsls	r2, r1, #11
 800336e:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8003370:	7dfa      	ldrb	r2, [r7, #23]
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	461a      	mov	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4413      	add	r3, r2
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	7dfa      	ldrb	r2, [r7, #23]
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	461a      	mov	r2, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	4413      	add	r3, r2
 8003392:	02ca      	lsls	r2, r1, #11
 8003394:	605a      	str	r2, [r3, #4]
				break;
 8003396:	e052      	b.n	800343e <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 8003398:	7dfa      	ldrb	r2, [r7, #23]
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	461a      	mov	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	7dfa      	ldrb	r2, [r7, #23]
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	461a      	mov	r2, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	020a      	lsls	r2, r1, #8
 80033bc:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 80033be:	7dfa      	ldrb	r2, [r7, #23]
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	461a      	mov	r2, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	4413      	add	r3, r2
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	7dfa      	ldrb	r2, [r7, #23]
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	461a      	mov	r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	020a      	lsls	r2, r1, #8
 80033e2:	605a      	str	r2, [r3, #4]
				break;
 80033e4:	e02b      	b.n	800343e <vl53l7cx_set_detection_thresholds+0x25e>
			case VL53L7CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 80033e6:	7dfa      	ldrb	r2, [r7, #23]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	461a      	mov	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	7df9      	ldrb	r1, [r7, #23]
 80033fa:	460b      	mov	r3, r1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	440b      	add	r3, r1
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4619      	mov	r1, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4419      	add	r1, r3
 8003408:	4613      	mov	r3, r2
 800340a:	041b      	lsls	r3, r3, #16
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8003410:	7dfa      	ldrb	r2, [r7, #23]
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	461a      	mov	r2, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	4413      	add	r3, r2
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	7df9      	ldrb	r1, [r7, #23]
 8003424:	460b      	mov	r3, r1
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	440b      	add	r3, r1
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4619      	mov	r1, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	4419      	add	r1, r3
 8003432:	4613      	mov	r3, r2
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	604b      	str	r3, [r1, #4]
				break;
 800343a:	e000      	b.n	800343e <vl53l7cx_set_detection_thresholds+0x25e>
			default:
				break;
 800343c:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L7CX_NB_THRESHOLDS; i++)
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	3301      	adds	r3, #1
 8003442:	75fb      	strb	r3, [r7, #23]
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b3f      	cmp	r3, #63	; 0x3f
 8003448:	f67f aedb 	bls.w	8003202 <vl53l7cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 800344c:	f107 010c 	add.w	r1, r7, #12
 8003450:	2308      	movs	r3, #8
 8003452:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fdb2 	bl	8002fc0 <vl53l7cx_dci_write_data>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	7dbb      	ldrb	r3, [r7, #22]
 8003462:	4313      	orrs	r3, r2
 8003464:	75bb      	strb	r3, [r7, #22]
			VL53L7CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l7cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 8003466:	f44f 7340 	mov.w	r3, #768	; 0x300
 800346a:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 800346e:	6839      	ldr	r1, [r7, #0]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff fda5 	bl	8002fc0 <vl53l7cx_dci_write_data>
 8003476:	4603      	mov	r3, r0
 8003478:	461a      	mov	r2, r3
 800347a:	7dbb      	ldrb	r3, [r7, #22]
 800347c:	4313      	orrs	r3, r2
 800347e:	75bb      	strb	r3, [r7, #22]
			VL53L7CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L7CX_NB_THRESHOLDS
			*sizeof(VL53L7CX_DetectionThresholds)));

	return status;
 8003480:	7dbb      	ldrb	r3, [r7, #22]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	08008b4c 	.word	0x08008b4c

08003490 <RdByte>:

uint8_t RdByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	460b      	mov	r3, r1
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689c      	ldr	r4, [r3, #8]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8818      	ldrh	r0, [r3, #0]
 80034a6:	8979      	ldrh	r1, [r7, #10]
 80034a8:	2301      	movs	r3, #1
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	47a0      	blx	r4
 80034ae:	4603      	mov	r3, r0
 80034b0:	b2db      	uxtb	r3, r3
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd90      	pop	{r4, r7, pc}

080034ba <WrByte>:

uint8_t WrByte(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 80034ba:	b590      	push	{r4, r7, lr}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	807b      	strh	r3, [r7, #2]
 80034c6:	4613      	mov	r3, r2
 80034c8:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685c      	ldr	r4, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8818      	ldrh	r0, [r3, #0]
 80034d2:	1c7a      	adds	r2, r7, #1
 80034d4:	8879      	ldrh	r1, [r7, #2]
 80034d6:	2301      	movs	r3, #1
 80034d8:	47a0      	blx	r4
 80034da:	4603      	mov	r3, r0
 80034dc:	b2db      	uxtb	r3, r3
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}

080034e6 <WrMulti>:
uint8_t WrMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80034e6:	b590      	push	{r4, r7, lr}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	460b      	mov	r3, r1
 80034f4:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685c      	ldr	r4, [r3, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8818      	ldrh	r0, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	8979      	ldrh	r1, [r7, #10]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	47a0      	blx	r4
 8003508:	4603      	mov	r3, r0
 800350a:	b2db      	uxtb	r3, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	bd90      	pop	{r4, r7, pc}

08003514 <RdMulti>:
uint8_t RdMulti(
		VL53L7CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	460b      	mov	r3, r1
 8003522:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689c      	ldr	r4, [r3, #8]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8818      	ldrh	r0, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	8979      	ldrh	r1, [r7, #10]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	47a0      	blx	r4
 8003536:	4603      	mov	r3, r0
 8003538:	b2db      	uxtb	r3, r3
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	bd90      	pop	{r4, r7, pc}

08003542 <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e021      	b.n	8003598 <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4413      	add	r3, r2
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3301      	adds	r3, #1
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	440b      	add	r3, r1
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	041b      	lsls	r3, r3, #16
 800356a:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3302      	adds	r3, #2
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	440b      	add	r3, r1
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	3203      	adds	r2, #3
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	440a      	add	r2, r1
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	4313      	orrs	r3, r2
    tmp = (
 8003586:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4413      	add	r3, r2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3304      	adds	r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d3d9      	bcc.n	8003554 <SwapBuffer+0x12>
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <WaitMs>:

uint8_t WaitMs(
		VL53L7CX_Platform *p_platform,
		uint32_t TimeMs)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4798      	blx	r3
 80035be:	4603      	mov	r3, r0
 80035c0:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 80035c2:	bf00      	nop
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4798      	blx	r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	461a      	mov	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d8f5      	bhi.n	80035c4 <WaitMs+0x16>

  return 0;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <VL53L7CX_RegisterBusIO>:
  * @param pObj    vl53l7cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_RegisterBusIO(VL53L7CX_Object_t *pObj, VL53L7CX_IO_t *pIO)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <VL53L7CX_RegisterBusIO+0x16>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d103      	bne.n	8003600 <VL53L7CX_RegisterBusIO+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80035f8:	f06f 0301 	mvn.w	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e033      	b.n	8003668 <VL53L7CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	891a      	ldrh	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	615a      	str	r2, [r3, #20]

    /* fill vl53l7cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	891a      	ldrh	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <VL53L7CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4798      	blx	r3
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	e002      	b.n	8003668 <VL53L7CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L7CX_ERROR;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
 8003666:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003668:	68fb      	ldr	r3, [r7, #12]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <VL53L7CX_Init>:
  * @brief Initializes the vl53l7cx.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Init(VL53L7CX_Object_t *pObj)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <VL53L7CX_Init+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003680:	f06f 0301 	mvn.w	r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	e02e      	b.n	80036e6 <VL53L7CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <VL53L7CX_Init+0x28>
  {
    ret =  VL53L7CX_ERROR;
 8003692:	f04f 33ff 	mov.w	r3, #4294967295
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e025      	b.n	80036e6 <VL53L7CX_Init+0x74>
  }
  else if (vl53l7cx_init(&pObj->Dev) != VL53L7CX_STATUS_OK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3318      	adds	r3, #24
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe f890 	bl	80017c4 <vl53l7cx_init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <VL53L7CX_Init+0x40>
  {
    ret = VL53L7CX_ERROR;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e019      	b.n	80036e6 <VL53L7CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    pObj->IsBlocking = 0U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
    pObj->IsContinuous = 0U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
    pObj->IsAmbientEnabled = 0U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
    pObj->IsSignalEnabled = 0U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
    pObj->IsInitialized = 1U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    ret = VL53L7CX_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80036e6:	68fb      	ldr	r3, [r7, #12]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <VL53L7CX_DeInit>:
  * @brief Deinitializes the vl53l7cx.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_DeInit(VL53L7CX_Object_t *pObj)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <VL53L7CX_DeInit+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80036fe:	f06f 0301 	mvn.w	r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e018      	b.n	8003738 <VL53L7CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 800370c:	2b01      	cmp	r3, #1
 800370e:	d110      	bne.n	8003732 <VL53L7CX_DeInit+0x42>
  {
    /* De-initialize the vl53l7cx interface */
    if (pObj->IO.DeInit() != 0)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4798      	blx	r3
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <VL53L7CX_DeInit+0x34>
    {
      ret = VL53L7CX_ERROR;
 800371c:	f04f 33ff 	mov.w	r3, #4294967295
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e009      	b.n	8003738 <VL53L7CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L7CX_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 8003730:	e002      	b.n	8003738 <VL53L7CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L7CX_ERROR;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003738:	68fb      	ldr	r3, [r7, #12]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <VL53L7CX_ReadID>:
  * @param pObj    vl53l7cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ReadID(VL53L7CX_Object_t *pObj, uint32_t *pId)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L7CX_STATUS_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <VL53L7CX_ReadID+0x22>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <VL53L7CX_ReadID+0x2a>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003764:	f06f 0301 	mvn.w	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e045      	b.n	80037f8 <VL53L7CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3318      	adds	r3, #24
 8003770:	2200      	movs	r2, #0
 8003772:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fe9f 	bl	80034ba <WrByte>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	7afb      	ldrb	r3, [r7, #11]
 8003782:	4313      	orrs	r3, r2
 8003784:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3318      	adds	r3, #24
 800378a:	f107 020a 	add.w	r2, r7, #10
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe7d 	bl	8003490 <RdByte>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	7afb      	ldrb	r3, [r7, #11]
 800379c:	4313      	orrs	r3, r2
 800379e:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3318      	adds	r3, #24
 80037a4:	f107 0209 	add.w	r2, r7, #9
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fe70 	bl	8003490 <RdByte>
 80037b0:	4603      	mov	r3, r0
 80037b2:	461a      	mov	r2, r3
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3318      	adds	r3, #24
 80037be:	2202      	movs	r2, #2
 80037c0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fe78 	bl	80034ba <WrByte>
 80037ca:	4603      	mov	r3, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 80037d4:	7afb      	ldrb	r3, [r7, #11]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d108      	bne.n	80037ec <VL53L7CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 80037da:	7abb      	ldrb	r3, [r7, #10]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	7a7a      	ldrb	r2, [r7, #9]
 80037e0:	441a      	add	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	601a      	str	r2, [r3, #0]
      ret = VL53L7CX_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e005      	b.n	80037f8 <VL53L7CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
      ret = VL53L7CX_ERROR;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295
 80037f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80037f8:	68fb      	ldr	r3, [r7, #12]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <VL53L7CX_GetCapabilities>:
  * @param pObj    vl53l7cx context object.
  * @param pCap    Pointer to the vl53l7cx capabilities.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetCapabilities(VL53L7CX_Object_t *pObj, VL53L7CX_Capabilities_t *pCap)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <VL53L7CX_GetCapabilities+0x16>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <VL53L7CX_GetCapabilities+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003818:	f06f 0301 	mvn.w	r3, #1
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	e00d      	b.n	800383c <VL53L7CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L7CX_RESOLUTION_8X8;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L7CX_TARGET_PER_ZONE;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	60da      	str	r2, [r3, #12]

    ret = VL53L7CX_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800383c:	68fb      	ldr	r3, [r7, #12]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <VL53L7CX_ConfigProfile>:
  * @param pObj    vl53l7cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigProfile(VL53L7CX_Object_t *pObj, VL53L7CX_ProfileConfig_t *pConfig)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L7CX_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01b      	beq.n	8003898 <VL53L7CX_ConfigProfile+0x4c>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d018      	beq.n	8003898 <VL53L7CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L7CX_INVALID_PARAM;
  }

  switch (profile)
 8003878:	7c7b      	ldrb	r3, [r7, #17]
 800387a:	3b01      	subs	r3, #1
 800387c:	2b03      	cmp	r3, #3
 800387e:	d822      	bhi.n	80038c6 <VL53L7CX_ConfigProfile+0x7a>
 8003880:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <VL53L7CX_ConfigProfile+0x3c>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	0800389f 	.word	0x0800389f
 800388c:	080038a9 	.word	0x080038a9
 8003890:	080038b3 	.word	0x080038b3
 8003894:	080038bd 	.word	0x080038bd
    return VL53L7CX_INVALID_PARAM;
 8003898:	f06f 0301 	mvn.w	r3, #1
 800389c:	e070      	b.n	8003980 <VL53L7CX_ConfigProfile+0x134>
  {
  case VL53L7CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L7CX_RESOLUTION_4X4;
 800389e:	2310      	movs	r3, #16
 80038a0:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_CONTINUOUS;
 80038a2:	2301      	movs	r3, #1
 80038a4:	74bb      	strb	r3, [r7, #18]
    break;
 80038a6:	e016      	b.n	80038d6 <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L7CX_RESOLUTION_4X4;
 80038a8:	2310      	movs	r3, #16
 80038aa:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_AUTONOMOUS;
 80038ac:	2303      	movs	r3, #3
 80038ae:	74bb      	strb	r3, [r7, #18]
    break;
 80038b0:	e011      	b.n	80038d6 <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L7CX_RESOLUTION_8X8;
 80038b2:	2340      	movs	r3, #64	; 0x40
 80038b4:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_CONTINUOUS;
 80038b6:	2301      	movs	r3, #1
 80038b8:	74bb      	strb	r3, [r7, #18]
    break;
 80038ba:	e00c      	b.n	80038d6 <VL53L7CX_ConfigProfile+0x8a>
  case VL53L7CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L7CX_RESOLUTION_8X8;
 80038bc:	2340      	movs	r3, #64	; 0x40
 80038be:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L7CX_RANGING_MODE_AUTONOMOUS;
 80038c0:	2303      	movs	r3, #3
 80038c2:	74bb      	strb	r3, [r7, #18]
    break;
 80038c4:	e007      	b.n	80038d6 <VL53L7CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 80038c6:	2300      	movs	r3, #0
 80038c8:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 80038ca:	2300      	movs	r3, #0
 80038cc:	74bb      	strb	r3, [r7, #18]
    ret = VL53L7CX_INVALID_PARAM;
 80038ce:	f06f 0301 	mvn.w	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
    break;
 80038d4:	bf00      	nop
  }

  if (ret != VL53L7CX_OK)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <VL53L7CX_ConfigProfile+0x94>
  {
    return ret;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	e04f      	b.n	8003980 <VL53L7CX_ConfigProfile+0x134>
  }
  else if (vl53l7cx_set_resolution(&pObj->Dev, resolution) != VL53L7CX_STATUS_OK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3318      	adds	r3, #24
 80038e4:	7cfa      	ldrb	r2, [r7, #19]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff f95e 	bl	8002baa <vl53l7cx_set_resolution>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <VL53L7CX_ConfigProfile+0xb0>
  {
    ret = VL53L7CX_ERROR;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e040      	b.n	800397e <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L7CX_STATUS_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3318      	adds	r3, #24
 8003900:	7cba      	ldrb	r2, [r7, #18]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fa7a 	bl	8002dfe <vl53l7cx_set_ranging_mode>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <VL53L7CX_ConfigProfile+0xcc>
  {
    ret = VL53L7CX_ERROR;
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e032      	b.n	800397e <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L7CX_STATUS_OK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3318      	adds	r3, #24
 800391c:	68f9      	ldr	r1, [r7, #12]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fa38 	bl	8002d94 <vl53l7cx_set_integration_time_ms>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <VL53L7CX_ConfigProfile+0xe6>
  {
    ret = VL53L7CX_ERROR;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	e025      	b.n	800397e <VL53L7CX_ConfigProfile+0x132>
  }
  else if (vl53l7cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L7CX_STATUS_OK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3318      	adds	r3, #24
 8003936:	7afa      	ldrb	r2, [r7, #11]
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fa09 	bl	8002d52 <vl53l7cx_set_ranging_frequency_hz>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <VL53L7CX_ConfigProfile+0x102>
  {
    ret = VL53L7CX_ERROR;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e017      	b.n	800397e <VL53L7CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955

    ret = VL53L7CX_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800397e:	697b      	ldr	r3, [r7, #20]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <VL53L7CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigROI(VL53L7CX_Object_t *pObj, VL53L7CX_ROIConfig_t *pROIConfig)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L7CX_NOT_IMPLEMENTED;
 8003992:	f06f 0303 	mvn.w	r3, #3
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <VL53L7CX_ConfigIT>:
  * @param pObj    vl53l7cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_ConfigIT(VL53L7CX_Object_t *pObj, VL53L7CX_ITConfig_t *pITConfig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	72bb      	strb	r3, [r7, #10]
  static VL53L7CX_DetectionThresholds thresholds[VL53L7CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <VL53L7CX_ConfigIT+0x1a>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <VL53L7CX_ConfigIT+0x22>
  {
    ret = VL53L7CX_INVALID_PARAM;
 80039be:	f06f 0301 	mvn.w	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	e09f      	b.n	8003b06 <VL53L7CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L7CX_IT_DEFAULT)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2bff      	cmp	r3, #255	; 0xff
 80039cc:	d113      	bne.n	80039f6 <VL53L7CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l7cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3318      	adds	r3, #24
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fbbd 	bl	8003154 <vl53l7cx_set_detection_thresholds_enable>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	7abb      	ldrb	r3, [r7, #10]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L7CX_ERROR : VL53L7CX_OK;
 80039e4:	7abb      	ldrb	r3, [r7, #10]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <VL53L7CX_ConfigIT+0x4c>
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	e000      	b.n	80039f2 <VL53L7CX_ConfigIT+0x4e>
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	e087      	b.n	8003b06 <VL53L7CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l7cx_get_resolution(&pObj->Dev, &res);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3318      	adds	r3, #24
 80039fa:	f107 0209 	add.w	r2, r7, #9
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff f8ad 	bl	8002b60 <vl53l7cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	72fb      	strb	r3, [r7, #11]
 8003a0a:	e044      	b.n	8003a96 <VL53L7CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8003a0c:	7afa      	ldrb	r2, [r7, #11]
 8003a0e:	4940      	ldr	r1, [pc, #256]	; (8003b10 <VL53L7CX_ConfigIT+0x16c>)
 8003a10:	4613      	mov	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	330a      	adds	r3, #10
 8003a1c:	7afa      	ldrb	r2, [r7, #11]
 8003a1e:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L7CX_DISTANCE_MM;
 8003a20:	7afa      	ldrb	r2, [r7, #11]
 8003a22:	493b      	ldr	r1, [pc, #236]	; (8003b10 <VL53L7CX_ConfigIT+0x16c>)
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3308      	adds	r3, #8
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	7afa      	ldrb	r2, [r7, #11]
 8003a3a:	b2d8      	uxtb	r0, r3
 8003a3c:	4934      	ldr	r1, [pc, #208]	; (8003b10 <VL53L7CX_ConfigIT+0x16c>)
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	3309      	adds	r3, #9
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L7CX_OPERATION_NONE;
 8003a4e:	7afa      	ldrb	r2, [r7, #11]
 8003a50:	492f      	ldr	r1, [pc, #188]	; (8003b10 <VL53L7CX_ConfigIT+0x16c>)
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	330b      	adds	r3, #11
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	7afa      	ldrb	r2, [r7, #11]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	4929      	ldr	r1, [pc, #164]	; (8003b10 <VL53L7CX_ConfigIT+0x16c>)
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	7afa      	ldrb	r2, [r7, #11]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	4923      	ldr	r1, [pc, #140]	; (8003b10 <VL53L7CX_ConfigIT+0x16c>)
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8003a90:	7afb      	ldrb	r3, [r7, #11]
 8003a92:	3301      	adds	r3, #1
 8003a94:	72fb      	strb	r3, [r7, #11]
 8003a96:	7a7b      	ldrb	r3, [r7, #9]
 8003a98:	7afa      	ldrb	r2, [r7, #11]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d3b6      	bcc.n	8003a0c <VL53L7CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L7CX_LAST_THRESHOLD;
 8003a9e:	7afa      	ldrb	r2, [r7, #11]
 8003aa0:	491b      	ldr	r1, [pc, #108]	; (8003b10 <VL53L7CX_ConfigIT+0x16c>)
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	330a      	adds	r3, #10
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	7afa      	ldrb	r2, [r7, #11]
 8003ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ab6:	b2d8      	uxtb	r0, r3
 8003ab8:	4915      	ldr	r1, [pc, #84]	; (8003b10 <VL53L7CX_ConfigIT+0x16c>)
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	330a      	adds	r3, #10
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l7cx_set_detection_thresholds(&pObj->Dev, thresholds);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3318      	adds	r3, #24
 8003ace:	4910      	ldr	r1, [pc, #64]	; (8003b10 <VL53L7CX_ConfigIT+0x16c>)
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fb85 	bl	80031e0 <vl53l7cx_set_detection_thresholds>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	461a      	mov	r2, r3
 8003ada:	7abb      	ldrb	r3, [r7, #10]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l7cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3318      	adds	r3, #24
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fb34 	bl	8003154 <vl53l7cx_set_detection_thresholds_enable>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461a      	mov	r2, r3
 8003af0:	7abb      	ldrb	r3, [r7, #10]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L7CX_ERROR : VL53L7CX_OK;
 8003af6:	7abb      	ldrb	r3, [r7, #10]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <VL53L7CX_ConfigIT+0x15e>
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
 8003b00:	e000      	b.n	8003b04 <VL53L7CX_ConfigIT+0x160>
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20001d44 	.word	0x20001d44

08003b14 <VL53L7CX_GetDistance>:
  * @param pObj    vl53l7cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetDistance(VL53L7CX_Object_t *pObj, VL53L7CX_Result_t *pResult)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = VL53L7CX_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
  if ((pObj == NULL) || (pResult == NULL))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <VL53L7CX_GetDistance+0x1a>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <VL53L7CX_GetDistance+0x22>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003b2e:	f06f 0301 	mvn.w	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e007      	b.n	8003b46 <VL53L7CX_GetDistance+0x32>
  }
  else if (pObj->IsRanging == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <VL53L7CX_GetDistance+0x32>
  {
    ret = VL53L7CX_ERROR;
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295
 8003b44:	60fb      	str	r3, [r7, #12]
  }
  if (ret == VL53L7CX_OK)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d110      	bne.n	8003b6e <VL53L7CX_GetDistance+0x5a>
  {
    if (pObj->IsBlocking == 1U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3952 	ldrb.w	r3, [r3, #2386]	; 0x952
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d106      	bne.n	8003b64 <VL53L7CX_GetDistance+0x50>
    {
      ret = vl53l7cx_poll_for_measurement(pObj, V53L7CX_POLL_TIMEOUT);
 8003b56:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f93a 	bl	8003dd4 <vl53l7cx_poll_for_measurement>
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	e004      	b.n	8003b6e <VL53L7CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l7cx_poll_for_measurement(pObj, 0U);
 8003b64:	2100      	movs	r1, #0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f934 	bl	8003dd4 <vl53l7cx_poll_for_measurement>
 8003b6c:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L7CX_OK)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <VL53L7CX_GetDistance+0x6a>
  {
    ret = vl53l7cx_get_result(pObj, pResult);
 8003b74:	6839      	ldr	r1, [r7, #0]
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f960 	bl	8003e3c <vl53l7cx_get_result>
 8003b7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <VL53L7CX_Start>:
  * @param pObj    vl53l7cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Start(VL53L7CX_Object_t *pObj, uint32_t Mode)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <VL53L7CX_Start+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003b98:	f06f 0301 	mvn.w	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e04c      	b.n	8003c3a <VL53L7CX_Start+0xb2>
  }
  else if (vl53l7cx_start_ranging(&pObj->Dev) == VL53L7CX_STATUS_OK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3318      	adds	r3, #24
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fb71 	bl	800228c <vl53l7cx_start_ranging>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d141      	bne.n	8003c34 <VL53L7CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    ret = VL53L7CX_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d82f      	bhi.n	8003c24 <VL53L7CX_Start+0x9c>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <VL53L7CX_Start+0x44>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003bef 	.word	0x08003bef
 8003bd4:	08003c01 	.word	0x08003c01
 8003bd8:	08003c13 	.word	0x08003c13
    {
      case VL53L7CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 1U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 8003bec:	e025      	b.n	8003c3a <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 1U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 8003bfe:	e01c      	b.n	8003c3a <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 0U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 8003c10:	e013      	b.n	8003c3a <VL53L7CX_Start+0xb2>

      case VL53L7CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 0U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 8003c22:	e00a      	b.n	8003c3a <VL53L7CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
        ret = VL53L7CX_INVALID_PARAM;
 8003c2c:	f06f 0301 	mvn.w	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
        break;
 8003c32:	e002      	b.n	8003c3a <VL53L7CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L7CX_ERROR;
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <VL53L7CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l7cx context object.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_Stop(VL53L7CX_Object_t *pObj)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <VL53L7CX_Stop+0x16>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003c52:	f06f 0301 	mvn.w	r3, #1
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e01a      	b.n	8003c90 <VL53L7CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d103      	bne.n	8003c6c <VL53L7CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L7CX_ERROR;
 8003c64:	f04f 33ff 	mov.w	r3, #4294967295
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e011      	b.n	8003c90 <VL53L7CX_Stop+0x4c>
  }
  else if (vl53l7cx_stop_ranging(&pObj->Dev) == VL53L7CX_STATUS_OK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3318      	adds	r3, #24
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe fc7f 	bl	8002574 <vl53l7cx_stop_ranging>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <VL53L7CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    ret = VL53L7CX_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	e002      	b.n	8003c90 <VL53L7CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L7CX_ERROR;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c90:	68fb      	ldr	r3, [r7, #12]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <VL53L7CX_SetAddress>:
  * @param pObj    vl53l7cx context object.
  * @param Address     New I2C address.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_SetAddress(VL53L7CX_Object_t *pObj, uint32_t Address)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <VL53L7CX_SetAddress+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003caa:	f06f 0301 	mvn.w	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e016      	b.n	8003ce0 <VL53L7CX_SetAddress+0x46>
  }
  else if (vl53l7cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L7CX_STATUS_OK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3318      	adds	r3, #24
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe f9ec 	bl	800209c <vl53l7cx_set_i2c_address>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <VL53L7CX_SetAddress+0x38>
  {
    ret = VL53L7CX_ERROR;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e006      	b.n	8003ce0 <VL53L7CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	811a      	strh	r2, [r3, #8]
    ret = VL53L7CX_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <VL53L7CX_GetAddress>:
  * @param pObj    vl53l7cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetAddress(VL53L7CX_Object_t *pObj, uint32_t *pAddress)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <VL53L7CX_GetAddress+0x16>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <VL53L7CX_GetAddress+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003d00:	f06f 0301 	mvn.w	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e006      	b.n	8003d16 <VL53L7CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	891b      	ldrh	r3, [r3, #8]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <VL53L7CX_SetPowerMode>:
  * @param pObj    vl53l7cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_SetPowerMode(VL53L7CX_Object_t *pObj, uint32_t PowerMode)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <VL53L7CX_SetPowerMode+0x18>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003d34:	f06f 0301 	mvn.w	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	e01a      	b.n	8003d72 <VL53L7CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L7CX_POWER_MODE_SLEEP) &&
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <VL53L7CX_SetPowerMode+0x2c>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d003      	beq.n	8003d50 <VL53L7CX_SetPowerMode+0x2c>
           (PowerMode != VL53L7CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003d48:	f06f 0301 	mvn.w	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e010      	b.n	8003d72 <VL53L7CX_SetPowerMode+0x4e>
  }
  else if (vl53l7cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L7CX_STATUS_OK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3318      	adds	r3, #24
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fa17 	bl	800218e <vl53l7cx_set_power_mode>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <VL53L7CX_SetPowerMode+0x4a>
  {
    ret = VL53L7CX_ERROR;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e001      	b.n	8003d72 <VL53L7CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L7CX_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d72:	68fb      	ldr	r3, [r7, #12]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <VL53L7CX_GetPowerMode>:
  * @param pObj    vl53l7cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L7CX status
  */
int32_t VL53L7CX_GetPowerMode(VL53L7CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <VL53L7CX_GetPowerMode+0x16>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <VL53L7CX_GetPowerMode+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003d92:	f06f 0301 	mvn.w	r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	e017      	b.n	8003dca <VL53L7CX_GetPowerMode+0x4e>
  }
  else if (vl53l7cx_get_power_mode(&pObj->Dev, &powermode) != VL53L7CX_STATUS_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3318      	adds	r3, #24
 8003d9e:	f107 020b 	add.w	r2, r7, #11
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe f9af 	bl	8002108 <vl53l7cx_get_power_mode>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d006      	beq.n	8003dbe <VL53L7CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_ERROR;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e005      	b.n	8003dca <VL53L7CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 8003dbe:	7afb      	ldrb	r3, [r7, #11]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	601a      	str	r2, [r3, #0]
    ret = VL53L7CX_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <vl53l7cx_poll_for_measurement>:

/** @defgroup VL53L7CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l7cx_poll_for_measurement(VL53L7CX_Object_t *pObj, uint32_t Timeout)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d103      	bne.n	8003df0 <vl53l7cx_poll_for_measurement+0x1c>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003de8:	f06f 0301 	mvn.w	r3, #1
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e01f      	b.n	8003e30 <vl53l7cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L7CX_TIMEOUT;
 8003df0:	f06f 0302 	mvn.w	r3, #2
 8003df4:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4798      	blx	r3
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l7cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3318      	adds	r3, #24
 8003e04:	f107 020f 	add.w	r2, r7, #15
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fc82 	bl	8002714 <vl53l7cx_check_data_ready>

      if (NewDataReady == 1U)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d102      	bne.n	8003e1c <vl53l7cx_poll_for_measurement+0x48>
      {
        ret = VL53L7CX_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
        break;
 8003e1a:	e009      	b.n	8003e30 <vl53l7cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	4798      	blx	r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	461a      	mov	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d8e7      	bhi.n	8003e00 <vl53l7cx_poll_for_measurement+0x2c>

  }

  return ret;
 8003e30:	697b      	ldr	r3, [r7, #20]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <vl53l7cx_get_result>:

static int32_t vl53l7cx_get_result(VL53L7CX_Object_t *pObj, VL53L7CX_Result_t *pResult)
{
 8003e3c:	b590      	push	{r4, r7, lr}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L7CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <vl53l7cx_get_result+0x16>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <vl53l7cx_get_result+0x1e>
  {
    ret = VL53L7CX_INVALID_PARAM;
 8003e52:	f06f 0301 	mvn.w	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e0cf      	b.n	8003ffa <vl53l7cx_get_result+0x1be>
  }
  else if (vl53l7cx_get_resolution(&pObj->Dev, &resolution) != VL53L7CX_STATUS_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3318      	adds	r3, #24
 8003e5e:	f107 0208 	add.w	r2, r7, #8
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fe7b 	bl	8002b60 <vl53l7cx_get_resolution>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <vl53l7cx_get_result+0x3c>
  {
    ret = VL53L7CX_ERROR;
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e0c0      	b.n	8003ffa <vl53l7cx_get_result+0x1be>
  }
  else if (vl53l7cx_get_ranging_data(&pObj->Dev, &data) != VL53L7CX_STATUS_OK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	4961      	ldr	r1, [pc, #388]	; (8004004 <vl53l7cx_get_result+0x1c8>)
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe fc98 	bl	80027b4 <vl53l7cx_get_ranging_data>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <vl53l7cx_get_result+0x56>
  {
    ret = VL53L7CX_ERROR;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e0b3      	b.n	8003ffa <vl53l7cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8003e92:	7a3b      	ldrb	r3, [r7, #8]
 8003e94:	461a      	mov	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	72fb      	strb	r3, [r7, #11]
 8003e9e:	e0a5      	b.n	8003fec <vl53l7cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8003ea0:	7afb      	ldrb	r3, [r7, #11]
 8003ea2:	7afa      	ldrb	r2, [r7, #11]
 8003ea4:	4957      	ldr	r1, [pc, #348]	; (8004004 <vl53l7cx_get_result+0x1c8>)
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3304      	adds	r3, #4
 8003eba:	4602      	mov	r2, r0
 8003ebc:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	72bb      	strb	r3, [r7, #10]
 8003ec2:	e087      	b.n	8003fd4 <vl53l7cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003ec4:	7afa      	ldrb	r2, [r7, #11]
 8003ec6:	7abb      	ldrb	r3, [r7, #10]
 8003ec8:	4413      	add	r3, r2
 8003eca:	4a4e      	ldr	r2, [pc, #312]	; (8004004 <vl53l7cx_get_result+0x1c8>)
 8003ecc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ed8:	7afa      	ldrb	r2, [r7, #11]
 8003eda:	7ab8      	ldrb	r0, [r7, #10]
 8003edc:	461c      	mov	r4, r3
 8003ede:	6839      	ldr	r1, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	4403      	add	r3, r0
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d116      	bne.n	8003f26 <vl53l7cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8003ef8:	7afb      	ldrb	r3, [r7, #11]
 8003efa:	4a42      	ldr	r2, [pc, #264]	; (8004004 <vl53l7cx_get_result+0x1c8>)
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	7afa      	ldrb	r2, [r7, #11]
 8003f04:	7ab8      	ldrb	r0, [r7, #10]
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	6839      	ldr	r1, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	4403      	add	r3, r0
 8003f18:	3302      	adds	r3, #2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3308      	adds	r3, #8
 8003f20:	edc3 7a00 	vstr	s15, [r3]
 8003f24:	e00d      	b.n	8003f42 <vl53l7cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8003f26:	7afa      	ldrb	r2, [r7, #11]
 8003f28:	7ab8      	ldrb	r0, [r7, #10]
 8003f2a:	6839      	ldr	r1, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	4403      	add	r3, r0
 8003f34:	3302      	adds	r3, #2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3955 	ldrb.w	r3, [r3, #2389]	; 0x955
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d119      	bne.n	8003f80 <vl53l7cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003f4c:	7afa      	ldrb	r2, [r7, #11]
 8003f4e:	7abb      	ldrb	r3, [r7, #10]
 8003f50:	4413      	add	r3, r2
 8003f52:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <vl53l7cx_get_result+0x1c8>)
 8003f54:	3350      	adds	r3, #80	; 0x50
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 8003f5c:	7afa      	ldrb	r2, [r7, #11]
 8003f5e:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	4403      	add	r3, r0
 8003f72:	3304      	adds	r3, #4
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	3304      	adds	r3, #4
 8003f7a:	edc3 7a00 	vstr	s15, [r3]
 8003f7e:	e00d      	b.n	8003f9c <vl53l7cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8003f80:	7afa      	ldrb	r2, [r7, #11]
 8003f82:	7ab8      	ldrb	r0, [r7, #10]
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4403      	add	r3, r0
 8003f8e:	3304      	adds	r3, #4
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	3304      	adds	r3, #4
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L7CX_NB_TARGET_PER_ZONE * i) + j];
 8003f9c:	7afa      	ldrb	r2, [r7, #11]
 8003f9e:	7abb      	ldrb	r3, [r7, #10]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	4a18      	ldr	r2, [pc, #96]	; (8004004 <vl53l7cx_get_result+0x1c8>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8003faa:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l7cx_map_target_status(target_status);
 8003fac:	7a7b      	ldrb	r3, [r7, #9]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f82a 	bl	8004008 <vl53l7cx_map_target_status>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	7afa      	ldrb	r2, [r7, #11]
 8003fb8:	7ab8      	ldrb	r0, [r7, #10]
 8003fba:	461c      	mov	r4, r3
 8003fbc:	6839      	ldr	r1, [r7, #0]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4403      	add	r3, r0
 8003fc6:	3302      	adds	r3, #2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 8003fce:	7abb      	ldrb	r3, [r7, #10]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	72bb      	strb	r3, [r7, #10]
 8003fd4:	7afb      	ldrb	r3, [r7, #11]
 8003fd6:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <vl53l7cx_get_result+0x1c8>)
 8003fd8:	4413      	add	r3, r2
 8003fda:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003fde:	7aba      	ldrb	r2, [r7, #10]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	f4ff af6f 	bcc.w	8003ec4 <vl53l7cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	72fb      	strb	r3, [r7, #11]
 8003fec:	7a3b      	ldrb	r3, [r7, #8]
 8003fee:	7afa      	ldrb	r2, [r7, #11]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	f4ff af55 	bcc.w	8003ea0 <vl53l7cx_get_result+0x64>
      }
    }

    ret = VL53L7CX_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bd90      	pop	{r4, r7, pc}
 8004004:	20002044 	.word	0x20002044

08004008 <vl53l7cx_map_target_status>:

static uint8_t vl53l7cx_map_target_status(uint8_t status)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	2b05      	cmp	r3, #5
 8004016:	d002      	beq.n	800401e <vl53l7cx_map_target_status+0x16>
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	2b09      	cmp	r3, #9
 800401c:	d102      	bne.n	8004024 <vl53l7cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]
 8004022:	e007      	b.n	8004034 <vl53l7cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d102      	bne.n	8004030 <vl53l7cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800402a:	23ff      	movs	r3, #255	; 0xff
 800402c:	73fb      	strb	r3, [r7, #15]
 800402e:	e001      	b.n	8004034 <vl53l7cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	460a      	mov	r2, r1
 800404e:	71fb      	strb	r3, [r7, #7]
 8004050:	4613      	mov	r3, r2
 8004052:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <BSP_PB_Init+0x94>)
 800405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004060:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8004062:	79bb      	ldrb	r3, [r7, #6]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d132      	bne.n	80040ce <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <BSP_PB_Init+0x98>)
 800406e:	441a      	add	r2, r3
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	491b      	ldr	r1, [pc, #108]	; (80040e0 <BSP_PB_Init+0x9c>)
 8004074:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f000 fb36 	bl	80046ec <HAL_EXTI_GetHandle>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004086:	f06f 0303 	mvn.w	r3, #3
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e01f      	b.n	80040ce <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4a12      	ldr	r2, [pc, #72]	; (80040dc <BSP_PB_Init+0x98>)
 8004094:	1898      	adds	r0, r3, r2
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <BSP_PB_Init+0xa0>)
 800409a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409e:	461a      	mov	r2, r3
 80040a0:	2100      	movs	r1, #0
 80040a2:	f000 fb06 	bl	80046b2 <HAL_EXTI_RegisterCallback>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80040ac:	f06f 0303 	mvn.w	r3, #3
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e00c      	b.n	80040ce <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80040b4:	2028      	movs	r0, #40	; 0x28
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	4a0b      	ldr	r2, [pc, #44]	; (80040e8 <BSP_PB_Init+0xa4>)
 80040ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040be:	2200      	movs	r2, #0
 80040c0:	4619      	mov	r1, r3
 80040c2:	f000 fac2 	bl	800464a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80040c6:	2328      	movs	r3, #40	; 0x28
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fad8 	bl	800467e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80040ce:	68fb      	ldr	r3, [r7, #12]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	0801e50c 	.word	0x0801e50c
 80040dc:	2000003c 	.word	0x2000003c
 80040e0:	0801e510 	.word	0x0801e510
 80040e4:	0801e514 	.word	0x0801e514
 80040e8:	0801e518 	.word	0x0801e518

080040ec <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80040f0:	2000      	movs	r0, #0
 80040f2:	f003 fcfd 	bl	8007af0 <BSP_PB_Callback>
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004102:	4b19      	ldr	r3, [pc, #100]	; (8004168 <BUTTON_USER_GPIO_Init+0x6c>)
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	4a18      	ldr	r2, [pc, #96]	; (8004168 <BUTTON_USER_GPIO_Init+0x6c>)
 8004108:	f043 0304 	orr.w	r3, r3, #4
 800410c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800410e:	4b16      	ldr	r3, [pc, #88]	; (8004168 <BUTTON_USER_GPIO_Init+0x6c>)
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411a:	f107 030c 	add.w	r3, r7, #12
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	605a      	str	r2, [r3, #4]
 8004124:	609a      	str	r2, [r3, #8]
 8004126:	60da      	str	r2, [r3, #12]
 8004128:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800412a:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <BUTTON_USER_GPIO_Init+0x6c>)
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <BUTTON_USER_GPIO_Init+0x6c>)
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <BUTTON_USER_GPIO_Init+0x6c>)
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	607b      	str	r3, [r7, #4]
 8004140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8004142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004148:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800414c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8004152:	f107 030c 	add.w	r3, r7, #12
 8004156:	4619      	mov	r1, r3
 8004158:	4804      	ldr	r0, [pc, #16]	; (800416c <BUTTON_USER_GPIO_Init+0x70>)
 800415a:	f000 fadb 	bl	8004714 <HAL_GPIO_Init>

}
 800415e:	bf00      	nop
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	48000800 	.word	0x48000800

08004170 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d903      	bls.n	800418c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004184:	f06f 0301 	mvn.w	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e025      	b.n	80041d8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	79fa      	ldrb	r2, [r7, #7]
 8004190:	4914      	ldr	r1, [pc, #80]	; (80041e4 <BSP_COM_Init+0x74>)
 8004192:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004196:	4814      	ldr	r0, [pc, #80]	; (80041e8 <BSP_COM_Init+0x78>)
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	4403      	add	r3, r0
 80041a2:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80041a4:	79fa      	ldrb	r2, [r7, #7]
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4413      	add	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <BSP_COM_Init+0x78>)
 80041b0:	4413      	add	r3, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f888 	bl	80042c8 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80041b8:	79fa      	ldrb	r2, [r7, #7]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	4a09      	ldr	r2, [pc, #36]	; (80041e8 <BSP_COM_Init+0x78>)
 80041c4:	4413      	add	r3, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f810 	bl	80041ec <MX_USART2_UART_Init>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80041d2:	f06f 0303 	mvn.w	r3, #3
 80041d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000044 	.word	0x20000044
 80041e8:	20002414 	.word	0x20002414

080041ec <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a24      	ldr	r2, [pc, #144]	; (800428c <MX_USART2_UART_Init+0xa0>)
 80041fc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004204:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	220c      	movs	r2, #12
 800421c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f002 fb8b 	bl	8006958 <HAL_UART_Init>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_USART2_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800424c:	2100      	movs	r1, #0
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f003 fa30 	bl	80076b4 <HAL_UARTEx_SetTxFifoThreshold>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_USART2_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800425e:	2100      	movs	r1, #0
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f003 fa65 	bl	8007730 <HAL_UARTEx_SetRxFifoThreshold>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_USART2_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f003 f9e6 	bl	8007642 <HAL_UARTEx_DisableFifoMode>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_USART2_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40004400 	.word	0x40004400

08004290 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <__io_putchar+0x30>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <__io_putchar+0x34>)
 80042a8:	1898      	adds	r0, r3, r2
 80042aa:	1d39      	adds	r1, r7, #4
 80042ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042b0:	2201      	movs	r2, #1
 80042b2:	f002 fbab 	bl	8006a0c <HAL_UART_Transmit>
  return ch;
 80042b6:	687b      	ldr	r3, [r7, #4]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	200024a4 	.word	0x200024a4
 80042c4:	20002414 	.word	0x20002414

080042c8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b09e      	sub	sp, #120	; 0x78
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042d0:	f107 0310 	add.w	r3, r7, #16
 80042d4:	2254      	movs	r2, #84	; 0x54
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f003 fe2b 	bl	8007f34 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80042de:	2302      	movs	r3, #2
 80042e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80042e6:	f107 0310 	add.w	r3, r7, #16
 80042ea:	4618      	mov	r0, r3
 80042ec:	f002 f8e6 	bl	80064bc <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80042f0:	4b1e      	ldr	r3, [pc, #120]	; (800436c <USART2_MspInit+0xa4>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	4a1d      	ldr	r2, [pc, #116]	; (800436c <USART2_MspInit+0xa4>)
 80042f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fa:	6593      	str	r3, [r2, #88]	; 0x58
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <USART2_MspInit+0xa4>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004308:	4b18      	ldr	r3, [pc, #96]	; (800436c <USART2_MspInit+0xa4>)
 800430a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430c:	4a17      	ldr	r2, [pc, #92]	; (800436c <USART2_MspInit+0xa4>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004314:	4b15      	ldr	r3, [pc, #84]	; (800436c <USART2_MspInit+0xa4>)
 8004316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8004320:	2304      	movs	r3, #4
 8004322:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004324:	2302      	movs	r3, #2
 8004326:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800432c:	2300      	movs	r3, #0
 800432e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8004330:	2307      	movs	r3, #7
 8004332:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8004334:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004338:	4619      	mov	r1, r3
 800433a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800433e:	f000 f9e9 	bl	8004714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8004342:	2308      	movs	r3, #8
 8004344:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004346:	2302      	movs	r3, #2
 8004348:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	2300      	movs	r3, #0
 800434c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434e:	2300      	movs	r3, #0
 8004350:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8004352:	2307      	movs	r3, #7
 8004354:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8004356:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800435a:	4619      	mov	r1, r3
 800435c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004360:	f000 f9d8 	bl	8004714 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8004364:	bf00      	nop
 8004366:	3778      	adds	r7, #120	; 0x78
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000

08004370 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800437a:	2003      	movs	r0, #3
 800437c:	f000 f95a 	bl	8004634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004380:	2000      	movs	r0, #0
 8004382:	f000 f80d 	bl	80043a0 <HAL_InitTick>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	71fb      	strb	r3, [r7, #7]
 8004390:	e001      	b.n	8004396 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004392:	f7fc fa13 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004396:	79fb      	ldrb	r3, [r7, #7]

}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80043ac:	4b16      	ldr	r3, [pc, #88]	; (8004408 <HAL_InitTick+0x68>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d022      	beq.n	80043fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80043b4:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_InitTick+0x6c>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_InitTick+0x68>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80043c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f966 	bl	800469a <HAL_SYSTICK_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b0f      	cmp	r3, #15
 80043d8:	d809      	bhi.n	80043ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043da:	2200      	movs	r2, #0
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	f04f 30ff 	mov.w	r0, #4294967295
 80043e2:	f000 f932 	bl	800464a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <HAL_InitTick+0x70>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	e007      	b.n	80043fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
 80043f2:	e004      	b.n	80043fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e001      	b.n	80043fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	2000004c 	.word	0x2000004c
 800440c:	20000000 	.word	0x20000000
 8004410:	20000048 	.word	0x20000048

08004414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_IncTick+0x1c>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_IncTick+0x20>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4413      	add	r3, r2
 8004422:	4a03      	ldr	r2, [pc, #12]	; (8004430 <HAL_IncTick+0x1c>)
 8004424:	6013      	str	r3, [r2, #0]
}
 8004426:	bf00      	nop
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	200024a8 	.word	0x200024a8
 8004434:	2000004c 	.word	0x2000004c

08004438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return uwTick;
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_GetTick+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	200024a8 	.word	0x200024a8

08004450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004458:	f7ff ffee 	bl	8004438 <HAL_GetTick>
 800445c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d004      	beq.n	8004474 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_Delay+0x40>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004474:	bf00      	nop
 8004476:	f7ff ffdf 	bl	8004438 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	429a      	cmp	r2, r3
 8004484:	d8f7      	bhi.n	8004476 <HAL_Delay+0x26>
  {
  }
}
 8004486:	bf00      	nop
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	2000004c 	.word	0x2000004c

08004494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <__NVIC_SetPriorityGrouping+0x44>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044b0:	4013      	ands	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044c6:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <__NVIC_SetPriorityGrouping+0x44>)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	60d3      	str	r3, [r2, #12]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e0:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <__NVIC_GetPriorityGrouping+0x18>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	f003 0307 	and.w	r3, r3, #7
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	2b00      	cmp	r3, #0
 8004508:	db0b      	blt.n	8004522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	f003 021f 	and.w	r2, r3, #31
 8004510:	4907      	ldr	r1, [pc, #28]	; (8004530 <__NVIC_EnableIRQ+0x38>)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2001      	movs	r0, #1
 800451a:	fa00 f202 	lsl.w	r2, r0, r2
 800451e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000e100 	.word	0xe000e100

08004534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004544:	2b00      	cmp	r3, #0
 8004546:	db0a      	blt.n	800455e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	490c      	ldr	r1, [pc, #48]	; (8004580 <__NVIC_SetPriority+0x4c>)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	0112      	lsls	r2, r2, #4
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	440b      	add	r3, r1
 8004558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800455c:	e00a      	b.n	8004574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	4908      	ldr	r1, [pc, #32]	; (8004584 <__NVIC_SetPriority+0x50>)
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	3b04      	subs	r3, #4
 800456c:	0112      	lsls	r2, r2, #4
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	440b      	add	r3, r1
 8004572:	761a      	strb	r2, [r3, #24]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	e000e100 	.word	0xe000e100
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004588:	b480      	push	{r7}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f1c3 0307 	rsb	r3, r3, #7
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	bf28      	it	cs
 80045a6:	2304      	movcs	r3, #4
 80045a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d902      	bls.n	80045b8 <NVIC_EncodePriority+0x30>
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3b03      	subs	r3, #3
 80045b6:	e000      	b.n	80045ba <NVIC_EncodePriority+0x32>
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	f04f 32ff 	mov.w	r2, #4294967295
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43da      	mvns	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	401a      	ands	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d0:	f04f 31ff 	mov.w	r1, #4294967295
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	43d9      	mvns	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	4313      	orrs	r3, r2
         );
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3724      	adds	r7, #36	; 0x24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004600:	d301      	bcc.n	8004606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004602:	2301      	movs	r3, #1
 8004604:	e00f      	b.n	8004626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <SysTick_Config+0x40>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3b01      	subs	r3, #1
 800460c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800460e:	210f      	movs	r1, #15
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	f7ff ff8e 	bl	8004534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <SysTick_Config+0x40>)
 800461a:	2200      	movs	r2, #0
 800461c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800461e:	4b04      	ldr	r3, [pc, #16]	; (8004630 <SysTick_Config+0x40>)
 8004620:	2207      	movs	r2, #7
 8004622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	e000e010 	.word	0xe000e010

08004634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ff29 	bl	8004494 <__NVIC_SetPriorityGrouping>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b086      	sub	sp, #24
 800464e:	af00      	add	r7, sp, #0
 8004650:	4603      	mov	r3, r0
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004658:	f7ff ff40 	bl	80044dc <__NVIC_GetPriorityGrouping>
 800465c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	6978      	ldr	r0, [r7, #20]
 8004664:	f7ff ff90 	bl	8004588 <NVIC_EncodePriority>
 8004668:	4602      	mov	r2, r0
 800466a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff5f 	bl	8004534 <__NVIC_SetPriority>
}
 8004676:	bf00      	nop
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff ff33 	bl	80044f8 <__NVIC_EnableIRQ>
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff ffa4 	bl	80045f0 <SysTick_Config>
 80046a8:	4603      	mov	r3, r0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80046b2:	b480      	push	{r7}
 80046b4:	b087      	sub	sp, #28
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	460b      	mov	r3, r1
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80046c4:	7afb      	ldrb	r3, [r7, #11]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d103      	bne.n	80046d2 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	605a      	str	r2, [r3, #4]
      break;
 80046d0:	e005      	b.n	80046de <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
      break;
 80046dc:	bf00      	nop
  }

  return status;
 80046de:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	371c      	adds	r7, #28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e003      	b.n	8004708 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004706:	2300      	movs	r3, #0
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004722:	e15a      	b.n	80049da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	2101      	movs	r1, #1
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	fa01 f303 	lsl.w	r3, r1, r3
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 814c 	beq.w	80049d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d005      	beq.n	8004754 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004750:	2b02      	cmp	r3, #2
 8004752:	d130      	bne.n	80047b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	2203      	movs	r2, #3
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800478a:	2201      	movs	r2, #1
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4013      	ands	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	f003 0201 	and.w	r2, r3, #1
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d017      	beq.n	80047f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	2203      	movs	r2, #3
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d123      	bne.n	8004846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	08da      	lsrs	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3208      	adds	r2, #8
 8004806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	220f      	movs	r2, #15
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43db      	mvns	r3, r3
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4013      	ands	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	08da      	lsrs	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3208      	adds	r2, #8
 8004840:	6939      	ldr	r1, [r7, #16]
 8004842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2203      	movs	r2, #3
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 0203 	and.w	r2, r3, #3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 80a6 	beq.w	80049d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004888:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <HAL_GPIO_Init+0x2e4>)
 800488a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488c:	4a5a      	ldr	r2, [pc, #360]	; (80049f8 <HAL_GPIO_Init+0x2e4>)
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	6613      	str	r3, [r2, #96]	; 0x60
 8004894:	4b58      	ldr	r3, [pc, #352]	; (80049f8 <HAL_GPIO_Init+0x2e4>)
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048a0:	4a56      	ldr	r2, [pc, #344]	; (80049fc <HAL_GPIO_Init+0x2e8>)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	3302      	adds	r3, #2
 80048a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	220f      	movs	r2, #15
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4013      	ands	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048ca:	d01f      	beq.n	800490c <HAL_GPIO_Init+0x1f8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a4c      	ldr	r2, [pc, #304]	; (8004a00 <HAL_GPIO_Init+0x2ec>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d019      	beq.n	8004908 <HAL_GPIO_Init+0x1f4>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a4b      	ldr	r2, [pc, #300]	; (8004a04 <HAL_GPIO_Init+0x2f0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <HAL_GPIO_Init+0x1f0>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a4a      	ldr	r2, [pc, #296]	; (8004a08 <HAL_GPIO_Init+0x2f4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00d      	beq.n	8004900 <HAL_GPIO_Init+0x1ec>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a49      	ldr	r2, [pc, #292]	; (8004a0c <HAL_GPIO_Init+0x2f8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <HAL_GPIO_Init+0x1e8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a48      	ldr	r2, [pc, #288]	; (8004a10 <HAL_GPIO_Init+0x2fc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <HAL_GPIO_Init+0x1e4>
 80048f4:	2305      	movs	r3, #5
 80048f6:	e00a      	b.n	800490e <HAL_GPIO_Init+0x1fa>
 80048f8:	2306      	movs	r3, #6
 80048fa:	e008      	b.n	800490e <HAL_GPIO_Init+0x1fa>
 80048fc:	2304      	movs	r3, #4
 80048fe:	e006      	b.n	800490e <HAL_GPIO_Init+0x1fa>
 8004900:	2303      	movs	r3, #3
 8004902:	e004      	b.n	800490e <HAL_GPIO_Init+0x1fa>
 8004904:	2302      	movs	r3, #2
 8004906:	e002      	b.n	800490e <HAL_GPIO_Init+0x1fa>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_GPIO_Init+0x1fa>
 800490c:	2300      	movs	r3, #0
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	f002 0203 	and.w	r2, r2, #3
 8004914:	0092      	lsls	r2, r2, #2
 8004916:	4093      	lsls	r3, r2
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800491e:	4937      	ldr	r1, [pc, #220]	; (80049fc <HAL_GPIO_Init+0x2e8>)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	089b      	lsrs	r3, r3, #2
 8004924:	3302      	adds	r3, #2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800492c:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <HAL_GPIO_Init+0x300>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	43db      	mvns	r3, r3
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004950:	4a30      	ldr	r2, [pc, #192]	; (8004a14 <HAL_GPIO_Init+0x300>)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004956:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <HAL_GPIO_Init+0x300>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	43db      	mvns	r3, r3
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4013      	ands	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800497a:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <HAL_GPIO_Init+0x300>)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004980:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <HAL_GPIO_Init+0x300>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	43db      	mvns	r3, r3
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4013      	ands	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049a4:	4a1b      	ldr	r2, [pc, #108]	; (8004a14 <HAL_GPIO_Init+0x300>)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049aa:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <HAL_GPIO_Init+0x300>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	43db      	mvns	r3, r3
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049ce:	4a11      	ldr	r2, [pc, #68]	; (8004a14 <HAL_GPIO_Init+0x300>)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	3301      	adds	r3, #1
 80049d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f ae9d 	bne.w	8004724 <HAL_GPIO_Init+0x10>
  }
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40010000 	.word	0x40010000
 8004a00:	48000400 	.word	0x48000400
 8004a04:	48000800 	.word	0x48000800
 8004a08:	48000c00 	.word	0x48000c00
 8004a0c:	48001000 	.word	0x48001000
 8004a10:	48001400 	.word	0x48001400
 8004a14:	40010400 	.word	0x40010400

08004a18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004a26:	e0bd      	b.n	8004ba4 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004a28:	2201      	movs	r2, #1
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80b0 	beq.w	8004b9e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a3e:	4a60      	ldr	r2, [pc, #384]	; (8004bc0 <HAL_GPIO_DeInit+0x1a8>)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	220f      	movs	r2, #15
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a66:	d01f      	beq.n	8004aa8 <HAL_GPIO_DeInit+0x90>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a56      	ldr	r2, [pc, #344]	; (8004bc4 <HAL_GPIO_DeInit+0x1ac>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d019      	beq.n	8004aa4 <HAL_GPIO_DeInit+0x8c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a55      	ldr	r2, [pc, #340]	; (8004bc8 <HAL_GPIO_DeInit+0x1b0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_GPIO_DeInit+0x88>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a54      	ldr	r2, [pc, #336]	; (8004bcc <HAL_GPIO_DeInit+0x1b4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00d      	beq.n	8004a9c <HAL_GPIO_DeInit+0x84>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a53      	ldr	r2, [pc, #332]	; (8004bd0 <HAL_GPIO_DeInit+0x1b8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <HAL_GPIO_DeInit+0x80>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a52      	ldr	r2, [pc, #328]	; (8004bd4 <HAL_GPIO_DeInit+0x1bc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_GPIO_DeInit+0x7c>
 8004a90:	2305      	movs	r3, #5
 8004a92:	e00a      	b.n	8004aaa <HAL_GPIO_DeInit+0x92>
 8004a94:	2306      	movs	r3, #6
 8004a96:	e008      	b.n	8004aaa <HAL_GPIO_DeInit+0x92>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	e006      	b.n	8004aaa <HAL_GPIO_DeInit+0x92>
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e004      	b.n	8004aaa <HAL_GPIO_DeInit+0x92>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e002      	b.n	8004aaa <HAL_GPIO_DeInit+0x92>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <HAL_GPIO_DeInit+0x92>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	f002 0203 	and.w	r2, r2, #3
 8004ab0:	0092      	lsls	r2, r2, #2
 8004ab2:	4093      	lsls	r3, r2
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d132      	bne.n	8004b20 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004aba:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <HAL_GPIO_DeInit+0x1c0>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	4945      	ldr	r1, [pc, #276]	; (8004bd8 <HAL_GPIO_DeInit+0x1c0>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004ac8:	4b43      	ldr	r3, [pc, #268]	; (8004bd8 <HAL_GPIO_DeInit+0x1c0>)
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	4941      	ldr	r1, [pc, #260]	; (8004bd8 <HAL_GPIO_DeInit+0x1c0>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004ad6:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <HAL_GPIO_DeInit+0x1c0>)
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	493e      	ldr	r1, [pc, #248]	; (8004bd8 <HAL_GPIO_DeInit+0x1c0>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004ae4:	4b3c      	ldr	r3, [pc, #240]	; (8004bd8 <HAL_GPIO_DeInit+0x1c0>)
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	43db      	mvns	r3, r3
 8004aec:	493a      	ldr	r1, [pc, #232]	; (8004bd8 <HAL_GPIO_DeInit+0x1c0>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	220f      	movs	r2, #15
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004b02:	4a2f      	ldr	r2, [pc, #188]	; (8004bc0 <HAL_GPIO_DeInit+0x1a8>)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	089b      	lsrs	r3, r3, #2
 8004b08:	3302      	adds	r3, #2
 8004b0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	43da      	mvns	r2, r3
 8004b12:	482b      	ldr	r0, [pc, #172]	; (8004bc0 <HAL_GPIO_DeInit+0x1a8>)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	400a      	ands	r2, r1
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	2103      	movs	r1, #3
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	08da      	lsrs	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3208      	adds	r2, #8
 8004b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	220f      	movs	r2, #15
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	08d2      	lsrs	r2, r2, #3
 8004b54:	4019      	ands	r1, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3208      	adds	r2, #8
 8004b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	2103      	movs	r1, #3
 8004b68:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	401a      	ands	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	401a      	ands	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	2103      	movs	r1, #3
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	401a      	ands	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f47f af3b 	bne.w	8004a28 <HAL_GPIO_DeInit+0x10>
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	48000400 	.word	0x48000400
 8004bc8:	48000800 	.word	0x48000800
 8004bcc:	48000c00 	.word	0x48000c00
 8004bd0:	48001000 	.word	0x48001000
 8004bd4:	48001400 	.word	0x48001400
 8004bd8:	40010400 	.word	0x40010400

08004bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	807b      	strh	r3, [r7, #2]
 8004be8:	4613      	mov	r3, r2
 8004bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bec:	787b      	ldrb	r3, [r7, #1]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bf2:	887a      	ldrh	r2, [r7, #2]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bf8:	e002      	b.n	8004c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bfa:	887a      	ldrh	r2, [r7, #2]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d006      	beq.n	8004c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c22:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f002 ff70 	bl	8007b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40010400 	.word	0x40010400

08004c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e081      	b.n	8004d52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f8a8 	bl	8004db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	; 0x24
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	e006      	b.n	8004cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d104      	bne.n	8004cd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1a      	ldr	r2, [r3, #32]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e021      	b.n	8004db0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2224      	movs	r2, #36	; 0x24
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f821 	bl	8004dcc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	4608      	mov	r0, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	461a      	mov	r2, r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	817b      	strh	r3, [r7, #10]
 8004df2:	460b      	mov	r3, r1
 8004df4:	813b      	strh	r3, [r7, #8]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	f040 80f9 	bne.w	8004ffa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_I2C_Mem_Write+0x34>
 8004e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0ed      	b.n	8004ffc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_I2C_Mem_Write+0x4e>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e0e6      	b.n	8004ffc <HAL_I2C_Mem_Write+0x21c>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e36:	f7ff faff 	bl	8004438 <HAL_GetTick>
 8004e3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2319      	movs	r3, #25
 8004e42:	2201      	movs	r2, #1
 8004e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 fadd 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0d1      	b.n	8004ffc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2221      	movs	r2, #33	; 0x21
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2240      	movs	r2, #64	; 0x40
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a3a      	ldr	r2, [r7, #32]
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e80:	88f8      	ldrh	r0, [r7, #6]
 8004e82:	893a      	ldrh	r2, [r7, #8]
 8004e84:	8979      	ldrh	r1, [r7, #10]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	4603      	mov	r3, r0
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f9ed 	bl	8005270 <I2C_RequestMemoryWrite>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0a9      	b.n	8004ffc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2bff      	cmp	r3, #255	; 0xff
 8004eb0:	d90e      	bls.n	8004ed0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	22ff      	movs	r2, #255	; 0xff
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	8979      	ldrh	r1, [r7, #10]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fc45 	bl	8005758 <I2C_TransferConfig>
 8004ece:	e00f      	b.n	8004ef0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	8979      	ldrh	r1, [r7, #10]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fc34 	bl	8005758 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fac7 	bl	8005488 <I2C_WaitOnTXISFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e07b      	b.n	8004ffc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d034      	beq.n	8004fa8 <HAL_I2C_Mem_Write+0x1c8>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d130      	bne.n	8004fa8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2180      	movs	r1, #128	; 0x80
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fa59 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e04d      	b.n	8004ffc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2bff      	cmp	r3, #255	; 0xff
 8004f68:	d90e      	bls.n	8004f88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	22ff      	movs	r2, #255	; 0xff
 8004f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	8979      	ldrh	r1, [r7, #10]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fbe9 	bl	8005758 <I2C_TransferConfig>
 8004f86:	e00f      	b.n	8004fa8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	8979      	ldrh	r1, [r7, #10]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fbd8 	bl	8005758 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d19e      	bne.n	8004ef0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 faa6 	bl	8005508 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e01a      	b.n	8004ffc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_I2C_Mem_Write+0x224>)
 8004fda:	400b      	ands	r3, r1
 8004fdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004ffa:	2302      	movs	r3, #2
  }
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	fe00e800 	.word	0xfe00e800

08005008 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	4608      	mov	r0, r1
 8005012:	4611      	mov	r1, r2
 8005014:	461a      	mov	r2, r3
 8005016:	4603      	mov	r3, r0
 8005018:	817b      	strh	r3, [r7, #10]
 800501a:	460b      	mov	r3, r1
 800501c:	813b      	strh	r3, [r7, #8]
 800501e:	4613      	mov	r3, r2
 8005020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b20      	cmp	r3, #32
 800502c:	f040 80fd 	bne.w	800522a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_I2C_Mem_Read+0x34>
 8005036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005042:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0f1      	b.n	800522c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_I2C_Mem_Read+0x4e>
 8005052:	2302      	movs	r3, #2
 8005054:	e0ea      	b.n	800522c <HAL_I2C_Mem_Read+0x224>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800505e:	f7ff f9eb 	bl	8004438 <HAL_GetTick>
 8005062:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2319      	movs	r3, #25
 800506a:	2201      	movs	r2, #1
 800506c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f9c9 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0d5      	b.n	800522c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2222      	movs	r2, #34	; 0x22
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2240      	movs	r2, #64	; 0x40
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a3a      	ldr	r2, [r7, #32]
 800509a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050a8:	88f8      	ldrh	r0, [r7, #6]
 80050aa:	893a      	ldrh	r2, [r7, #8]
 80050ac:	8979      	ldrh	r1, [r7, #10]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	4603      	mov	r3, r0
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f92d 	bl	8005318 <I2C_RequestMemoryRead>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0ad      	b.n	800522c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2bff      	cmp	r3, #255	; 0xff
 80050d8:	d90e      	bls.n	80050f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	22ff      	movs	r2, #255	; 0xff
 80050de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	8979      	ldrh	r1, [r7, #10]
 80050e8:	4b52      	ldr	r3, [pc, #328]	; (8005234 <HAL_I2C_Mem_Read+0x22c>)
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fb31 	bl	8005758 <I2C_TransferConfig>
 80050f6:	e00f      	b.n	8005118 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005106:	b2da      	uxtb	r2, r3
 8005108:	8979      	ldrh	r1, [r7, #10]
 800510a:	4b4a      	ldr	r3, [pc, #296]	; (8005234 <HAL_I2C_Mem_Read+0x22c>)
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 fb20 	bl	8005758 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	2200      	movs	r2, #0
 8005120:	2104      	movs	r1, #4
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f970 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e07c      	b.n	800522c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d034      	beq.n	80051d8 <HAL_I2C_Mem_Read+0x1d0>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005172:	2b00      	cmp	r3, #0
 8005174:	d130      	bne.n	80051d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	2200      	movs	r2, #0
 800517e:	2180      	movs	r1, #128	; 0x80
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f941 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e04d      	b.n	800522c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	2bff      	cmp	r3, #255	; 0xff
 8005198:	d90e      	bls.n	80051b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	22ff      	movs	r2, #255	; 0xff
 800519e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	8979      	ldrh	r1, [r7, #10]
 80051a8:	2300      	movs	r3, #0
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fad1 	bl	8005758 <I2C_TransferConfig>
 80051b6:	e00f      	b.n	80051d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	8979      	ldrh	r1, [r7, #10]
 80051ca:	2300      	movs	r3, #0
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fac0 	bl	8005758 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d19a      	bne.n	8005118 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f98e 	bl	8005508 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e01a      	b.n	800522c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2220      	movs	r2, #32
 80051fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6859      	ldr	r1, [r3, #4]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_I2C_Mem_Read+0x230>)
 800520a:	400b      	ands	r3, r1
 800520c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e000      	b.n	800522c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800522a:	2302      	movs	r3, #2
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	80002400 	.word	0x80002400
 8005238:	fe00e800 	.word	0xfe00e800

0800523c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524a:	b2db      	uxtb	r3, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	4608      	mov	r0, r1
 800527a:	4611      	mov	r1, r2
 800527c:	461a      	mov	r2, r3
 800527e:	4603      	mov	r3, r0
 8005280:	817b      	strh	r3, [r7, #10]
 8005282:	460b      	mov	r3, r1
 8005284:	813b      	strh	r3, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	8979      	ldrh	r1, [r7, #10]
 8005290:	4b20      	ldr	r3, [pc, #128]	; (8005314 <I2C_RequestMemoryWrite+0xa4>)
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fa5d 	bl	8005758 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	69b9      	ldr	r1, [r7, #24]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f8f0 	bl	8005488 <I2C_WaitOnTXISFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e02c      	b.n	800530c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d105      	bne.n	80052c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052b8:	893b      	ldrh	r3, [r7, #8]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	629a      	str	r2, [r3, #40]	; 0x28
 80052c2:	e015      	b.n	80052f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052c4:	893b      	ldrh	r3, [r7, #8]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	69b9      	ldr	r1, [r7, #24]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f8d6 	bl	8005488 <I2C_WaitOnTXISFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e012      	b.n	800530c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052e6:	893b      	ldrh	r3, [r7, #8]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2200      	movs	r2, #0
 80052f8:	2180      	movs	r1, #128	; 0x80
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f884 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	80002000 	.word	0x80002000

08005318 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	4608      	mov	r0, r1
 8005322:	4611      	mov	r1, r2
 8005324:	461a      	mov	r2, r3
 8005326:	4603      	mov	r3, r0
 8005328:	817b      	strh	r3, [r7, #10]
 800532a:	460b      	mov	r3, r1
 800532c:	813b      	strh	r3, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	8979      	ldrh	r1, [r7, #10]
 8005338:	4b20      	ldr	r3, [pc, #128]	; (80053bc <I2C_RequestMemoryRead+0xa4>)
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	2300      	movs	r3, #0
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fa0a 	bl	8005758 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	69b9      	ldr	r1, [r7, #24]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f89d 	bl	8005488 <I2C_WaitOnTXISFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e02c      	b.n	80053b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800535e:	893b      	ldrh	r3, [r7, #8]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
 8005368:	e015      	b.n	8005396 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800536a:	893b      	ldrh	r3, [r7, #8]
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	b29b      	uxth	r3, r3
 8005370:	b2da      	uxtb	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	69b9      	ldr	r1, [r7, #24]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f883 	bl	8005488 <I2C_WaitOnTXISFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e012      	b.n	80053b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800538c:	893b      	ldrh	r3, [r7, #8]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2200      	movs	r2, #0
 800539e:	2140      	movs	r1, #64	; 0x40
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f831 	bl	8005408 <I2C_WaitOnFlagUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	80002000 	.word	0x80002000

080053c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d103      	bne.n	80053de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d007      	beq.n	80053fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	619a      	str	r2, [r3, #24]
  }
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005418:	e022      	b.n	8005460 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d01e      	beq.n	8005460 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005422:	f7ff f809 	bl	8004438 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d113      	bne.n	8005460 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543c:	f043 0220 	orr.w	r2, r3, #32
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e00f      	b.n	8005480 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	429a      	cmp	r2, r3
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	429a      	cmp	r2, r3
 800547c:	d0cd      	beq.n	800541a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005494:	e02c      	b.n	80054f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f870 	bl	8005580 <I2C_IsErrorOccurred>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e02a      	b.n	8005500 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d01e      	beq.n	80054f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b2:	f7fe ffc1 	bl	8004438 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d113      	bne.n	80054f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054cc:	f043 0220 	orr.w	r2, r3, #32
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e007      	b.n	8005500 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d1cb      	bne.n	8005496 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005514:	e028      	b.n	8005568 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f830 	bl	8005580 <I2C_IsErrorOccurred>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e026      	b.n	8005578 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552a:	f7fe ff85 	bl	8004438 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d113      	bne.n	8005568 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005544:	f043 0220 	orr.w	r2, r3, #32
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e007      	b.n	8005578 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b20      	cmp	r3, #32
 8005574:	d1cf      	bne.n	8005516 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d075      	beq.n	8005698 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2210      	movs	r2, #16
 80055b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055b4:	e056      	b.n	8005664 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055bc:	d052      	beq.n	8005664 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fe ff3b 	bl	8004438 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <I2C_IsErrorOccurred+0x54>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d147      	bne.n	8005664 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f6:	d12e      	bne.n	8005656 <I2C_IsErrorOccurred+0xd6>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055fe:	d02a      	beq.n	8005656 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	2b20      	cmp	r3, #32
 8005604:	d027      	beq.n	8005656 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005614:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005616:	f7fe ff0f 	bl	8004438 <HAL_GetTick>
 800561a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800561c:	e01b      	b.n	8005656 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800561e:	f7fe ff0b 	bl	8004438 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b19      	cmp	r3, #25
 800562a:	d914      	bls.n	8005656 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005630:	f043 0220 	orr.w	r2, r3, #32
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b20      	cmp	r3, #32
 8005662:	d1dc      	bne.n	800561e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b20      	cmp	r3, #32
 8005670:	d003      	beq.n	800567a <I2C_IsErrorOccurred+0xfa>
 8005672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005676:	2b00      	cmp	r3, #0
 8005678:	d09d      	beq.n	80055b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800567a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2220      	movs	r2, #32
 8005688:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f043 0304 	orr.w	r3, r3, #4
 8005690:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00b      	beq.n	80056c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	f043 0308 	orr.w	r3, r3, #8
 80056d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	f043 0302 	orr.w	r3, r3, #2
 80056f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01c      	beq.n	8005748 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff fe56 	bl	80053c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <I2C_IsErrorOccurred+0x1d4>)
 8005720:	400b      	ands	r3, r1
 8005722:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	431a      	orrs	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800574c:	4618      	mov	r0, r3
 800574e:	3728      	adds	r7, #40	; 0x28
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	fe00e800 	.word	0xfe00e800

08005758 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	4613      	mov	r3, r2
 8005768:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800576a:	897b      	ldrh	r3, [r7, #10]
 800576c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005770:	7a7b      	ldrb	r3, [r7, #9]
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005778:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	4313      	orrs	r3, r2
 8005782:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005786:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	0d5b      	lsrs	r3, r3, #21
 8005792:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005796:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <I2C_TransferConfig+0x60>)
 8005798:	430b      	orrs	r3, r1
 800579a:	43db      	mvns	r3, r3
 800579c:	ea02 0103 	and.w	r1, r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	03ff63ff 	.word	0x03ff63ff

080057bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d138      	bne.n	8005844 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057dc:	2302      	movs	r3, #2
 80057de:	e032      	b.n	8005846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	; 0x24
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800580e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6819      	ldr	r1, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e000      	b.n	8005846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b20      	cmp	r3, #32
 8005866:	d139      	bne.n	80058dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005872:	2302      	movs	r3, #2
 8005874:	e033      	b.n	80058de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2224      	movs	r2, #36	; 0x24
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	e000      	b.n	80058de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058dc:	2302      	movs	r3, #2
  }
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d141      	bne.n	800597e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058fa:	4b4b      	ldr	r3, [pc, #300]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005906:	d131      	bne.n	800596c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005908:	4b47      	ldr	r3, [pc, #284]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800590a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800590e:	4a46      	ldr	r2, [pc, #280]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005914:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005918:	4b43      	ldr	r3, [pc, #268]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005920:	4a41      	ldr	r2, [pc, #260]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005926:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005928:	4b40      	ldr	r3, [pc, #256]	; (8005a2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2232      	movs	r2, #50	; 0x32
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	4a3f      	ldr	r2, [pc, #252]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	0c9b      	lsrs	r3, r3, #18
 800593a:	3301      	adds	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800593e:	e002      	b.n	8005946 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3b01      	subs	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005946:	4b38      	ldr	r3, [pc, #224]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800594e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005952:	d102      	bne.n	800595a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f2      	bne.n	8005940 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800595a:	4b33      	ldr	r3, [pc, #204]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005966:	d158      	bne.n	8005a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e057      	b.n	8005a1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800596c:	4b2e      	ldr	r3, [pc, #184]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800596e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005972:	4a2d      	ldr	r2, [pc, #180]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005978:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800597c:	e04d      	b.n	8005a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005984:	d141      	bne.n	8005a0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005986:	4b28      	ldr	r3, [pc, #160]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800598e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005992:	d131      	bne.n	80059f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005994:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800599a:	4a23      	ldr	r2, [pc, #140]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800599c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059a4:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059ac:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059b4:	4b1d      	ldr	r3, [pc, #116]	; (8005a2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2232      	movs	r2, #50	; 0x32
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
 80059be:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059c0:	fba2 2303 	umull	r2, r3, r2, r3
 80059c4:	0c9b      	lsrs	r3, r3, #18
 80059c6:	3301      	adds	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059ca:	e002      	b.n	80059d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059d2:	4b15      	ldr	r3, [pc, #84]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059de:	d102      	bne.n	80059e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f2      	bne.n	80059cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059e6:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f2:	d112      	bne.n	8005a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e011      	b.n	8005a1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059f8:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059fe:	4a0a      	ldr	r2, [pc, #40]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a08:	e007      	b.n	8005a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a0a:	4b07      	ldr	r3, [pc, #28]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a12:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	40007000 	.word	0x40007000
 8005a2c:	20000000 	.word	0x20000000
 8005a30:	431bde83 	.word	0x431bde83

08005a34 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4a04      	ldr	r2, [pc, #16]	; (8005a50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a42:	6093      	str	r3, [r2, #8]
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40007000 	.word	0x40007000

08005a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e306      	b.n	8006074 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d075      	beq.n	8005b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a72:	4b97      	ldr	r3, [pc, #604]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a7c:	4b94      	ldr	r3, [pc, #592]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b0c      	cmp	r3, #12
 8005a8a:	d102      	bne.n	8005a92 <HAL_RCC_OscConfig+0x3e>
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d002      	beq.n	8005a98 <HAL_RCC_OscConfig+0x44>
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d10b      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a98:	4b8d      	ldr	r3, [pc, #564]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d05b      	beq.n	8005b5c <HAL_RCC_OscConfig+0x108>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d157      	bne.n	8005b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e2e1      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab8:	d106      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x74>
 8005aba:	4b85      	ldr	r3, [pc, #532]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a84      	ldr	r2, [pc, #528]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	e01d      	b.n	8005b04 <HAL_RCC_OscConfig+0xb0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ad0:	d10c      	bne.n	8005aec <HAL_RCC_OscConfig+0x98>
 8005ad2:	4b7f      	ldr	r3, [pc, #508]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a7e      	ldr	r2, [pc, #504]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	4b7c      	ldr	r3, [pc, #496]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a7b      	ldr	r2, [pc, #492]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	e00b      	b.n	8005b04 <HAL_RCC_OscConfig+0xb0>
 8005aec:	4b78      	ldr	r3, [pc, #480]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a77      	ldr	r2, [pc, #476]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	4b75      	ldr	r3, [pc, #468]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a74      	ldr	r2, [pc, #464]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d013      	beq.n	8005b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7fe fc94 	bl	8004438 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fe fc90 	bl	8004438 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	; 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e2a6      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b26:	4b6a      	ldr	r3, [pc, #424]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0xc0>
 8005b32:	e014      	b.n	8005b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fe fc80 	bl	8004438 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b3c:	f7fe fc7c 	bl	8004438 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b64      	cmp	r3, #100	; 0x64
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e292      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b4e:	4b60      	ldr	r3, [pc, #384]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCC_OscConfig+0xe8>
 8005b5a:	e000      	b.n	8005b5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d075      	beq.n	8005c56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b6a:	4b59      	ldr	r3, [pc, #356]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b74:	4b56      	ldr	r3, [pc, #344]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b0c      	cmp	r3, #12
 8005b82:	d102      	bne.n	8005b8a <HAL_RCC_OscConfig+0x136>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d002      	beq.n	8005b90 <HAL_RCC_OscConfig+0x13c>
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d11f      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b90:	4b4f      	ldr	r3, [pc, #316]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x154>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e265      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba8:	4b49      	ldr	r3, [pc, #292]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	061b      	lsls	r3, r3, #24
 8005bb6:	4946      	ldr	r1, [pc, #280]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005bbc:	4b45      	ldr	r3, [pc, #276]	; (8005cd4 <HAL_RCC_OscConfig+0x280>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe fbed 	bl	80043a0 <HAL_InitTick>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d043      	beq.n	8005c54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e251      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d023      	beq.n	8005c20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bd8:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a3c      	ldr	r2, [pc, #240]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fe fc28 	bl	8004438 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bec:	f7fe fc24 	bl	8004438 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e23a      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bfe:	4b34      	ldr	r3, [pc, #208]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c0a:	4b31      	ldr	r3, [pc, #196]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	061b      	lsls	r3, r3, #24
 8005c18:	492d      	ldr	r1, [pc, #180]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	604b      	str	r3, [r1, #4]
 8005c1e:	e01a      	b.n	8005c56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c20:	4b2b      	ldr	r3, [pc, #172]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fe fc04 	bl	8004438 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c34:	f7fe fc00 	bl	8004438 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e216      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c46:	4b22      	ldr	r3, [pc, #136]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0x1e0>
 8005c52:	e000      	b.n	8005c56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d041      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01c      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c6a:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c70:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7a:	f7fe fbdd 	bl	8004438 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c82:	f7fe fbd9 	bl	8004438 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e1ef      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0ef      	beq.n	8005c82 <HAL_RCC_OscConfig+0x22e>
 8005ca2:	e020      	b.n	8005ce6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <HAL_RCC_OscConfig+0x27c>)
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb4:	f7fe fbc0 	bl	8004438 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cba:	e00d      	b.n	8005cd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cbc:	f7fe fbbc 	bl	8004438 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d906      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e1d2      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
 8005cce:	bf00      	nop
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	20000048 	.word	0x20000048
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cd8:	4b8c      	ldr	r3, [pc, #560]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1ea      	bne.n	8005cbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80a6 	beq.w	8005e40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005cf8:	4b84      	ldr	r3, [pc, #528]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_RCC_OscConfig+0x2b4>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <HAL_RCC_OscConfig+0x2b6>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00d      	beq.n	8005d2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0e:	4b7f      	ldr	r3, [pc, #508]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	4a7e      	ldr	r2, [pc, #504]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d18:	6593      	str	r3, [r2, #88]	; 0x58
 8005d1a:	4b7c      	ldr	r3, [pc, #496]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d26:	2301      	movs	r3, #1
 8005d28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d2a:	4b79      	ldr	r3, [pc, #484]	; (8005f10 <HAL_RCC_OscConfig+0x4bc>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d118      	bne.n	8005d68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d36:	4b76      	ldr	r3, [pc, #472]	; (8005f10 <HAL_RCC_OscConfig+0x4bc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a75      	ldr	r2, [pc, #468]	; (8005f10 <HAL_RCC_OscConfig+0x4bc>)
 8005d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d42:	f7fe fb79 	bl	8004438 <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4a:	f7fe fb75 	bl	8004438 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e18b      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d5c:	4b6c      	ldr	r3, [pc, #432]	; (8005f10 <HAL_RCC_OscConfig+0x4bc>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0f0      	beq.n	8005d4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d108      	bne.n	8005d82 <HAL_RCC_OscConfig+0x32e>
 8005d70:	4b66      	ldr	r3, [pc, #408]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d76:	4a65      	ldr	r2, [pc, #404]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d80:	e024      	b.n	8005dcc <HAL_RCC_OscConfig+0x378>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d110      	bne.n	8005dac <HAL_RCC_OscConfig+0x358>
 8005d8a:	4b60      	ldr	r3, [pc, #384]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d90:	4a5e      	ldr	r2, [pc, #376]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005d92:	f043 0304 	orr.w	r3, r3, #4
 8005d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d9a:	4b5c      	ldr	r3, [pc, #368]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da0:	4a5a      	ldr	r2, [pc, #360]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005daa:	e00f      	b.n	8005dcc <HAL_RCC_OscConfig+0x378>
 8005dac:	4b57      	ldr	r3, [pc, #348]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db2:	4a56      	ldr	r2, [pc, #344]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dbc:	4b53      	ldr	r3, [pc, #332]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	4a52      	ldr	r2, [pc, #328]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005dc4:	f023 0304 	bic.w	r3, r3, #4
 8005dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d016      	beq.n	8005e02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd4:	f7fe fb30 	bl	8004438 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dda:	e00a      	b.n	8005df2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ddc:	f7fe fb2c 	bl	8004438 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e140      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005df2:	4b46      	ldr	r3, [pc, #280]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0ed      	beq.n	8005ddc <HAL_RCC_OscConfig+0x388>
 8005e00:	e015      	b.n	8005e2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e02:	f7fe fb19 	bl	8004438 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e08:	e00a      	b.n	8005e20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e0a:	f7fe fb15 	bl	8004438 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e129      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e20:	4b3a      	ldr	r3, [pc, #232]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1ed      	bne.n	8005e0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e2e:	7ffb      	ldrb	r3, [r7, #31]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d105      	bne.n	8005e40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e34:	4b35      	ldr	r3, [pc, #212]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e38:	4a34      	ldr	r2, [pc, #208]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d03c      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01c      	beq.n	8005e8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e54:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e5a:	4a2c      	ldr	r2, [pc, #176]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e64:	f7fe fae8 	bl	8004438 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e6c:	f7fe fae4 	bl	8004438 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e0fa      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e7e:	4b23      	ldr	r3, [pc, #140]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0ef      	beq.n	8005e6c <HAL_RCC_OscConfig+0x418>
 8005e8c:	e01b      	b.n	8005ec6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e8e:	4b1f      	ldr	r3, [pc, #124]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e94:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9e:	f7fe facb 	bl	8004438 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ea6:	f7fe fac7 	bl	8004438 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e0dd      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005eb8:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1ef      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 80d1 	beq.w	8006072 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ed0:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 030c 	and.w	r3, r3, #12
 8005ed8:	2b0c      	cmp	r3, #12
 8005eda:	f000 808b 	beq.w	8005ff4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d15e      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee6:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <HAL_RCC_OscConfig+0x4b8>)
 8005eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef2:	f7fe faa1 	bl	8004438 <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ef8:	e00c      	b.n	8005f14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005efa:	f7fe fa9d 	bl	8004438 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d905      	bls.n	8005f14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e0b3      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f14:	4b59      	ldr	r3, [pc, #356]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1ec      	bne.n	8005efa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f20:	4b56      	ldr	r3, [pc, #344]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	4b56      	ldr	r3, [pc, #344]	; (8006080 <HAL_RCC_OscConfig+0x62c>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6a11      	ldr	r1, [r2, #32]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f30:	3a01      	subs	r2, #1
 8005f32:	0112      	lsls	r2, r2, #4
 8005f34:	4311      	orrs	r1, r2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005f3a:	0212      	lsls	r2, r2, #8
 8005f3c:	4311      	orrs	r1, r2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f42:	0852      	lsrs	r2, r2, #1
 8005f44:	3a01      	subs	r2, #1
 8005f46:	0552      	lsls	r2, r2, #21
 8005f48:	4311      	orrs	r1, r2
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f4e:	0852      	lsrs	r2, r2, #1
 8005f50:	3a01      	subs	r2, #1
 8005f52:	0652      	lsls	r2, r2, #25
 8005f54:	4311      	orrs	r1, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f5a:	06d2      	lsls	r2, r2, #27
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	4947      	ldr	r1, [pc, #284]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f64:	4b45      	ldr	r3, [pc, #276]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a44      	ldr	r2, [pc, #272]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f70:	4b42      	ldr	r3, [pc, #264]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a41      	ldr	r2, [pc, #260]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fe fa5c 	bl	8004438 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f84:	f7fe fa58 	bl	8004438 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e06e      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f96:	4b39      	ldr	r3, [pc, #228]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <HAL_RCC_OscConfig+0x530>
 8005fa2:	e066      	b.n	8006072 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fa4:	4b35      	ldr	r3, [pc, #212]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a34      	ldr	r2, [pc, #208]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005fb0:	4b32      	ldr	r3, [pc, #200]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4a31      	ldr	r2, [pc, #196]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005fbc:	4b2f      	ldr	r3, [pc, #188]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	4a2e      	ldr	r2, [pc, #184]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005fc2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fcc:	f7fe fa34 	bl	8004438 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd4:	f7fe fa30 	bl	8004438 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e046      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fe6:	4b25      	ldr	r3, [pc, #148]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f0      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x580>
 8005ff2:	e03e      	b.n	8006072 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e039      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <HAL_RCC_OscConfig+0x628>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f003 0203 	and.w	r2, r3, #3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	429a      	cmp	r2, r3
 8006012:	d12c      	bne.n	800606e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	3b01      	subs	r3, #1
 8006020:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006022:	429a      	cmp	r2, r3
 8006024:	d123      	bne.n	800606e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006032:	429a      	cmp	r2, r3
 8006034:	d11b      	bne.n	800606e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006042:	429a      	cmp	r2, r3
 8006044:	d113      	bne.n	800606e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	085b      	lsrs	r3, r3, #1
 8006052:	3b01      	subs	r3, #1
 8006054:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006056:	429a      	cmp	r2, r3
 8006058:	d109      	bne.n	800606e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	085b      	lsrs	r3, r3, #1
 8006066:	3b01      	subs	r3, #1
 8006068:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800606a:	429a      	cmp	r2, r3
 800606c:	d001      	beq.n	8006072 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40021000 	.word	0x40021000
 8006080:	019f800c 	.word	0x019f800c

08006084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e11e      	b.n	80062da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800609c:	4b91      	ldr	r3, [pc, #580]	; (80062e4 <HAL_RCC_ClockConfig+0x260>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d910      	bls.n	80060cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060aa:	4b8e      	ldr	r3, [pc, #568]	; (80062e4 <HAL_RCC_ClockConfig+0x260>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f023 020f 	bic.w	r2, r3, #15
 80060b2:	498c      	ldr	r1, [pc, #560]	; (80062e4 <HAL_RCC_ClockConfig+0x260>)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ba:	4b8a      	ldr	r3, [pc, #552]	; (80062e4 <HAL_RCC_ClockConfig+0x260>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d001      	beq.n	80060cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e106      	b.n	80062da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d073      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d129      	bne.n	8006134 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e0:	4b81      	ldr	r3, [pc, #516]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0f4      	b.n	80062da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80060f0:	f000 f99e 	bl	8006430 <RCC_GetSysClockFreqFromPLLSource>
 80060f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4a7c      	ldr	r2, [pc, #496]	; (80062ec <HAL_RCC_ClockConfig+0x268>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d93f      	bls.n	800617e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80060fe:	4b7a      	ldr	r3, [pc, #488]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006112:	2b00      	cmp	r3, #0
 8006114:	d033      	beq.n	800617e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800611a:	2b00      	cmp	r3, #0
 800611c:	d12f      	bne.n	800617e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800611e:	4b72      	ldr	r3, [pc, #456]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006126:	4a70      	ldr	r2, [pc, #448]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 8006128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800612e:	2380      	movs	r3, #128	; 0x80
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	e024      	b.n	800617e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d107      	bne.n	800614c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800613c:	4b6a      	ldr	r3, [pc, #424]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0c6      	b.n	80062da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800614c:	4b66      	ldr	r3, [pc, #408]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0be      	b.n	80062da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800615c:	f000 f8ce 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 8006160:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4a61      	ldr	r2, [pc, #388]	; (80062ec <HAL_RCC_ClockConfig+0x268>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d909      	bls.n	800617e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800616a:	4b5f      	ldr	r3, [pc, #380]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006172:	4a5d      	ldr	r2, [pc, #372]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800617e:	4b5a      	ldr	r3, [pc, #360]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f023 0203 	bic.w	r2, r3, #3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	4957      	ldr	r1, [pc, #348]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 800618c:	4313      	orrs	r3, r2
 800618e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006190:	f7fe f952 	bl	8004438 <HAL_GetTick>
 8006194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006196:	e00a      	b.n	80061ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006198:	f7fe f94e 	bl	8004438 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e095      	b.n	80062da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ae:	4b4e      	ldr	r3, [pc, #312]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 020c 	and.w	r2, r3, #12
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	429a      	cmp	r2, r3
 80061be:	d1eb      	bne.n	8006198 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d023      	beq.n	8006214 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061d8:	4b43      	ldr	r3, [pc, #268]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4a42      	ldr	r2, [pc, #264]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 80061de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80061f0:	4b3d      	ldr	r3, [pc, #244]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061f8:	4a3b      	ldr	r2, [pc, #236]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 80061fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006200:	4b39      	ldr	r3, [pc, #228]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	4936      	ldr	r1, [pc, #216]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 800620e:	4313      	orrs	r3, r2
 8006210:	608b      	str	r3, [r1, #8]
 8006212:	e008      	b.n	8006226 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d105      	bne.n	8006226 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800621a:	4b33      	ldr	r3, [pc, #204]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	4a32      	ldr	r2, [pc, #200]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 8006220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006224:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006226:	4b2f      	ldr	r3, [pc, #188]	; (80062e4 <HAL_RCC_ClockConfig+0x260>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d21d      	bcs.n	8006270 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006234:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <HAL_RCC_ClockConfig+0x260>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f023 020f 	bic.w	r2, r3, #15
 800623c:	4929      	ldr	r1, [pc, #164]	; (80062e4 <HAL_RCC_ClockConfig+0x260>)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	4313      	orrs	r3, r2
 8006242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006244:	f7fe f8f8 	bl	8004438 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800624a:	e00a      	b.n	8006262 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624c:	f7fe f8f4 	bl	8004438 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e03b      	b.n	80062da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006262:	4b20      	ldr	r3, [pc, #128]	; (80062e4 <HAL_RCC_ClockConfig+0x260>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d1ed      	bne.n	800624c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	4917      	ldr	r1, [pc, #92]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 800628a:	4313      	orrs	r3, r2
 800628c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	490f      	ldr	r1, [pc, #60]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062ae:	f000 f825 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 80062b2:	4602      	mov	r2, r0
 80062b4:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <HAL_RCC_ClockConfig+0x264>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	490c      	ldr	r1, [pc, #48]	; (80062f0 <HAL_RCC_ClockConfig+0x26c>)
 80062c0:	5ccb      	ldrb	r3, [r1, r3]
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ca:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <HAL_RCC_ClockConfig+0x270>)
 80062cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80062ce:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <HAL_RCC_ClockConfig+0x274>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe f864 	bl	80043a0 <HAL_InitTick>
 80062d8:	4603      	mov	r3, r0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	40022000 	.word	0x40022000
 80062e8:	40021000 	.word	0x40021000
 80062ec:	04c4b400 	.word	0x04c4b400
 80062f0:	08008df8 	.word	0x08008df8
 80062f4:	20000000 	.word	0x20000000
 80062f8:	20000048 	.word	0x20000048

080062fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006302:	4b2c      	ldr	r3, [pc, #176]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 030c 	and.w	r3, r3, #12
 800630a:	2b04      	cmp	r3, #4
 800630c:	d102      	bne.n	8006314 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800630e:	4b2a      	ldr	r3, [pc, #168]	; (80063b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	e047      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006314:	4b27      	ldr	r3, [pc, #156]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 030c 	and.w	r3, r3, #12
 800631c:	2b08      	cmp	r3, #8
 800631e:	d102      	bne.n	8006326 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006320:	4b26      	ldr	r3, [pc, #152]	; (80063bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	e03e      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006326:	4b23      	ldr	r3, [pc, #140]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 030c 	and.w	r3, r3, #12
 800632e:	2b0c      	cmp	r3, #12
 8006330:	d136      	bne.n	80063a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006332:	4b20      	ldr	r3, [pc, #128]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800633c:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	091b      	lsrs	r3, r3, #4
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	3301      	adds	r3, #1
 8006348:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b03      	cmp	r3, #3
 800634e:	d10c      	bne.n	800636a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006350:	4a1a      	ldr	r2, [pc, #104]	; (80063bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	fbb2 f3f3 	udiv	r3, r2, r3
 8006358:	4a16      	ldr	r2, [pc, #88]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800635a:	68d2      	ldr	r2, [r2, #12]
 800635c:	0a12      	lsrs	r2, r2, #8
 800635e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	617b      	str	r3, [r7, #20]
      break;
 8006368:	e00c      	b.n	8006384 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800636a:	4a13      	ldr	r2, [pc, #76]	; (80063b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006372:	4a10      	ldr	r2, [pc, #64]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006374:	68d2      	ldr	r2, [r2, #12]
 8006376:	0a12      	lsrs	r2, r2, #8
 8006378:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800637c:	fb02 f303 	mul.w	r3, r2, r3
 8006380:	617b      	str	r3, [r7, #20]
      break;
 8006382:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	0e5b      	lsrs	r3, r3, #25
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	3301      	adds	r3, #1
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	e001      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80063a4:	693b      	ldr	r3, [r7, #16]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40021000 	.word	0x40021000
 80063b8:	00f42400 	.word	0x00f42400
 80063bc:	016e3600 	.word	0x016e3600

080063c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063c4:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063c6:	681b      	ldr	r3, [r3, #0]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000000 	.word	0x20000000

080063d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063dc:	f7ff fff0 	bl	80063c0 <HAL_RCC_GetHCLKFreq>
 80063e0:	4602      	mov	r2, r0
 80063e2:	4b06      	ldr	r3, [pc, #24]	; (80063fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	4904      	ldr	r1, [pc, #16]	; (8006400 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063ee:	5ccb      	ldrb	r3, [r1, r3]
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40021000 	.word	0x40021000
 8006400:	08008e08 	.word	0x08008e08

08006404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006408:	f7ff ffda 	bl	80063c0 <HAL_RCC_GetHCLKFreq>
 800640c:	4602      	mov	r2, r0
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	0adb      	lsrs	r3, r3, #11
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	4904      	ldr	r1, [pc, #16]	; (800642c <HAL_RCC_GetPCLK2Freq+0x28>)
 800641a:	5ccb      	ldrb	r3, [r1, r3]
 800641c:	f003 031f 	and.w	r3, r3, #31
 8006420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006424:	4618      	mov	r0, r3
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40021000 	.word	0x40021000
 800642c:	08008e08 	.word	0x08008e08

08006430 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006436:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006440:	4b1b      	ldr	r3, [pc, #108]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	091b      	lsrs	r3, r3, #4
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	3301      	adds	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b03      	cmp	r3, #3
 8006452:	d10c      	bne.n	800646e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006454:	4a17      	ldr	r2, [pc, #92]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	4a14      	ldr	r2, [pc, #80]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800645e:	68d2      	ldr	r2, [r2, #12]
 8006460:	0a12      	lsrs	r2, r2, #8
 8006462:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006466:	fb02 f303 	mul.w	r3, r2, r3
 800646a:	617b      	str	r3, [r7, #20]
    break;
 800646c:	e00c      	b.n	8006488 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800646e:	4a12      	ldr	r2, [pc, #72]	; (80064b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	fbb2 f3f3 	udiv	r3, r2, r3
 8006476:	4a0e      	ldr	r2, [pc, #56]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006478:	68d2      	ldr	r2, [r2, #12]
 800647a:	0a12      	lsrs	r2, r2, #8
 800647c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006480:	fb02 f303 	mul.w	r3, r2, r3
 8006484:	617b      	str	r3, [r7, #20]
    break;
 8006486:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006488:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	0e5b      	lsrs	r3, r3, #25
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	3301      	adds	r3, #1
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80064a2:	687b      	ldr	r3, [r7, #4]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	40021000 	.word	0x40021000
 80064b4:	016e3600 	.word	0x016e3600
 80064b8:	00f42400 	.word	0x00f42400

080064bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064c4:	2300      	movs	r3, #0
 80064c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064c8:	2300      	movs	r3, #0
 80064ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8098 	beq.w	800660a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064da:	2300      	movs	r3, #0
 80064dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064de:	4b43      	ldr	r3, [pc, #268]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10d      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ea:	4b40      	ldr	r3, [pc, #256]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	4a3f      	ldr	r2, [pc, #252]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f4:	6593      	str	r3, [r2, #88]	; 0x58
 80064f6:	4b3d      	ldr	r3, [pc, #244]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fe:	60bb      	str	r3, [r7, #8]
 8006500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006502:	2301      	movs	r3, #1
 8006504:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006506:	4b3a      	ldr	r3, [pc, #232]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a39      	ldr	r2, [pc, #228]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800650c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006510:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006512:	f7fd ff91 	bl	8004438 <HAL_GetTick>
 8006516:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006518:	e009      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800651a:	f7fd ff8d 	bl	8004438 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d902      	bls.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	74fb      	strb	r3, [r7, #19]
        break;
 800652c:	e005      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800652e:	4b30      	ldr	r3, [pc, #192]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0ef      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800653a:	7cfb      	ldrb	r3, [r7, #19]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d159      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006540:	4b2a      	ldr	r3, [pc, #168]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d01e      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	429a      	cmp	r2, r3
 800655a:	d019      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800655c:	4b23      	ldr	r3, [pc, #140]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006566:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006568:	4b20      	ldr	r3, [pc, #128]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656e:	4a1f      	ldr	r2, [pc, #124]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006578:	4b1c      	ldr	r3, [pc, #112]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800657a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657e:	4a1b      	ldr	r2, [pc, #108]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006588:	4a18      	ldr	r2, [pc, #96]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d016      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659a:	f7fd ff4d 	bl	8004438 <HAL_GetTick>
 800659e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065a0:	e00b      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a2:	f7fd ff49 	bl	8004438 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d902      	bls.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	74fb      	strb	r3, [r7, #19]
            break;
 80065b8:	e006      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065ba:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0ec      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80065c8:	7cfb      	ldrb	r3, [r7, #19]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10b      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065ce:	4b07      	ldr	r3, [pc, #28]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065dc:	4903      	ldr	r1, [pc, #12]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80065e4:	e008      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065e6:	7cfb      	ldrb	r3, [r7, #19]
 80065e8:	74bb      	strb	r3, [r7, #18]
 80065ea:	e005      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80065ec:	40021000 	.word	0x40021000
 80065f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	7cfb      	ldrb	r3, [r7, #19]
 80065f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065f8:	7c7b      	ldrb	r3, [r7, #17]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d105      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065fe:	4ba7      	ldr	r3, [pc, #668]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006602:	4aa6      	ldr	r2, [pc, #664]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006608:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006616:	4ba1      	ldr	r3, [pc, #644]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661c:	f023 0203 	bic.w	r2, r3, #3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	499d      	ldr	r1, [pc, #628]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00a      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006638:	4b98      	ldr	r3, [pc, #608]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	f023 020c 	bic.w	r2, r3, #12
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	4995      	ldr	r1, [pc, #596]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800665a:	4b90      	ldr	r3, [pc, #576]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006660:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	498c      	ldr	r1, [pc, #560]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800667c:	4b87      	ldr	r3, [pc, #540]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006682:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	4984      	ldr	r1, [pc, #528]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800669e:	4b7f      	ldr	r3, [pc, #508]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	497b      	ldr	r1, [pc, #492]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066c0:	4b76      	ldr	r3, [pc, #472]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	4973      	ldr	r1, [pc, #460]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066e2:	4b6e      	ldr	r3, [pc, #440]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	496a      	ldr	r1, [pc, #424]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006704:	4b65      	ldr	r3, [pc, #404]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	4962      	ldr	r1, [pc, #392]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006726:	4b5d      	ldr	r3, [pc, #372]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	4959      	ldr	r1, [pc, #356]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006748:	4b54      	ldr	r3, [pc, #336]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800674e:	f023 0203 	bic.w	r2, r3, #3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006756:	4951      	ldr	r1, [pc, #324]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800676a:	4b4c      	ldr	r3, [pc, #304]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006770:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	4948      	ldr	r1, [pc, #288]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006788:	2b00      	cmp	r3, #0
 800678a:	d015      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800678c:	4b43      	ldr	r3, [pc, #268]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006792:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	4940      	ldr	r1, [pc, #256]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067aa:	d105      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067ac:	4b3b      	ldr	r3, [pc, #236]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	4a3a      	ldr	r2, [pc, #232]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d015      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067c4:	4b35      	ldr	r3, [pc, #212]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d2:	4932      	ldr	r1, [pc, #200]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067e2:	d105      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067e4:	4b2d      	ldr	r3, [pc, #180]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	4a2c      	ldr	r2, [pc, #176]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d015      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067fc:	4b27      	ldr	r3, [pc, #156]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006802:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	4924      	ldr	r1, [pc, #144]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800681a:	d105      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800681c:	4b1f      	ldr	r3, [pc, #124]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	4a1e      	ldr	r2, [pc, #120]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006826:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d015      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	4916      	ldr	r1, [pc, #88]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006852:	d105      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006854:	4b11      	ldr	r3, [pc, #68]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4a10      	ldr	r2, [pc, #64]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800685e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d019      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	4908      	ldr	r1, [pc, #32]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800688a:	d109      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800688c:	4b03      	ldr	r3, [pc, #12]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	4a02      	ldr	r2, [pc, #8]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006896:	60d3      	str	r3, [r2, #12]
 8006898:	e002      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800689a:	bf00      	nop
 800689c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d015      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068ac:	4b29      	ldr	r3, [pc, #164]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ba:	4926      	ldr	r1, [pc, #152]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068ca:	d105      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068cc:	4b21      	ldr	r3, [pc, #132]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	4a20      	ldr	r2, [pc, #128]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d015      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80068e4:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f2:	4918      	ldr	r1, [pc, #96]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006902:	d105      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006904:	4b13      	ldr	r3, [pc, #76]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	4a12      	ldr	r2, [pc, #72]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800690a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800690e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d015      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800691c:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800691e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692a:	490a      	ldr	r1, [pc, #40]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800693a:	d105      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	4a04      	ldr	r2, [pc, #16]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006946:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006948:	7cbb      	ldrb	r3, [r7, #18]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40021000 	.word	0x40021000

08006958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e042      	b.n	80069f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006970:	2b00      	cmp	r3, #0
 8006972:	d106      	bne.n	8006982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f83b 	bl	80069f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2224      	movs	r2, #36	; 0x24
 8006986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f9a0 	bl	8006ce0 <UART_SetConfig>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e022      	b.n	80069f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fc90 	bl	80072d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fd17 	bl	800741c <UART_CheckIdleState>
 80069ee:	4603      	mov	r3, r0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a22:	2b20      	cmp	r3, #32
 8006a24:	f040 8083 	bne.w	8006b2e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_UART_Transmit+0x28>
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e07b      	b.n	8006b30 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_UART_Transmit+0x3a>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e074      	b.n	8006b30 <HAL_UART_Transmit+0x124>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2221      	movs	r2, #33	; 0x21
 8006a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a5e:	f7fd fceb 	bl	8004438 <HAL_GetTick>
 8006a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	88fa      	ldrh	r2, [r7, #6]
 8006a68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7c:	d108      	bne.n	8006a90 <HAL_UART_Transmit+0x84>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	e003      	b.n	8006a98 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006aa0:	e02c      	b.n	8006afc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 fd00 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e039      	b.n	8006b30 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e007      	b.n	8006aea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1cc      	bne.n	8006aa2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2140      	movs	r1, #64	; 0x40
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fccd 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e006      	b.n	8006b30 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e000      	b.n	8006b30 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006b2e:	2302      	movs	r3, #2
  }
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08a      	sub	sp, #40	; 0x28
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	4613      	mov	r3, r2
 8006b46:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	f040 80c0 	bne.w	8006cd4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <HAL_UART_Receive+0x28>
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0b8      	b.n	8006cd6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_UART_Receive+0x3a>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e0b1      	b.n	8006cd6 <HAL_UART_Receive+0x19e>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2222      	movs	r2, #34	; 0x22
 8006b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b90:	f7fd fc52 	bl	8004438 <HAL_GetTick>
 8006b94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	88fa      	ldrh	r2, [r7, #6]
 8006b9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	88fa      	ldrh	r2, [r7, #6]
 8006ba2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bae:	d10e      	bne.n	8006bce <HAL_UART_Receive+0x96>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d105      	bne.n	8006bc4 <HAL_UART_Receive+0x8c>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006bbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bc2:	e02d      	b.n	8006c20 <HAL_UART_Receive+0xe8>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	22ff      	movs	r2, #255	; 0xff
 8006bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bcc:	e028      	b.n	8006c20 <HAL_UART_Receive+0xe8>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10d      	bne.n	8006bf2 <HAL_UART_Receive+0xba>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d104      	bne.n	8006be8 <HAL_UART_Receive+0xb0>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	22ff      	movs	r2, #255	; 0xff
 8006be2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006be6:	e01b      	b.n	8006c20 <HAL_UART_Receive+0xe8>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	227f      	movs	r2, #127	; 0x7f
 8006bec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bf0:	e016      	b.n	8006c20 <HAL_UART_Receive+0xe8>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bfa:	d10d      	bne.n	8006c18 <HAL_UART_Receive+0xe0>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <HAL_UART_Receive+0xd6>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	227f      	movs	r2, #127	; 0x7f
 8006c08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c0c:	e008      	b.n	8006c20 <HAL_UART_Receive+0xe8>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	223f      	movs	r2, #63	; 0x3f
 8006c12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c16:	e003      	b.n	8006c20 <HAL_UART_Receive+0xe8>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c26:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c30:	d108      	bne.n	8006c44 <HAL_UART_Receive+0x10c>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d104      	bne.n	8006c44 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	e003      	b.n	8006c4c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006c54:	e032      	b.n	8006cbc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2120      	movs	r1, #32
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fc26 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e032      	b.n	8006cd6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10c      	bne.n	8006c90 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	8a7b      	ldrh	r3, [r7, #18]
 8006c80:	4013      	ands	r3, r2
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	3302      	adds	r3, #2
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	e00c      	b.n	8006caa <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	8a7b      	ldrh	r3, [r7, #18]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1c6      	bne.n	8006c56 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3720      	adds	r7, #32
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ce4:	b08c      	sub	sp, #48	; 0x30
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4baa      	ldr	r3, [pc, #680]	; (8006fb8 <UART_SetConfig+0x2d8>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a9f      	ldr	r2, [pc, #636]	; (8006fbc <UART_SetConfig+0x2dc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d004      	beq.n	8006d4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f023 010f 	bic.w	r1, r3, #15
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a90      	ldr	r2, [pc, #576]	; (8006fc0 <UART_SetConfig+0x2e0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d125      	bne.n	8006dd0 <UART_SetConfig+0xf0>
 8006d84:	4b8f      	ldr	r3, [pc, #572]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d81a      	bhi.n	8006dc8 <UART_SetConfig+0xe8>
 8006d92:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0xb8>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006da9 	.word	0x08006da9
 8006d9c:	08006db9 	.word	0x08006db9
 8006da0:	08006db1 	.word	0x08006db1
 8006da4:	08006dc1 	.word	0x08006dc1
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dae:	e116      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006db0:	2302      	movs	r3, #2
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db6:	e112      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006db8:	2304      	movs	r3, #4
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dbe:	e10e      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc6:	e10a      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dce:	e106      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a7c      	ldr	r2, [pc, #496]	; (8006fc8 <UART_SetConfig+0x2e8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d138      	bne.n	8006e4c <UART_SetConfig+0x16c>
 8006dda:	4b7a      	ldr	r3, [pc, #488]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	2b0c      	cmp	r3, #12
 8006de6:	d82d      	bhi.n	8006e44 <UART_SetConfig+0x164>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <UART_SetConfig+0x110>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e25 	.word	0x08006e25
 8006df4:	08006e45 	.word	0x08006e45
 8006df8:	08006e45 	.word	0x08006e45
 8006dfc:	08006e45 	.word	0x08006e45
 8006e00:	08006e35 	.word	0x08006e35
 8006e04:	08006e45 	.word	0x08006e45
 8006e08:	08006e45 	.word	0x08006e45
 8006e0c:	08006e45 	.word	0x08006e45
 8006e10:	08006e2d 	.word	0x08006e2d
 8006e14:	08006e45 	.word	0x08006e45
 8006e18:	08006e45 	.word	0x08006e45
 8006e1c:	08006e45 	.word	0x08006e45
 8006e20:	08006e3d 	.word	0x08006e3d
 8006e24:	2300      	movs	r3, #0
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e2a:	e0d8      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e32:	e0d4      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e34:	2304      	movs	r3, #4
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e3a:	e0d0      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e42:	e0cc      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e44:	2310      	movs	r3, #16
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4a:	e0c8      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a5e      	ldr	r2, [pc, #376]	; (8006fcc <UART_SetConfig+0x2ec>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d125      	bne.n	8006ea2 <UART_SetConfig+0x1c2>
 8006e56:	4b5b      	ldr	r3, [pc, #364]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e60:	2b30      	cmp	r3, #48	; 0x30
 8006e62:	d016      	beq.n	8006e92 <UART_SetConfig+0x1b2>
 8006e64:	2b30      	cmp	r3, #48	; 0x30
 8006e66:	d818      	bhi.n	8006e9a <UART_SetConfig+0x1ba>
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d00a      	beq.n	8006e82 <UART_SetConfig+0x1a2>
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d814      	bhi.n	8006e9a <UART_SetConfig+0x1ba>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <UART_SetConfig+0x19a>
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d008      	beq.n	8006e8a <UART_SetConfig+0x1aa>
 8006e78:	e00f      	b.n	8006e9a <UART_SetConfig+0x1ba>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e80:	e0ad      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e82:	2302      	movs	r3, #2
 8006e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e88:	e0a9      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e8a:	2304      	movs	r3, #4
 8006e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e90:	e0a5      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e92:	2308      	movs	r3, #8
 8006e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e98:	e0a1      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006e9a:	2310      	movs	r3, #16
 8006e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea0:	e09d      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a4a      	ldr	r2, [pc, #296]	; (8006fd0 <UART_SetConfig+0x2f0>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d125      	bne.n	8006ef8 <UART_SetConfig+0x218>
 8006eac:	4b45      	ldr	r3, [pc, #276]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb8:	d016      	beq.n	8006ee8 <UART_SetConfig+0x208>
 8006eba:	2bc0      	cmp	r3, #192	; 0xc0
 8006ebc:	d818      	bhi.n	8006ef0 <UART_SetConfig+0x210>
 8006ebe:	2b80      	cmp	r3, #128	; 0x80
 8006ec0:	d00a      	beq.n	8006ed8 <UART_SetConfig+0x1f8>
 8006ec2:	2b80      	cmp	r3, #128	; 0x80
 8006ec4:	d814      	bhi.n	8006ef0 <UART_SetConfig+0x210>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <UART_SetConfig+0x1f0>
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d008      	beq.n	8006ee0 <UART_SetConfig+0x200>
 8006ece:	e00f      	b.n	8006ef0 <UART_SetConfig+0x210>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed6:	e082      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ede:	e07e      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ee6:	e07a      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ee8:	2308      	movs	r3, #8
 8006eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eee:	e076      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ef0:	2310      	movs	r3, #16
 8006ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ef6:	e072      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a35      	ldr	r2, [pc, #212]	; (8006fd4 <UART_SetConfig+0x2f4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d12a      	bne.n	8006f58 <UART_SetConfig+0x278>
 8006f02:	4b30      	ldr	r3, [pc, #192]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f10:	d01a      	beq.n	8006f48 <UART_SetConfig+0x268>
 8006f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f16:	d81b      	bhi.n	8006f50 <UART_SetConfig+0x270>
 8006f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f1c:	d00c      	beq.n	8006f38 <UART_SetConfig+0x258>
 8006f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f22:	d815      	bhi.n	8006f50 <UART_SetConfig+0x270>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <UART_SetConfig+0x250>
 8006f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2c:	d008      	beq.n	8006f40 <UART_SetConfig+0x260>
 8006f2e:	e00f      	b.n	8006f50 <UART_SetConfig+0x270>
 8006f30:	2300      	movs	r3, #0
 8006f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f36:	e052      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f3e:	e04e      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f46:	e04a      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f4e:	e046      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f56:	e042      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <UART_SetConfig+0x2dc>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d13a      	bne.n	8006fd8 <UART_SetConfig+0x2f8>
 8006f62:	4b18      	ldr	r3, [pc, #96]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f70:	d01a      	beq.n	8006fa8 <UART_SetConfig+0x2c8>
 8006f72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f76:	d81b      	bhi.n	8006fb0 <UART_SetConfig+0x2d0>
 8006f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f7c:	d00c      	beq.n	8006f98 <UART_SetConfig+0x2b8>
 8006f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f82:	d815      	bhi.n	8006fb0 <UART_SetConfig+0x2d0>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <UART_SetConfig+0x2b0>
 8006f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8c:	d008      	beq.n	8006fa0 <UART_SetConfig+0x2c0>
 8006f8e:	e00f      	b.n	8006fb0 <UART_SetConfig+0x2d0>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f96:	e022      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f9e:	e01e      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fa6:	e01a      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fae:	e016      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb6:	e012      	b.n	8006fde <UART_SetConfig+0x2fe>
 8006fb8:	cfff69f3 	.word	0xcfff69f3
 8006fbc:	40008000 	.word	0x40008000
 8006fc0:	40013800 	.word	0x40013800
 8006fc4:	40021000 	.word	0x40021000
 8006fc8:	40004400 	.word	0x40004400
 8006fcc:	40004800 	.word	0x40004800
 8006fd0:	40004c00 	.word	0x40004c00
 8006fd4:	40005000 	.word	0x40005000
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4aae      	ldr	r2, [pc, #696]	; (800729c <UART_SetConfig+0x5bc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	f040 8097 	bne.w	8007118 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d823      	bhi.n	800703a <UART_SetConfig+0x35a>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <UART_SetConfig+0x318>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	0800703b 	.word	0x0800703b
 8007000:	08007025 	.word	0x08007025
 8007004:	0800703b 	.word	0x0800703b
 8007008:	0800702b 	.word	0x0800702b
 800700c:	0800703b 	.word	0x0800703b
 8007010:	0800703b 	.word	0x0800703b
 8007014:	0800703b 	.word	0x0800703b
 8007018:	08007033 	.word	0x08007033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800701c:	f7ff f9dc 	bl	80063d8 <HAL_RCC_GetPCLK1Freq>
 8007020:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007022:	e010      	b.n	8007046 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007024:	4b9e      	ldr	r3, [pc, #632]	; (80072a0 <UART_SetConfig+0x5c0>)
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007028:	e00d      	b.n	8007046 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800702a:	f7ff f967 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 800702e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007030:	e009      	b.n	8007046 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007038:	e005      	b.n	8007046 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007044:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8130 	beq.w	80072ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	4a94      	ldr	r2, [pc, #592]	; (80072a4 <UART_SetConfig+0x5c4>)
 8007054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007058:	461a      	mov	r2, r3
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007060:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4413      	add	r3, r2
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	429a      	cmp	r2, r3
 8007070:	d305      	bcc.n	800707e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	429a      	cmp	r2, r3
 800707c:	d903      	bls.n	8007086 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007084:	e113      	b.n	80072ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	2200      	movs	r2, #0
 800708a:	60bb      	str	r3, [r7, #8]
 800708c:	60fa      	str	r2, [r7, #12]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	4a84      	ldr	r2, [pc, #528]	; (80072a4 <UART_SetConfig+0x5c4>)
 8007094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007098:	b29b      	uxth	r3, r3
 800709a:	2200      	movs	r2, #0
 800709c:	603b      	str	r3, [r7, #0]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070a8:	f7f9 f90a 	bl	80002c0 <__aeabi_uldivmod>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4610      	mov	r0, r2
 80070b2:	4619      	mov	r1, r3
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	020b      	lsls	r3, r1, #8
 80070be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070c2:	0202      	lsls	r2, r0, #8
 80070c4:	6979      	ldr	r1, [r7, #20]
 80070c6:	6849      	ldr	r1, [r1, #4]
 80070c8:	0849      	lsrs	r1, r1, #1
 80070ca:	2000      	movs	r0, #0
 80070cc:	460c      	mov	r4, r1
 80070ce:	4605      	mov	r5, r0
 80070d0:	eb12 0804 	adds.w	r8, r2, r4
 80070d4:	eb43 0905 	adc.w	r9, r3, r5
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	469a      	mov	sl, r3
 80070e0:	4693      	mov	fp, r2
 80070e2:	4652      	mov	r2, sl
 80070e4:	465b      	mov	r3, fp
 80070e6:	4640      	mov	r0, r8
 80070e8:	4649      	mov	r1, r9
 80070ea:	f7f9 f8e9 	bl	80002c0 <__aeabi_uldivmod>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4613      	mov	r3, r2
 80070f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070fc:	d308      	bcc.n	8007110 <UART_SetConfig+0x430>
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007104:	d204      	bcs.n	8007110 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6a3a      	ldr	r2, [r7, #32]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	e0ce      	b.n	80072ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007116:	e0ca      	b.n	80072ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007120:	d166      	bne.n	80071f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007126:	2b08      	cmp	r3, #8
 8007128:	d827      	bhi.n	800717a <UART_SetConfig+0x49a>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <UART_SetConfig+0x450>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007155 	.word	0x08007155
 8007134:	0800715d 	.word	0x0800715d
 8007138:	08007165 	.word	0x08007165
 800713c:	0800717b 	.word	0x0800717b
 8007140:	0800716b 	.word	0x0800716b
 8007144:	0800717b 	.word	0x0800717b
 8007148:	0800717b 	.word	0x0800717b
 800714c:	0800717b 	.word	0x0800717b
 8007150:	08007173 	.word	0x08007173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007154:	f7ff f940 	bl	80063d8 <HAL_RCC_GetPCLK1Freq>
 8007158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800715a:	e014      	b.n	8007186 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800715c:	f7ff f952 	bl	8006404 <HAL_RCC_GetPCLK2Freq>
 8007160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007162:	e010      	b.n	8007186 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007164:	4b4e      	ldr	r3, [pc, #312]	; (80072a0 <UART_SetConfig+0x5c0>)
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007168:	e00d      	b.n	8007186 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800716a:	f7ff f8c7 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 800716e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007170:	e009      	b.n	8007186 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007178:	e005      	b.n	8007186 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8090 	beq.w	80072ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	4a44      	ldr	r2, [pc, #272]	; (80072a4 <UART_SetConfig+0x5c4>)
 8007194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007198:	461a      	mov	r2, r3
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a0:	005a      	lsls	r2, r3, #1
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	085b      	lsrs	r3, r3, #1
 80071a8:	441a      	add	r2, r3
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	d916      	bls.n	80071e8 <UART_SetConfig+0x508>
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c0:	d212      	bcs.n	80071e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f023 030f 	bic.w	r3, r3, #15
 80071ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	085b      	lsrs	r3, r3, #1
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	8bfb      	ldrh	r3, [r7, #30]
 80071da:	4313      	orrs	r3, r2
 80071dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	8bfa      	ldrh	r2, [r7, #30]
 80071e4:	60da      	str	r2, [r3, #12]
 80071e6:	e062      	b.n	80072ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071ee:	e05e      	b.n	80072ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d828      	bhi.n	800724a <UART_SetConfig+0x56a>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <UART_SetConfig+0x520>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	08007225 	.word	0x08007225
 8007204:	0800722d 	.word	0x0800722d
 8007208:	08007235 	.word	0x08007235
 800720c:	0800724b 	.word	0x0800724b
 8007210:	0800723b 	.word	0x0800723b
 8007214:	0800724b 	.word	0x0800724b
 8007218:	0800724b 	.word	0x0800724b
 800721c:	0800724b 	.word	0x0800724b
 8007220:	08007243 	.word	0x08007243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007224:	f7ff f8d8 	bl	80063d8 <HAL_RCC_GetPCLK1Freq>
 8007228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800722a:	e014      	b.n	8007256 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800722c:	f7ff f8ea 	bl	8006404 <HAL_RCC_GetPCLK2Freq>
 8007230:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007232:	e010      	b.n	8007256 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007234:	4b1a      	ldr	r3, [pc, #104]	; (80072a0 <UART_SetConfig+0x5c0>)
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007238:	e00d      	b.n	8007256 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723a:	f7ff f85f 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 800723e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007240:	e009      	b.n	8007256 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007248:	e005      	b.n	8007256 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007254:	bf00      	nop
    }

    if (pclk != 0U)
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	d028      	beq.n	80072ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	4a10      	ldr	r2, [pc, #64]	; (80072a4 <UART_SetConfig+0x5c4>)
 8007262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007266:	461a      	mov	r2, r3
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	fbb3 f2f2 	udiv	r2, r3, r2
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	441a      	add	r2, r3
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	fbb2 f3f3 	udiv	r3, r2, r3
 800727e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	2b0f      	cmp	r3, #15
 8007284:	d910      	bls.n	80072a8 <UART_SetConfig+0x5c8>
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800728c:	d20c      	bcs.n	80072a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	b29a      	uxth	r2, r3
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60da      	str	r2, [r3, #12]
 8007298:	e009      	b.n	80072ae <UART_SetConfig+0x5ce>
 800729a:	bf00      	nop
 800729c:	40008000 	.word	0x40008000
 80072a0:	00f42400 	.word	0x00f42400
 80072a4:	0801e51c 	.word	0x0801e51c
      }
      else
      {
        ret = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2200      	movs	r2, #0
 80072c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80072ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3730      	adds	r7, #48	; 0x30
 80072d2:	46bd      	mov	sp, r7
 80072d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080072d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f003 0310 	and.w	r3, r3, #16
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01a      	beq.n	80073ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d6:	d10a      	bne.n	80073ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	605a      	str	r2, [r3, #4]
  }
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af02      	add	r7, sp, #8
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800742c:	f7fd f804 	bl	8004438 <HAL_GetTick>
 8007430:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b08      	cmp	r3, #8
 800743e:	d10e      	bne.n	800745e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f82f 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e025      	b.n	80074aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b04      	cmp	r3, #4
 800746a:	d10e      	bne.n	800748a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800746c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f819 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e00f      	b.n	80074aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b09c      	sub	sp, #112	; 0x70
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c2:	e0a9      	b.n	8007618 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	f000 80a5 	beq.w	8007618 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ce:	f7fc ffb3 	bl	8004438 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074da:	429a      	cmp	r2, r3
 80074dc:	d302      	bcc.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80074de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d140      	bne.n	8007566 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074f8:	667b      	str	r3, [r7, #100]	; 0x64
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007504:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e6      	bne.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	663b      	str	r3, [r7, #96]	; 0x60
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007536:	64ba      	str	r2, [r7, #72]	; 0x48
 8007538:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800753c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e5      	bne.n	8007516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2220      	movs	r2, #32
 8007556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e069      	b.n	800763a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d051      	beq.n	8007618 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800757e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007582:	d149      	bne.n	8007618 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800758c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
 80075ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e6      	bne.n	800758e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3308      	adds	r3, #8
 80075c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	613b      	str	r3, [r7, #16]
   return(result);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f023 0301 	bic.w	r3, r3, #1
 80075d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3308      	adds	r3, #8
 80075de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075e0:	623a      	str	r2, [r7, #32]
 80075e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	69f9      	ldr	r1, [r7, #28]
 80075e6:	6a3a      	ldr	r2, [r7, #32]
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e5      	bne.n	80075c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e010      	b.n	800763a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69da      	ldr	r2, [r3, #28]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	4013      	ands	r3, r2
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	429a      	cmp	r2, r3
 8007626:	bf0c      	ite	eq
 8007628:	2301      	moveq	r3, #1
 800762a:	2300      	movne	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	429a      	cmp	r2, r3
 8007634:	f43f af46 	beq.w	80074c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3770      	adds	r7, #112	; 0x70
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_UARTEx_DisableFifoMode+0x16>
 8007654:	2302      	movs	r3, #2
 8007656:	e027      	b.n	80076a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2224      	movs	r2, #36	; 0x24
 8007664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0201 	bic.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007686:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e02d      	b.n	8007728 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2224      	movs	r2, #36	; 0x24
 80076d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 0201 	bic.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f84f 	bl	80077ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007740:	2b01      	cmp	r3, #1
 8007742:	d101      	bne.n	8007748 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007744:	2302      	movs	r3, #2
 8007746:	e02d      	b.n	80077a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2224      	movs	r2, #36	; 0x24
 8007754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0201 	bic.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f811 	bl	80077ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d108      	bne.n	80077ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077cc:	e031      	b.n	8007832 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077ce:	2308      	movs	r3, #8
 80077d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077d2:	2308      	movs	r3, #8
 80077d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	0e5b      	lsrs	r3, r3, #25
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	0f5b      	lsrs	r3, r3, #29
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	7b3a      	ldrb	r2, [r7, #12]
 80077fa:	4911      	ldr	r1, [pc, #68]	; (8007840 <UARTEx_SetNbDataToProcess+0x94>)
 80077fc:	5c8a      	ldrb	r2, [r1, r2]
 80077fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007802:	7b3a      	ldrb	r2, [r7, #12]
 8007804:	490f      	ldr	r1, [pc, #60]	; (8007844 <UARTEx_SetNbDataToProcess+0x98>)
 8007806:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007808:	fb93 f3f2 	sdiv	r3, r3, r2
 800780c:	b29a      	uxth	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	7b7a      	ldrb	r2, [r7, #13]
 8007818:	4909      	ldr	r1, [pc, #36]	; (8007840 <UARTEx_SetNbDataToProcess+0x94>)
 800781a:	5c8a      	ldrb	r2, [r1, r2]
 800781c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007820:	7b7a      	ldrb	r2, [r7, #13]
 8007822:	4908      	ldr	r1, [pc, #32]	; (8007844 <UARTEx_SetNbDataToProcess+0x98>)
 8007824:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007826:	fb93 f3f2 	sdiv	r3, r3, r2
 800782a:	b29a      	uxth	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	0801e534 	.word	0x0801e534
 8007844:	0801e53c 	.word	0x0801e53c

08007848 <MX_TOF_Init>:
static uint8_t get_key(void);
static uint32_t com_has_data(void);
static void print_result_simplified(RANGING_SENSOR_Result_t *Result);//Qawiy Written

void MX_TOF_Init(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L7A1_SimpleRanging_Init();
 800784c:	f000 f808 	bl	8007860 <MX_53L7A1_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8007850:	bf00      	nop
 8007852:	bd80      	pop	{r7, pc}

08007854 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L7A1_SimpleRanging_Process();
 8007858:	f000 f824 	bl	80078a4 <MX_53L7A1_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 800785c:	bf00      	nop
 800785e:	bd80      	pop	{r7, pc}

08007860 <MX_53L7A1_SimpleRanging_Init>:

static void MX_53L7A1_SimpleRanging_Init(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8007864:	2000      	movs	r0, #0
 8007866:	f7fc fc83 	bl	8004170 <BSP_COM_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800786a:	2101      	movs	r1, #1
 800786c:	2000      	movs	r0, #0
 800786e:	f7fc fbe9 	bl	8004044 <BSP_PB_Init>

  status = VL53L7A1_RANGING_SENSOR_Init(VL53L7A1_DEV_CENTER);
 8007872:	2001      	movs	r0, #1
 8007874:	f7f9 fa6d 	bl	8000d52 <VL53L7A1_RANGING_SENSOR_Init>
 8007878:	4603      	mov	r3, r0
 800787a:	4a07      	ldr	r2, [pc, #28]	; (8007898 <MX_53L7A1_SimpleRanging_Init+0x38>)
 800787c:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 800787e:	4b06      	ldr	r3, [pc, #24]	; (8007898 <MX_53L7A1_SimpleRanging_Init+0x38>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d006      	beq.n	8007894 <MX_53L7A1_SimpleRanging_Init+0x34>
  {
    printf("VL53L7A1_RANGING_SENSOR_Init failed\n");
 8007886:	4805      	ldr	r0, [pc, #20]	; (800789c <MX_53L7A1_SimpleRanging_Init+0x3c>)
 8007888:	f000 fa74 	bl	8007d74 <puts>
    printf("Check you're using ONLY the center device soldered on the shield, NO satellite shall be connected !\n");
 800788c:	4804      	ldr	r0, [pc, #16]	; (80078a0 <MX_53L7A1_SimpleRanging_Init+0x40>)
 800788e:	f000 fa71 	bl	8007d74 <puts>
    while (1);
 8007892:	e7fe      	b.n	8007892 <MX_53L7A1_SimpleRanging_Init+0x32>
  }
}
 8007894:	bf00      	nop
 8007896:	bd80      	pop	{r7, pc}
 8007898:	200029d4 	.word	0x200029d4
 800789c:	08008b54 	.word	0x08008b54
 80078a0:	08008b78 	.word	0x08008b78

080078a4 <MX_53L7A1_SimpleRanging_Process>:

static void MX_53L7A1_SimpleRanging_Process(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
  uint32_t Id;

  VL53L7A1_RANGING_SENSOR_ReadID(VL53L7A1_DEV_CENTER, &Id);
 80078aa:	1d3b      	adds	r3, r7, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	2001      	movs	r0, #1
 80078b0:	f7f9 fa64 	bl	8000d7c <VL53L7A1_RANGING_SENSOR_ReadID>
  VL53L7A1_RANGING_SENSOR_GetCapabilities(VL53L7A1_DEV_CENTER, &Cap);
 80078b4:	4921      	ldr	r1, [pc, #132]	; (800793c <MX_53L7A1_SimpleRanging_Process+0x98>)
 80078b6:	2001      	movs	r0, #1
 80078b8:	f7f9 fa88 	bl	8000dcc <VL53L7A1_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 80078bc:	4b20      	ldr	r3, [pc, #128]	; (8007940 <MX_53L7A1_SimpleRanging_Process+0x9c>)
 80078be:	2203      	movs	r2, #3
 80078c0:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 5 ms < TimingBudget < 100 ms */
 80078c2:	4b1f      	ldr	r3, [pc, #124]	; (8007940 <MX_53L7A1_SimpleRanging_Process+0x9c>)
 80078c4:	221e      	movs	r2, #30
 80078c6:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 80078c8:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <MX_53L7A1_SimpleRanging_Process+0x9c>)
 80078ca:	2205      	movs	r2, #5
 80078cc:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 80078ce:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <MX_53L7A1_SimpleRanging_Process+0x9c>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 80078d4:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <MX_53L7A1_SimpleRanging_Process+0x9c>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L7A1_RANGING_SENSOR_ConfigProfile(VL53L7A1_DEV_CENTER, &Profile);
 80078da:	4919      	ldr	r1, [pc, #100]	; (8007940 <MX_53L7A1_SimpleRanging_Process+0x9c>)
 80078dc:	2001      	movs	r0, #1
 80078de:	f7f9 fa9d 	bl	8000e1c <VL53L7A1_RANGING_SENSOR_ConfigProfile>

  status = VL53L7A1_RANGING_SENSOR_Start(VL53L7A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 80078e2:	2101      	movs	r1, #1
 80078e4:	2001      	movs	r0, #1
 80078e6:	f7f9 fae9 	bl	8000ebc <VL53L7A1_RANGING_SENSOR_Start>
 80078ea:	4603      	mov	r3, r0
 80078ec:	4a15      	ldr	r2, [pc, #84]	; (8007944 <MX_53L7A1_SimpleRanging_Process+0xa0>)
 80078ee:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 80078f0:	4b14      	ldr	r3, [pc, #80]	; (8007944 <MX_53L7A1_SimpleRanging_Process+0xa0>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <MX_53L7A1_SimpleRanging_Process+0x5c>
  {
    printf("VL53L7A1_RANGING_SENSOR_Start failed\n");
 80078f8:	4813      	ldr	r0, [pc, #76]	; (8007948 <MX_53L7A1_SimpleRanging_Process+0xa4>)
 80078fa:	f000 fa3b 	bl	8007d74 <puts>
    while (1);
 80078fe:	e7fe      	b.n	80078fe <MX_53L7A1_SimpleRanging_Process+0x5a>
  }

  while (1)
  {
    /* polling mode */
    status = VL53L7A1_RANGING_SENSOR_GetDistance(VL53L7A1_DEV_CENTER, &Result);
 8007900:	4912      	ldr	r1, [pc, #72]	; (800794c <MX_53L7A1_SimpleRanging_Process+0xa8>)
 8007902:	2001      	movs	r0, #1
 8007904:	f7f9 fab2 	bl	8000e6c <VL53L7A1_RANGING_SENSOR_GetDistance>
 8007908:	4603      	mov	r3, r0
 800790a:	4a0e      	ldr	r2, [pc, #56]	; (8007944 <MX_53L7A1_SimpleRanging_Process+0xa0>)
 800790c:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 800790e:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <MX_53L7A1_SimpleRanging_Process+0xa0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d102      	bne.n	800791c <MX_53L7A1_SimpleRanging_Process+0x78>
    {
    	print_result_simplified(&Result);
 8007916:	480d      	ldr	r0, [pc, #52]	; (800794c <MX_53L7A1_SimpleRanging_Process+0xa8>)
 8007918:	f000 f81a 	bl	8007950 <print_result_simplified>
    	//print_result(&Result);
    }

    if (com_has_data())
 800791c:	f000 f8d4 	bl	8007ac8 <com_has_data>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <MX_53L7A1_SimpleRanging_Process+0x8e>
    {
      handle_cmd(get_key());
 8007926:	f000 f8bb 	bl	8007aa0 <get_key>
 800792a:	4603      	mov	r3, r0
 800792c:	4618      	mov	r0, r3
 800792e:	f000 f897 	bl	8007a60 <handle_cmd>
    }

    HAL_Delay(POLLING_PERIOD);
 8007932:	20c8      	movs	r0, #200	; 0xc8
 8007934:	f7fc fd8c 	bl	8004450 <HAL_Delay>
    status = VL53L7A1_RANGING_SENSOR_GetDistance(VL53L7A1_DEV_CENTER, &Result);
 8007938:	e7e2      	b.n	8007900 <MX_53L7A1_SimpleRanging_Process+0x5c>
 800793a:	bf00      	nop
 800793c:	200024ac 	.word	0x200024ac
 8007940:	200024bc 	.word	0x200024bc
 8007944:	200029d4 	.word	0x200029d4
 8007948:	08008bdc 	.word	0x08008bdc
 800794c:	200024d0 	.word	0x200024d0

08007950 <print_result_simplified>:
  }
}

static void print_result_simplified(RANGING_SENSOR_Result_t *Result)//Qawiy Written
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	for(int i=0;i<64;i++)
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	e00f      	b.n	800797e <print_result_simplified+0x2e>
	{
		printf("%04ld",Result->ZoneResult[i].Distance[0]);
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	3308      	adds	r3, #8
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4619      	mov	r1, r3
 8007972:	4808      	ldr	r0, [pc, #32]	; (8007994 <print_result_simplified+0x44>)
 8007974:	f000 f990 	bl	8007c98 <iprintf>
	for(int i=0;i<64;i++)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b3f      	cmp	r3, #63	; 0x3f
 8007982:	ddec      	ble.n	800795e <print_result_simplified+0xe>
	}
	printf("\n");
 8007984:	200a      	movs	r0, #10
 8007986:	f000 f999 	bl	8007cbc <putchar>
//	printf("\n");
	//find size of array
//	uint32_t soize=(sizeof(Result->ZoneResult)/sizeof(Result->ZoneResult[0]));
//	printf("size %d\n",soize);

}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	08008c04 	.word	0x08008c04

08007998 <toggle_resolution>:
    printf(" -----------------");
  printf("\n");
}

static void toggle_resolution(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  VL53L7A1_RANGING_SENSOR_Stop(VL53L7A1_DEV_CENTER);
 800799c:	2001      	movs	r0, #1
 800799e:	f7f9 fab5 	bl	8000f0c <VL53L7A1_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 80079a2:	4b16      	ldr	r3, [pc, #88]	; (80079fc <toggle_resolution+0x64>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d81b      	bhi.n	80079e4 <toggle_resolution+0x4c>
 80079ac:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <toggle_resolution+0x1c>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079cd 	.word	0x080079cd
 80079b8:	080079c5 	.word	0x080079c5
 80079bc:	080079dd 	.word	0x080079dd
 80079c0:	080079d5 	.word	0x080079d5
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 80079c4:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <toggle_resolution+0x64>)
 80079c6:	2204      	movs	r2, #4
 80079c8:	601a      	str	r2, [r3, #0]
      break;
 80079ca:	e00c      	b.n	80079e6 <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 80079cc:	4b0b      	ldr	r3, [pc, #44]	; (80079fc <toggle_resolution+0x64>)
 80079ce:	2203      	movs	r2, #3
 80079d0:	601a      	str	r2, [r3, #0]
      break;
 80079d2:	e008      	b.n	80079e6 <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 80079d4:	4b09      	ldr	r3, [pc, #36]	; (80079fc <toggle_resolution+0x64>)
 80079d6:	2202      	movs	r2, #2
 80079d8:	601a      	str	r2, [r3, #0]
      break;
 80079da:	e004      	b.n	80079e6 <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 80079dc:	4b07      	ldr	r3, [pc, #28]	; (80079fc <toggle_resolution+0x64>)
 80079de:	2201      	movs	r2, #1
 80079e0:	601a      	str	r2, [r3, #0]
      break;
 80079e2:	e000      	b.n	80079e6 <toggle_resolution+0x4e>

    default:
      break;
 80079e4:	bf00      	nop
  }

  VL53L7A1_RANGING_SENSOR_ConfigProfile(VL53L7A1_DEV_CENTER, &Profile);
 80079e6:	4905      	ldr	r1, [pc, #20]	; (80079fc <toggle_resolution+0x64>)
 80079e8:	2001      	movs	r0, #1
 80079ea:	f7f9 fa17 	bl	8000e1c <VL53L7A1_RANGING_SENSOR_ConfigProfile>
  VL53L7A1_RANGING_SENSOR_Start(VL53L7A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 80079ee:	2101      	movs	r1, #1
 80079f0:	2001      	movs	r0, #1
 80079f2:	f7f9 fa63 	bl	8000ebc <VL53L7A1_RANGING_SENSOR_Start>
}
 80079f6:	bf00      	nop
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	200024bc 	.word	0x200024bc

08007a00 <toggle_signal_and_ambient>:

static void toggle_signal_and_ambient(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  VL53L7A1_RANGING_SENSOR_Stop(VL53L7A1_DEV_CENTER);
 8007a04:	2001      	movs	r0, #1
 8007a06:	f7f9 fa81 	bl	8000f0c <VL53L7A1_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 8007a0a:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <toggle_signal_and_ambient+0x48>)
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bf0c      	ite	eq
 8007a12:	2301      	moveq	r3, #1
 8007a14:	2300      	movne	r3, #0
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <toggle_signal_and_ambient+0x48>)
 8007a1c:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <toggle_signal_and_ambient+0x48>)
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	bf0c      	ite	eq
 8007a26:	2301      	moveq	r3, #1
 8007a28:	2300      	movne	r3, #0
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <toggle_signal_and_ambient+0x48>)
 8007a30:	611a      	str	r2, [r3, #16]

  VL53L7A1_RANGING_SENSOR_ConfigProfile(VL53L7A1_DEV_CENTER, &Profile);
 8007a32:	4905      	ldr	r1, [pc, #20]	; (8007a48 <toggle_signal_and_ambient+0x48>)
 8007a34:	2001      	movs	r0, #1
 8007a36:	f7f9 f9f1 	bl	8000e1c <VL53L7A1_RANGING_SENSOR_ConfigProfile>
  VL53L7A1_RANGING_SENSOR_Start(VL53L7A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	f7f9 fa3d 	bl	8000ebc <VL53L7A1_RANGING_SENSOR_Start>
}
 8007a42:	bf00      	nop
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	200024bc 	.word	0x200024bc

08007a4c <clear_screen>:

static void clear_screen(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
  printf("%c[2J", 27); /* 27 is ESC command */
 8007a50:	211b      	movs	r1, #27
 8007a52:	4802      	ldr	r0, [pc, #8]	; (8007a5c <clear_screen+0x10>)
 8007a54:	f000 f920 	bl	8007c98 <iprintf>
}
 8007a58:	bf00      	nop
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	08008d14 	.word	0x08008d14

08007a60 <handle_cmd>:
  printf(" 'c' : clear screen\n");
  printf("\n");
}

static void handle_cmd(uint8_t cmd)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	2b73      	cmp	r3, #115	; 0x73
 8007a6e:	d00a      	beq.n	8007a86 <handle_cmd+0x26>
 8007a70:	2b73      	cmp	r3, #115	; 0x73
 8007a72:	dc10      	bgt.n	8007a96 <handle_cmd+0x36>
 8007a74:	2b63      	cmp	r3, #99	; 0x63
 8007a76:	d00b      	beq.n	8007a90 <handle_cmd+0x30>
 8007a78:	2b72      	cmp	r3, #114	; 0x72
 8007a7a:	d10c      	bne.n	8007a96 <handle_cmd+0x36>
  {
    case 'r':
      toggle_resolution();
 8007a7c:	f7ff ff8c 	bl	8007998 <toggle_resolution>
      clear_screen();
 8007a80:	f7ff ffe4 	bl	8007a4c <clear_screen>
      break;
 8007a84:	e008      	b.n	8007a98 <handle_cmd+0x38>

    case 's':
      toggle_signal_and_ambient();
 8007a86:	f7ff ffbb 	bl	8007a00 <toggle_signal_and_ambient>
      clear_screen();
 8007a8a:	f7ff ffdf 	bl	8007a4c <clear_screen>
      break;
 8007a8e:	e003      	b.n	8007a98 <handle_cmd+0x38>

    case 'c':
      clear_screen();
 8007a90:	f7ff ffdc 	bl	8007a4c <clear_screen>
      break;
 8007a94:	e000      	b.n	8007a98 <handle_cmd+0x38>

    default:
      break;
 8007a96:	bf00      	nop
  }
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <get_key>:

static uint8_t get_key(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 8007aaa:	1df9      	adds	r1, r7, #7
 8007aac:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	4804      	ldr	r0, [pc, #16]	; (8007ac4 <get_key+0x24>)
 8007ab4:	f7ff f840 	bl	8006b38 <HAL_UART_Receive>

  return cmd;
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20002414 	.word	0x20002414

08007ac8 <com_has_data>:

static uint32_t com_has_data(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 8007acc:	4b07      	ldr	r3, [pc, #28]	; (8007aec <com_has_data+0x24>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	bf0c      	ite	eq
 8007ada:	2301      	moveq	r3, #1
 8007adc:	2300      	movne	r3, #0
 8007ade:	b2db      	uxtb	r3, r3
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	20002414 	.word	0x20002414

08007af0 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8007afa:	4b04      	ldr	r3, [pc, #16]	; (8007b0c <BSP_PB_Callback+0x1c>)
 8007afc:	2201      	movs	r2, #1
 8007afe:	701a      	strb	r2, [r3, #0]
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	200029d8 	.word	0x200029d8

08007b10 <HAL_GPIO_EXTI_Callback>:
#include "app_tof_pin_conf.h"

extern volatile uint8_t ToF_EventDetected;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	2b10      	cmp	r3, #16
 8007b1e:	d102      	bne.n	8007b26 <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8007b20:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <HAL_GPIO_EXTI_Callback+0x24>)
 8007b22:	2201      	movs	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
  }
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	200029d9 	.word	0x200029d9

08007b38 <std>:
 8007b38:	2300      	movs	r3, #0
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b46:	6083      	str	r3, [r0, #8]
 8007b48:	8181      	strh	r1, [r0, #12]
 8007b4a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b4c:	81c2      	strh	r2, [r0, #14]
 8007b4e:	6183      	str	r3, [r0, #24]
 8007b50:	4619      	mov	r1, r3
 8007b52:	2208      	movs	r2, #8
 8007b54:	305c      	adds	r0, #92	; 0x5c
 8007b56:	f000 f9ed 	bl	8007f34 <memset>
 8007b5a:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <std+0x38>)
 8007b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b5e:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <std+0x3c>)
 8007b60:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <std+0x40>)
 8007b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <std+0x44>)
 8007b68:	6224      	str	r4, [r4, #32]
 8007b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b6c:	bd10      	pop	{r4, pc}
 8007b6e:	bf00      	nop
 8007b70:	08007d85 	.word	0x08007d85
 8007b74:	08007da7 	.word	0x08007da7
 8007b78:	08007ddf 	.word	0x08007ddf
 8007b7c:	08007e03 	.word	0x08007e03

08007b80 <stdio_exit_handler>:
 8007b80:	4a02      	ldr	r2, [pc, #8]	; (8007b8c <stdio_exit_handler+0xc>)
 8007b82:	4903      	ldr	r1, [pc, #12]	; (8007b90 <stdio_exit_handler+0x10>)
 8007b84:	4803      	ldr	r0, [pc, #12]	; (8007b94 <stdio_exit_handler+0x14>)
 8007b86:	f000 b869 	b.w	8007c5c <_fwalk_sglue>
 8007b8a:	bf00      	nop
 8007b8c:	20000050 	.word	0x20000050
 8007b90:	080088e9 	.word	0x080088e9
 8007b94:	2000005c 	.word	0x2000005c

08007b98 <cleanup_stdio>:
 8007b98:	6841      	ldr	r1, [r0, #4]
 8007b9a:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <cleanup_stdio+0x34>)
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	d001      	beq.n	8007ba8 <cleanup_stdio+0x10>
 8007ba4:	f000 fea0 	bl	80088e8 <_fflush_r>
 8007ba8:	68a1      	ldr	r1, [r4, #8]
 8007baa:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <cleanup_stdio+0x38>)
 8007bac:	4299      	cmp	r1, r3
 8007bae:	d002      	beq.n	8007bb6 <cleanup_stdio+0x1e>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fe99 	bl	80088e8 <_fflush_r>
 8007bb6:	68e1      	ldr	r1, [r4, #12]
 8007bb8:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <cleanup_stdio+0x3c>)
 8007bba:	4299      	cmp	r1, r3
 8007bbc:	d004      	beq.n	8007bc8 <cleanup_stdio+0x30>
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc4:	f000 be90 	b.w	80088e8 <_fflush_r>
 8007bc8:	bd10      	pop	{r4, pc}
 8007bca:	bf00      	nop
 8007bcc:	200029dc 	.word	0x200029dc
 8007bd0:	20002a44 	.word	0x20002a44
 8007bd4:	20002aac 	.word	0x20002aac

08007bd8 <global_stdio_init.part.0>:
 8007bd8:	b510      	push	{r4, lr}
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <global_stdio_init.part.0+0x30>)
 8007bdc:	4c0b      	ldr	r4, [pc, #44]	; (8007c0c <global_stdio_init.part.0+0x34>)
 8007bde:	4a0c      	ldr	r2, [pc, #48]	; (8007c10 <global_stdio_init.part.0+0x38>)
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	4620      	mov	r0, r4
 8007be4:	2200      	movs	r2, #0
 8007be6:	2104      	movs	r1, #4
 8007be8:	f7ff ffa6 	bl	8007b38 <std>
 8007bec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	2109      	movs	r1, #9
 8007bf4:	f7ff ffa0 	bl	8007b38 <std>
 8007bf8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c02:	2112      	movs	r1, #18
 8007c04:	f7ff bf98 	b.w	8007b38 <std>
 8007c08:	20002b14 	.word	0x20002b14
 8007c0c:	200029dc 	.word	0x200029dc
 8007c10:	08007b81 	.word	0x08007b81

08007c14 <__sfp_lock_acquire>:
 8007c14:	4801      	ldr	r0, [pc, #4]	; (8007c1c <__sfp_lock_acquire+0x8>)
 8007c16:	f000 ba05 	b.w	8008024 <__retarget_lock_acquire_recursive>
 8007c1a:	bf00      	nop
 8007c1c:	20002b1d 	.word	0x20002b1d

08007c20 <__sfp_lock_release>:
 8007c20:	4801      	ldr	r0, [pc, #4]	; (8007c28 <__sfp_lock_release+0x8>)
 8007c22:	f000 ba00 	b.w	8008026 <__retarget_lock_release_recursive>
 8007c26:	bf00      	nop
 8007c28:	20002b1d 	.word	0x20002b1d

08007c2c <__sinit>:
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	4604      	mov	r4, r0
 8007c30:	f7ff fff0 	bl	8007c14 <__sfp_lock_acquire>
 8007c34:	6a23      	ldr	r3, [r4, #32]
 8007c36:	b11b      	cbz	r3, 8007c40 <__sinit+0x14>
 8007c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c3c:	f7ff bff0 	b.w	8007c20 <__sfp_lock_release>
 8007c40:	4b04      	ldr	r3, [pc, #16]	; (8007c54 <__sinit+0x28>)
 8007c42:	6223      	str	r3, [r4, #32]
 8007c44:	4b04      	ldr	r3, [pc, #16]	; (8007c58 <__sinit+0x2c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f5      	bne.n	8007c38 <__sinit+0xc>
 8007c4c:	f7ff ffc4 	bl	8007bd8 <global_stdio_init.part.0>
 8007c50:	e7f2      	b.n	8007c38 <__sinit+0xc>
 8007c52:	bf00      	nop
 8007c54:	08007b99 	.word	0x08007b99
 8007c58:	20002b14 	.word	0x20002b14

08007c5c <_fwalk_sglue>:
 8007c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c60:	4607      	mov	r7, r0
 8007c62:	4688      	mov	r8, r1
 8007c64:	4614      	mov	r4, r2
 8007c66:	2600      	movs	r6, #0
 8007c68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c6c:	f1b9 0901 	subs.w	r9, r9, #1
 8007c70:	d505      	bpl.n	8007c7e <_fwalk_sglue+0x22>
 8007c72:	6824      	ldr	r4, [r4, #0]
 8007c74:	2c00      	cmp	r4, #0
 8007c76:	d1f7      	bne.n	8007c68 <_fwalk_sglue+0xc>
 8007c78:	4630      	mov	r0, r6
 8007c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c7e:	89ab      	ldrh	r3, [r5, #12]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d907      	bls.n	8007c94 <_fwalk_sglue+0x38>
 8007c84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	d003      	beq.n	8007c94 <_fwalk_sglue+0x38>
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4638      	mov	r0, r7
 8007c90:	47c0      	blx	r8
 8007c92:	4306      	orrs	r6, r0
 8007c94:	3568      	adds	r5, #104	; 0x68
 8007c96:	e7e9      	b.n	8007c6c <_fwalk_sglue+0x10>

08007c98 <iprintf>:
 8007c98:	b40f      	push	{r0, r1, r2, r3}
 8007c9a:	b507      	push	{r0, r1, r2, lr}
 8007c9c:	4906      	ldr	r1, [pc, #24]	; (8007cb8 <iprintf+0x20>)
 8007c9e:	ab04      	add	r3, sp, #16
 8007ca0:	6808      	ldr	r0, [r1, #0]
 8007ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ca6:	6881      	ldr	r1, [r0, #8]
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	f000 faed 	bl	8008288 <_vfiprintf_r>
 8007cae:	b003      	add	sp, #12
 8007cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cb4:	b004      	add	sp, #16
 8007cb6:	4770      	bx	lr
 8007cb8:	200000a8 	.word	0x200000a8

08007cbc <putchar>:
 8007cbc:	4b02      	ldr	r3, [pc, #8]	; (8007cc8 <putchar+0xc>)
 8007cbe:	4601      	mov	r1, r0
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	6882      	ldr	r2, [r0, #8]
 8007cc4:	f000 be9a 	b.w	80089fc <_putc_r>
 8007cc8:	200000a8 	.word	0x200000a8

08007ccc <_puts_r>:
 8007ccc:	6a03      	ldr	r3, [r0, #32]
 8007cce:	b570      	push	{r4, r5, r6, lr}
 8007cd0:	6884      	ldr	r4, [r0, #8]
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	460e      	mov	r6, r1
 8007cd6:	b90b      	cbnz	r3, 8007cdc <_puts_r+0x10>
 8007cd8:	f7ff ffa8 	bl	8007c2c <__sinit>
 8007cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cde:	07db      	lsls	r3, r3, #31
 8007ce0:	d405      	bmi.n	8007cee <_puts_r+0x22>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	0598      	lsls	r0, r3, #22
 8007ce6:	d402      	bmi.n	8007cee <_puts_r+0x22>
 8007ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cea:	f000 f99b 	bl	8008024 <__retarget_lock_acquire_recursive>
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	0719      	lsls	r1, r3, #28
 8007cf2:	d513      	bpl.n	8007d1c <_puts_r+0x50>
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	b18b      	cbz	r3, 8007d1c <_puts_r+0x50>
 8007cf8:	3e01      	subs	r6, #1
 8007cfa:	68a3      	ldr	r3, [r4, #8]
 8007cfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d00:	3b01      	subs	r3, #1
 8007d02:	60a3      	str	r3, [r4, #8]
 8007d04:	b9e9      	cbnz	r1, 8007d42 <_puts_r+0x76>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	da2e      	bge.n	8007d68 <_puts_r+0x9c>
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	210a      	movs	r1, #10
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f000 f87b 	bl	8007e0a <__swbuf_r>
 8007d14:	3001      	adds	r0, #1
 8007d16:	d007      	beq.n	8007d28 <_puts_r+0x5c>
 8007d18:	250a      	movs	r5, #10
 8007d1a:	e007      	b.n	8007d2c <_puts_r+0x60>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 f8b0 	bl	8007e84 <__swsetup_r>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d0e7      	beq.n	8007cf8 <_puts_r+0x2c>
 8007d28:	f04f 35ff 	mov.w	r5, #4294967295
 8007d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d2e:	07da      	lsls	r2, r3, #31
 8007d30:	d405      	bmi.n	8007d3e <_puts_r+0x72>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	059b      	lsls	r3, r3, #22
 8007d36:	d402      	bmi.n	8007d3e <_puts_r+0x72>
 8007d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3a:	f000 f974 	bl	8008026 <__retarget_lock_release_recursive>
 8007d3e:	4628      	mov	r0, r5
 8007d40:	bd70      	pop	{r4, r5, r6, pc}
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	da04      	bge.n	8007d50 <_puts_r+0x84>
 8007d46:	69a2      	ldr	r2, [r4, #24]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	dc06      	bgt.n	8007d5a <_puts_r+0x8e>
 8007d4c:	290a      	cmp	r1, #10
 8007d4e:	d004      	beq.n	8007d5a <_puts_r+0x8e>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	6022      	str	r2, [r4, #0]
 8007d56:	7019      	strb	r1, [r3, #0]
 8007d58:	e7cf      	b.n	8007cfa <_puts_r+0x2e>
 8007d5a:	4622      	mov	r2, r4
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f000 f854 	bl	8007e0a <__swbuf_r>
 8007d62:	3001      	adds	r0, #1
 8007d64:	d1c9      	bne.n	8007cfa <_puts_r+0x2e>
 8007d66:	e7df      	b.n	8007d28 <_puts_r+0x5c>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	250a      	movs	r5, #10
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	6022      	str	r2, [r4, #0]
 8007d70:	701d      	strb	r5, [r3, #0]
 8007d72:	e7db      	b.n	8007d2c <_puts_r+0x60>

08007d74 <puts>:
 8007d74:	4b02      	ldr	r3, [pc, #8]	; (8007d80 <puts+0xc>)
 8007d76:	4601      	mov	r1, r0
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	f7ff bfa7 	b.w	8007ccc <_puts_r>
 8007d7e:	bf00      	nop
 8007d80:	200000a8 	.word	0x200000a8

08007d84 <__sread>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	460c      	mov	r4, r1
 8007d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8c:	f000 f8fc 	bl	8007f88 <_read_r>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	bfab      	itete	ge
 8007d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d96:	89a3      	ldrhlt	r3, [r4, #12]
 8007d98:	181b      	addge	r3, r3, r0
 8007d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d9e:	bfac      	ite	ge
 8007da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007da2:	81a3      	strhlt	r3, [r4, #12]
 8007da4:	bd10      	pop	{r4, pc}

08007da6 <__swrite>:
 8007da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007daa:	461f      	mov	r7, r3
 8007dac:	898b      	ldrh	r3, [r1, #12]
 8007dae:	05db      	lsls	r3, r3, #23
 8007db0:	4605      	mov	r5, r0
 8007db2:	460c      	mov	r4, r1
 8007db4:	4616      	mov	r6, r2
 8007db6:	d505      	bpl.n	8007dc4 <__swrite+0x1e>
 8007db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f000 f8d0 	bl	8007f64 <_lseek_r>
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dce:	81a3      	strh	r3, [r4, #12]
 8007dd0:	4632      	mov	r2, r6
 8007dd2:	463b      	mov	r3, r7
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dda:	f000 b8e7 	b.w	8007fac <_write_r>

08007dde <__sseek>:
 8007dde:	b510      	push	{r4, lr}
 8007de0:	460c      	mov	r4, r1
 8007de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de6:	f000 f8bd 	bl	8007f64 <_lseek_r>
 8007dea:	1c43      	adds	r3, r0, #1
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	bf15      	itete	ne
 8007df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dfa:	81a3      	strheq	r3, [r4, #12]
 8007dfc:	bf18      	it	ne
 8007dfe:	81a3      	strhne	r3, [r4, #12]
 8007e00:	bd10      	pop	{r4, pc}

08007e02 <__sclose>:
 8007e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e06:	f000 b89d 	b.w	8007f44 <_close_r>

08007e0a <__swbuf_r>:
 8007e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0c:	460e      	mov	r6, r1
 8007e0e:	4614      	mov	r4, r2
 8007e10:	4605      	mov	r5, r0
 8007e12:	b118      	cbz	r0, 8007e1c <__swbuf_r+0x12>
 8007e14:	6a03      	ldr	r3, [r0, #32]
 8007e16:	b90b      	cbnz	r3, 8007e1c <__swbuf_r+0x12>
 8007e18:	f7ff ff08 	bl	8007c2c <__sinit>
 8007e1c:	69a3      	ldr	r3, [r4, #24]
 8007e1e:	60a3      	str	r3, [r4, #8]
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	071a      	lsls	r2, r3, #28
 8007e24:	d525      	bpl.n	8007e72 <__swbuf_r+0x68>
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	b31b      	cbz	r3, 8007e72 <__swbuf_r+0x68>
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	6922      	ldr	r2, [r4, #16]
 8007e2e:	1a98      	subs	r0, r3, r2
 8007e30:	6963      	ldr	r3, [r4, #20]
 8007e32:	b2f6      	uxtb	r6, r6
 8007e34:	4283      	cmp	r3, r0
 8007e36:	4637      	mov	r7, r6
 8007e38:	dc04      	bgt.n	8007e44 <__swbuf_r+0x3a>
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f000 fd53 	bl	80088e8 <_fflush_r>
 8007e42:	b9e0      	cbnz	r0, 8007e7e <__swbuf_r+0x74>
 8007e44:	68a3      	ldr	r3, [r4, #8]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	60a3      	str	r3, [r4, #8]
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	6022      	str	r2, [r4, #0]
 8007e50:	701e      	strb	r6, [r3, #0]
 8007e52:	6962      	ldr	r2, [r4, #20]
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d004      	beq.n	8007e64 <__swbuf_r+0x5a>
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	07db      	lsls	r3, r3, #31
 8007e5e:	d506      	bpl.n	8007e6e <__swbuf_r+0x64>
 8007e60:	2e0a      	cmp	r6, #10
 8007e62:	d104      	bne.n	8007e6e <__swbuf_r+0x64>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 fd3e 	bl	80088e8 <_fflush_r>
 8007e6c:	b938      	cbnz	r0, 8007e7e <__swbuf_r+0x74>
 8007e6e:	4638      	mov	r0, r7
 8007e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e72:	4621      	mov	r1, r4
 8007e74:	4628      	mov	r0, r5
 8007e76:	f000 f805 	bl	8007e84 <__swsetup_r>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d0d5      	beq.n	8007e2a <__swbuf_r+0x20>
 8007e7e:	f04f 37ff 	mov.w	r7, #4294967295
 8007e82:	e7f4      	b.n	8007e6e <__swbuf_r+0x64>

08007e84 <__swsetup_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4b2a      	ldr	r3, [pc, #168]	; (8007f30 <__swsetup_r+0xac>)
 8007e88:	4605      	mov	r5, r0
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	b118      	cbz	r0, 8007e98 <__swsetup_r+0x14>
 8007e90:	6a03      	ldr	r3, [r0, #32]
 8007e92:	b90b      	cbnz	r3, 8007e98 <__swsetup_r+0x14>
 8007e94:	f7ff feca 	bl	8007c2c <__sinit>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e9e:	0718      	lsls	r0, r3, #28
 8007ea0:	d422      	bmi.n	8007ee8 <__swsetup_r+0x64>
 8007ea2:	06d9      	lsls	r1, r3, #27
 8007ea4:	d407      	bmi.n	8007eb6 <__swsetup_r+0x32>
 8007ea6:	2309      	movs	r3, #9
 8007ea8:	602b      	str	r3, [r5, #0]
 8007eaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007eae:	81a3      	strh	r3, [r4, #12]
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	e034      	b.n	8007f20 <__swsetup_r+0x9c>
 8007eb6:	0758      	lsls	r0, r3, #29
 8007eb8:	d512      	bpl.n	8007ee0 <__swsetup_r+0x5c>
 8007eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ebc:	b141      	cbz	r1, 8007ed0 <__swsetup_r+0x4c>
 8007ebe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ec2:	4299      	cmp	r1, r3
 8007ec4:	d002      	beq.n	8007ecc <__swsetup_r+0x48>
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f000 f8bc 	bl	8008044 <_free_r>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	6363      	str	r3, [r4, #52]	; 0x34
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	6063      	str	r3, [r4, #4]
 8007edc:	6923      	ldr	r3, [r4, #16]
 8007ede:	6023      	str	r3, [r4, #0]
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	f043 0308 	orr.w	r3, r3, #8
 8007ee6:	81a3      	strh	r3, [r4, #12]
 8007ee8:	6923      	ldr	r3, [r4, #16]
 8007eea:	b94b      	cbnz	r3, 8007f00 <__swsetup_r+0x7c>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef6:	d003      	beq.n	8007f00 <__swsetup_r+0x7c>
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4628      	mov	r0, r5
 8007efc:	f000 fd42 	bl	8008984 <__smakebuf_r>
 8007f00:	89a0      	ldrh	r0, [r4, #12]
 8007f02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f06:	f010 0301 	ands.w	r3, r0, #1
 8007f0a:	d00a      	beq.n	8007f22 <__swsetup_r+0x9e>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60a3      	str	r3, [r4, #8]
 8007f10:	6963      	ldr	r3, [r4, #20]
 8007f12:	425b      	negs	r3, r3
 8007f14:	61a3      	str	r3, [r4, #24]
 8007f16:	6923      	ldr	r3, [r4, #16]
 8007f18:	b943      	cbnz	r3, 8007f2c <__swsetup_r+0xa8>
 8007f1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f1e:	d1c4      	bne.n	8007eaa <__swsetup_r+0x26>
 8007f20:	bd38      	pop	{r3, r4, r5, pc}
 8007f22:	0781      	lsls	r1, r0, #30
 8007f24:	bf58      	it	pl
 8007f26:	6963      	ldrpl	r3, [r4, #20]
 8007f28:	60a3      	str	r3, [r4, #8]
 8007f2a:	e7f4      	b.n	8007f16 <__swsetup_r+0x92>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e7f7      	b.n	8007f20 <__swsetup_r+0x9c>
 8007f30:	200000a8 	.word	0x200000a8

08007f34 <memset>:
 8007f34:	4402      	add	r2, r0
 8007f36:	4603      	mov	r3, r0
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d100      	bne.n	8007f3e <memset+0xa>
 8007f3c:	4770      	bx	lr
 8007f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f42:	e7f9      	b.n	8007f38 <memset+0x4>

08007f44 <_close_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4d06      	ldr	r5, [pc, #24]	; (8007f60 <_close_r+0x1c>)
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	602b      	str	r3, [r5, #0]
 8007f50:	f7f8 fe59 	bl	8000c06 <_close>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d102      	bne.n	8007f5e <_close_r+0x1a>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	b103      	cbz	r3, 8007f5e <_close_r+0x1a>
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	20002b18 	.word	0x20002b18

08007f64 <_lseek_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4d07      	ldr	r5, [pc, #28]	; (8007f84 <_lseek_r+0x20>)
 8007f68:	4604      	mov	r4, r0
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	602a      	str	r2, [r5, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f7f8 fe6e 	bl	8000c54 <_lseek>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_lseek_r+0x1e>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_lseek_r+0x1e>
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	20002b18 	.word	0x20002b18

08007f88 <_read_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d07      	ldr	r5, [pc, #28]	; (8007fa8 <_read_r+0x20>)
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	4608      	mov	r0, r1
 8007f90:	4611      	mov	r1, r2
 8007f92:	2200      	movs	r2, #0
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f7f8 fdfc 	bl	8000b94 <_read>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_read_r+0x1e>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_read_r+0x1e>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	20002b18 	.word	0x20002b18

08007fac <_write_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	4d07      	ldr	r5, [pc, #28]	; (8007fcc <_write_r+0x20>)
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	4608      	mov	r0, r1
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	602a      	str	r2, [r5, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f7f8 fe07 	bl	8000bce <_write>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_write_r+0x1e>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_write_r+0x1e>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	20002b18 	.word	0x20002b18

08007fd0 <__errno>:
 8007fd0:	4b01      	ldr	r3, [pc, #4]	; (8007fd8 <__errno+0x8>)
 8007fd2:	6818      	ldr	r0, [r3, #0]
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	200000a8 	.word	0x200000a8

08007fdc <__libc_init_array>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	4d0d      	ldr	r5, [pc, #52]	; (8008014 <__libc_init_array+0x38>)
 8007fe0:	4c0d      	ldr	r4, [pc, #52]	; (8008018 <__libc_init_array+0x3c>)
 8007fe2:	1b64      	subs	r4, r4, r5
 8007fe4:	10a4      	asrs	r4, r4, #2
 8007fe6:	2600      	movs	r6, #0
 8007fe8:	42a6      	cmp	r6, r4
 8007fea:	d109      	bne.n	8008000 <__libc_init_array+0x24>
 8007fec:	4d0b      	ldr	r5, [pc, #44]	; (800801c <__libc_init_array+0x40>)
 8007fee:	4c0c      	ldr	r4, [pc, #48]	; (8008020 <__libc_init_array+0x44>)
 8007ff0:	f000 fd6a 	bl	8008ac8 <_init>
 8007ff4:	1b64      	subs	r4, r4, r5
 8007ff6:	10a4      	asrs	r4, r4, #2
 8007ff8:	2600      	movs	r6, #0
 8007ffa:	42a6      	cmp	r6, r4
 8007ffc:	d105      	bne.n	800800a <__libc_init_array+0x2e>
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
 8008000:	f855 3b04 	ldr.w	r3, [r5], #4
 8008004:	4798      	blx	r3
 8008006:	3601      	adds	r6, #1
 8008008:	e7ee      	b.n	8007fe8 <__libc_init_array+0xc>
 800800a:	f855 3b04 	ldr.w	r3, [r5], #4
 800800e:	4798      	blx	r3
 8008010:	3601      	adds	r6, #1
 8008012:	e7f2      	b.n	8007ffa <__libc_init_array+0x1e>
 8008014:	0801e580 	.word	0x0801e580
 8008018:	0801e580 	.word	0x0801e580
 800801c:	0801e580 	.word	0x0801e580
 8008020:	0801e584 	.word	0x0801e584

08008024 <__retarget_lock_acquire_recursive>:
 8008024:	4770      	bx	lr

08008026 <__retarget_lock_release_recursive>:
 8008026:	4770      	bx	lr

08008028 <memcpy>:
 8008028:	440a      	add	r2, r1
 800802a:	4291      	cmp	r1, r2
 800802c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008030:	d100      	bne.n	8008034 <memcpy+0xc>
 8008032:	4770      	bx	lr
 8008034:	b510      	push	{r4, lr}
 8008036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800803a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800803e:	4291      	cmp	r1, r2
 8008040:	d1f9      	bne.n	8008036 <memcpy+0xe>
 8008042:	bd10      	pop	{r4, pc}

08008044 <_free_r>:
 8008044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008046:	2900      	cmp	r1, #0
 8008048:	d044      	beq.n	80080d4 <_free_r+0x90>
 800804a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800804e:	9001      	str	r0, [sp, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f1a1 0404 	sub.w	r4, r1, #4
 8008056:	bfb8      	it	lt
 8008058:	18e4      	addlt	r4, r4, r3
 800805a:	f000 f8df 	bl	800821c <__malloc_lock>
 800805e:	4a1e      	ldr	r2, [pc, #120]	; (80080d8 <_free_r+0x94>)
 8008060:	9801      	ldr	r0, [sp, #4]
 8008062:	6813      	ldr	r3, [r2, #0]
 8008064:	b933      	cbnz	r3, 8008074 <_free_r+0x30>
 8008066:	6063      	str	r3, [r4, #4]
 8008068:	6014      	str	r4, [r2, #0]
 800806a:	b003      	add	sp, #12
 800806c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008070:	f000 b8da 	b.w	8008228 <__malloc_unlock>
 8008074:	42a3      	cmp	r3, r4
 8008076:	d908      	bls.n	800808a <_free_r+0x46>
 8008078:	6825      	ldr	r5, [r4, #0]
 800807a:	1961      	adds	r1, r4, r5
 800807c:	428b      	cmp	r3, r1
 800807e:	bf01      	itttt	eq
 8008080:	6819      	ldreq	r1, [r3, #0]
 8008082:	685b      	ldreq	r3, [r3, #4]
 8008084:	1949      	addeq	r1, r1, r5
 8008086:	6021      	streq	r1, [r4, #0]
 8008088:	e7ed      	b.n	8008066 <_free_r+0x22>
 800808a:	461a      	mov	r2, r3
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	b10b      	cbz	r3, 8008094 <_free_r+0x50>
 8008090:	42a3      	cmp	r3, r4
 8008092:	d9fa      	bls.n	800808a <_free_r+0x46>
 8008094:	6811      	ldr	r1, [r2, #0]
 8008096:	1855      	adds	r5, r2, r1
 8008098:	42a5      	cmp	r5, r4
 800809a:	d10b      	bne.n	80080b4 <_free_r+0x70>
 800809c:	6824      	ldr	r4, [r4, #0]
 800809e:	4421      	add	r1, r4
 80080a0:	1854      	adds	r4, r2, r1
 80080a2:	42a3      	cmp	r3, r4
 80080a4:	6011      	str	r1, [r2, #0]
 80080a6:	d1e0      	bne.n	800806a <_free_r+0x26>
 80080a8:	681c      	ldr	r4, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	6053      	str	r3, [r2, #4]
 80080ae:	440c      	add	r4, r1
 80080b0:	6014      	str	r4, [r2, #0]
 80080b2:	e7da      	b.n	800806a <_free_r+0x26>
 80080b4:	d902      	bls.n	80080bc <_free_r+0x78>
 80080b6:	230c      	movs	r3, #12
 80080b8:	6003      	str	r3, [r0, #0]
 80080ba:	e7d6      	b.n	800806a <_free_r+0x26>
 80080bc:	6825      	ldr	r5, [r4, #0]
 80080be:	1961      	adds	r1, r4, r5
 80080c0:	428b      	cmp	r3, r1
 80080c2:	bf04      	itt	eq
 80080c4:	6819      	ldreq	r1, [r3, #0]
 80080c6:	685b      	ldreq	r3, [r3, #4]
 80080c8:	6063      	str	r3, [r4, #4]
 80080ca:	bf04      	itt	eq
 80080cc:	1949      	addeq	r1, r1, r5
 80080ce:	6021      	streq	r1, [r4, #0]
 80080d0:	6054      	str	r4, [r2, #4]
 80080d2:	e7ca      	b.n	800806a <_free_r+0x26>
 80080d4:	b003      	add	sp, #12
 80080d6:	bd30      	pop	{r4, r5, pc}
 80080d8:	20002b20 	.word	0x20002b20

080080dc <sbrk_aligned>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4e0e      	ldr	r6, [pc, #56]	; (8008118 <sbrk_aligned+0x3c>)
 80080e0:	460c      	mov	r4, r1
 80080e2:	6831      	ldr	r1, [r6, #0]
 80080e4:	4605      	mov	r5, r0
 80080e6:	b911      	cbnz	r1, 80080ee <sbrk_aligned+0x12>
 80080e8:	f000 fcde 	bl	8008aa8 <_sbrk_r>
 80080ec:	6030      	str	r0, [r6, #0]
 80080ee:	4621      	mov	r1, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 fcd9 	bl	8008aa8 <_sbrk_r>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	d00a      	beq.n	8008110 <sbrk_aligned+0x34>
 80080fa:	1cc4      	adds	r4, r0, #3
 80080fc:	f024 0403 	bic.w	r4, r4, #3
 8008100:	42a0      	cmp	r0, r4
 8008102:	d007      	beq.n	8008114 <sbrk_aligned+0x38>
 8008104:	1a21      	subs	r1, r4, r0
 8008106:	4628      	mov	r0, r5
 8008108:	f000 fcce 	bl	8008aa8 <_sbrk_r>
 800810c:	3001      	adds	r0, #1
 800810e:	d101      	bne.n	8008114 <sbrk_aligned+0x38>
 8008110:	f04f 34ff 	mov.w	r4, #4294967295
 8008114:	4620      	mov	r0, r4
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	20002b24 	.word	0x20002b24

0800811c <_malloc_r>:
 800811c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008120:	1ccd      	adds	r5, r1, #3
 8008122:	f025 0503 	bic.w	r5, r5, #3
 8008126:	3508      	adds	r5, #8
 8008128:	2d0c      	cmp	r5, #12
 800812a:	bf38      	it	cc
 800812c:	250c      	movcc	r5, #12
 800812e:	2d00      	cmp	r5, #0
 8008130:	4607      	mov	r7, r0
 8008132:	db01      	blt.n	8008138 <_malloc_r+0x1c>
 8008134:	42a9      	cmp	r1, r5
 8008136:	d905      	bls.n	8008144 <_malloc_r+0x28>
 8008138:	230c      	movs	r3, #12
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	2600      	movs	r6, #0
 800813e:	4630      	mov	r0, r6
 8008140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008144:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008218 <_malloc_r+0xfc>
 8008148:	f000 f868 	bl	800821c <__malloc_lock>
 800814c:	f8d8 3000 	ldr.w	r3, [r8]
 8008150:	461c      	mov	r4, r3
 8008152:	bb5c      	cbnz	r4, 80081ac <_malloc_r+0x90>
 8008154:	4629      	mov	r1, r5
 8008156:	4638      	mov	r0, r7
 8008158:	f7ff ffc0 	bl	80080dc <sbrk_aligned>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	4604      	mov	r4, r0
 8008160:	d155      	bne.n	800820e <_malloc_r+0xf2>
 8008162:	f8d8 4000 	ldr.w	r4, [r8]
 8008166:	4626      	mov	r6, r4
 8008168:	2e00      	cmp	r6, #0
 800816a:	d145      	bne.n	80081f8 <_malloc_r+0xdc>
 800816c:	2c00      	cmp	r4, #0
 800816e:	d048      	beq.n	8008202 <_malloc_r+0xe6>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	4631      	mov	r1, r6
 8008174:	4638      	mov	r0, r7
 8008176:	eb04 0903 	add.w	r9, r4, r3
 800817a:	f000 fc95 	bl	8008aa8 <_sbrk_r>
 800817e:	4581      	cmp	r9, r0
 8008180:	d13f      	bne.n	8008202 <_malloc_r+0xe6>
 8008182:	6821      	ldr	r1, [r4, #0]
 8008184:	1a6d      	subs	r5, r5, r1
 8008186:	4629      	mov	r1, r5
 8008188:	4638      	mov	r0, r7
 800818a:	f7ff ffa7 	bl	80080dc <sbrk_aligned>
 800818e:	3001      	adds	r0, #1
 8008190:	d037      	beq.n	8008202 <_malloc_r+0xe6>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	442b      	add	r3, r5
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	f8d8 3000 	ldr.w	r3, [r8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d038      	beq.n	8008212 <_malloc_r+0xf6>
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	42a2      	cmp	r2, r4
 80081a4:	d12b      	bne.n	80081fe <_malloc_r+0xe2>
 80081a6:	2200      	movs	r2, #0
 80081a8:	605a      	str	r2, [r3, #4]
 80081aa:	e00f      	b.n	80081cc <_malloc_r+0xb0>
 80081ac:	6822      	ldr	r2, [r4, #0]
 80081ae:	1b52      	subs	r2, r2, r5
 80081b0:	d41f      	bmi.n	80081f2 <_malloc_r+0xd6>
 80081b2:	2a0b      	cmp	r2, #11
 80081b4:	d917      	bls.n	80081e6 <_malloc_r+0xca>
 80081b6:	1961      	adds	r1, r4, r5
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	6025      	str	r5, [r4, #0]
 80081bc:	bf18      	it	ne
 80081be:	6059      	strne	r1, [r3, #4]
 80081c0:	6863      	ldr	r3, [r4, #4]
 80081c2:	bf08      	it	eq
 80081c4:	f8c8 1000 	streq.w	r1, [r8]
 80081c8:	5162      	str	r2, [r4, r5]
 80081ca:	604b      	str	r3, [r1, #4]
 80081cc:	4638      	mov	r0, r7
 80081ce:	f104 060b 	add.w	r6, r4, #11
 80081d2:	f000 f829 	bl	8008228 <__malloc_unlock>
 80081d6:	f026 0607 	bic.w	r6, r6, #7
 80081da:	1d23      	adds	r3, r4, #4
 80081dc:	1af2      	subs	r2, r6, r3
 80081de:	d0ae      	beq.n	800813e <_malloc_r+0x22>
 80081e0:	1b9b      	subs	r3, r3, r6
 80081e2:	50a3      	str	r3, [r4, r2]
 80081e4:	e7ab      	b.n	800813e <_malloc_r+0x22>
 80081e6:	42a3      	cmp	r3, r4
 80081e8:	6862      	ldr	r2, [r4, #4]
 80081ea:	d1dd      	bne.n	80081a8 <_malloc_r+0x8c>
 80081ec:	f8c8 2000 	str.w	r2, [r8]
 80081f0:	e7ec      	b.n	80081cc <_malloc_r+0xb0>
 80081f2:	4623      	mov	r3, r4
 80081f4:	6864      	ldr	r4, [r4, #4]
 80081f6:	e7ac      	b.n	8008152 <_malloc_r+0x36>
 80081f8:	4634      	mov	r4, r6
 80081fa:	6876      	ldr	r6, [r6, #4]
 80081fc:	e7b4      	b.n	8008168 <_malloc_r+0x4c>
 80081fe:	4613      	mov	r3, r2
 8008200:	e7cc      	b.n	800819c <_malloc_r+0x80>
 8008202:	230c      	movs	r3, #12
 8008204:	603b      	str	r3, [r7, #0]
 8008206:	4638      	mov	r0, r7
 8008208:	f000 f80e 	bl	8008228 <__malloc_unlock>
 800820c:	e797      	b.n	800813e <_malloc_r+0x22>
 800820e:	6025      	str	r5, [r4, #0]
 8008210:	e7dc      	b.n	80081cc <_malloc_r+0xb0>
 8008212:	605b      	str	r3, [r3, #4]
 8008214:	deff      	udf	#255	; 0xff
 8008216:	bf00      	nop
 8008218:	20002b20 	.word	0x20002b20

0800821c <__malloc_lock>:
 800821c:	4801      	ldr	r0, [pc, #4]	; (8008224 <__malloc_lock+0x8>)
 800821e:	f7ff bf01 	b.w	8008024 <__retarget_lock_acquire_recursive>
 8008222:	bf00      	nop
 8008224:	20002b1c 	.word	0x20002b1c

08008228 <__malloc_unlock>:
 8008228:	4801      	ldr	r0, [pc, #4]	; (8008230 <__malloc_unlock+0x8>)
 800822a:	f7ff befc 	b.w	8008026 <__retarget_lock_release_recursive>
 800822e:	bf00      	nop
 8008230:	20002b1c 	.word	0x20002b1c

08008234 <__sfputc_r>:
 8008234:	6893      	ldr	r3, [r2, #8]
 8008236:	3b01      	subs	r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	b410      	push	{r4}
 800823c:	6093      	str	r3, [r2, #8]
 800823e:	da08      	bge.n	8008252 <__sfputc_r+0x1e>
 8008240:	6994      	ldr	r4, [r2, #24]
 8008242:	42a3      	cmp	r3, r4
 8008244:	db01      	blt.n	800824a <__sfputc_r+0x16>
 8008246:	290a      	cmp	r1, #10
 8008248:	d103      	bne.n	8008252 <__sfputc_r+0x1e>
 800824a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800824e:	f7ff bddc 	b.w	8007e0a <__swbuf_r>
 8008252:	6813      	ldr	r3, [r2, #0]
 8008254:	1c58      	adds	r0, r3, #1
 8008256:	6010      	str	r0, [r2, #0]
 8008258:	7019      	strb	r1, [r3, #0]
 800825a:	4608      	mov	r0, r1
 800825c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008260:	4770      	bx	lr

08008262 <__sfputs_r>:
 8008262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008264:	4606      	mov	r6, r0
 8008266:	460f      	mov	r7, r1
 8008268:	4614      	mov	r4, r2
 800826a:	18d5      	adds	r5, r2, r3
 800826c:	42ac      	cmp	r4, r5
 800826e:	d101      	bne.n	8008274 <__sfputs_r+0x12>
 8008270:	2000      	movs	r0, #0
 8008272:	e007      	b.n	8008284 <__sfputs_r+0x22>
 8008274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008278:	463a      	mov	r2, r7
 800827a:	4630      	mov	r0, r6
 800827c:	f7ff ffda 	bl	8008234 <__sfputc_r>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d1f3      	bne.n	800826c <__sfputs_r+0xa>
 8008284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008288 <_vfiprintf_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	460d      	mov	r5, r1
 800828e:	b09d      	sub	sp, #116	; 0x74
 8008290:	4614      	mov	r4, r2
 8008292:	4698      	mov	r8, r3
 8008294:	4606      	mov	r6, r0
 8008296:	b118      	cbz	r0, 80082a0 <_vfiprintf_r+0x18>
 8008298:	6a03      	ldr	r3, [r0, #32]
 800829a:	b90b      	cbnz	r3, 80082a0 <_vfiprintf_r+0x18>
 800829c:	f7ff fcc6 	bl	8007c2c <__sinit>
 80082a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082a2:	07d9      	lsls	r1, r3, #31
 80082a4:	d405      	bmi.n	80082b2 <_vfiprintf_r+0x2a>
 80082a6:	89ab      	ldrh	r3, [r5, #12]
 80082a8:	059a      	lsls	r2, r3, #22
 80082aa:	d402      	bmi.n	80082b2 <_vfiprintf_r+0x2a>
 80082ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ae:	f7ff feb9 	bl	8008024 <__retarget_lock_acquire_recursive>
 80082b2:	89ab      	ldrh	r3, [r5, #12]
 80082b4:	071b      	lsls	r3, r3, #28
 80082b6:	d501      	bpl.n	80082bc <_vfiprintf_r+0x34>
 80082b8:	692b      	ldr	r3, [r5, #16]
 80082ba:	b99b      	cbnz	r3, 80082e4 <_vfiprintf_r+0x5c>
 80082bc:	4629      	mov	r1, r5
 80082be:	4630      	mov	r0, r6
 80082c0:	f7ff fde0 	bl	8007e84 <__swsetup_r>
 80082c4:	b170      	cbz	r0, 80082e4 <_vfiprintf_r+0x5c>
 80082c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082c8:	07dc      	lsls	r4, r3, #31
 80082ca:	d504      	bpl.n	80082d6 <_vfiprintf_r+0x4e>
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	b01d      	add	sp, #116	; 0x74
 80082d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	0598      	lsls	r0, r3, #22
 80082da:	d4f7      	bmi.n	80082cc <_vfiprintf_r+0x44>
 80082dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082de:	f7ff fea2 	bl	8008026 <__retarget_lock_release_recursive>
 80082e2:	e7f3      	b.n	80082cc <_vfiprintf_r+0x44>
 80082e4:	2300      	movs	r3, #0
 80082e6:	9309      	str	r3, [sp, #36]	; 0x24
 80082e8:	2320      	movs	r3, #32
 80082ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80082f2:	2330      	movs	r3, #48	; 0x30
 80082f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80084a8 <_vfiprintf_r+0x220>
 80082f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082fc:	f04f 0901 	mov.w	r9, #1
 8008300:	4623      	mov	r3, r4
 8008302:	469a      	mov	sl, r3
 8008304:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008308:	b10a      	cbz	r2, 800830e <_vfiprintf_r+0x86>
 800830a:	2a25      	cmp	r2, #37	; 0x25
 800830c:	d1f9      	bne.n	8008302 <_vfiprintf_r+0x7a>
 800830e:	ebba 0b04 	subs.w	fp, sl, r4
 8008312:	d00b      	beq.n	800832c <_vfiprintf_r+0xa4>
 8008314:	465b      	mov	r3, fp
 8008316:	4622      	mov	r2, r4
 8008318:	4629      	mov	r1, r5
 800831a:	4630      	mov	r0, r6
 800831c:	f7ff ffa1 	bl	8008262 <__sfputs_r>
 8008320:	3001      	adds	r0, #1
 8008322:	f000 80a9 	beq.w	8008478 <_vfiprintf_r+0x1f0>
 8008326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008328:	445a      	add	r2, fp
 800832a:	9209      	str	r2, [sp, #36]	; 0x24
 800832c:	f89a 3000 	ldrb.w	r3, [sl]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 80a1 	beq.w	8008478 <_vfiprintf_r+0x1f0>
 8008336:	2300      	movs	r3, #0
 8008338:	f04f 32ff 	mov.w	r2, #4294967295
 800833c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008340:	f10a 0a01 	add.w	sl, sl, #1
 8008344:	9304      	str	r3, [sp, #16]
 8008346:	9307      	str	r3, [sp, #28]
 8008348:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800834c:	931a      	str	r3, [sp, #104]	; 0x68
 800834e:	4654      	mov	r4, sl
 8008350:	2205      	movs	r2, #5
 8008352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008356:	4854      	ldr	r0, [pc, #336]	; (80084a8 <_vfiprintf_r+0x220>)
 8008358:	f7f7 ff62 	bl	8000220 <memchr>
 800835c:	9a04      	ldr	r2, [sp, #16]
 800835e:	b9d8      	cbnz	r0, 8008398 <_vfiprintf_r+0x110>
 8008360:	06d1      	lsls	r1, r2, #27
 8008362:	bf44      	itt	mi
 8008364:	2320      	movmi	r3, #32
 8008366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800836a:	0713      	lsls	r3, r2, #28
 800836c:	bf44      	itt	mi
 800836e:	232b      	movmi	r3, #43	; 0x2b
 8008370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008374:	f89a 3000 	ldrb.w	r3, [sl]
 8008378:	2b2a      	cmp	r3, #42	; 0x2a
 800837a:	d015      	beq.n	80083a8 <_vfiprintf_r+0x120>
 800837c:	9a07      	ldr	r2, [sp, #28]
 800837e:	4654      	mov	r4, sl
 8008380:	2000      	movs	r0, #0
 8008382:	f04f 0c0a 	mov.w	ip, #10
 8008386:	4621      	mov	r1, r4
 8008388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800838c:	3b30      	subs	r3, #48	; 0x30
 800838e:	2b09      	cmp	r3, #9
 8008390:	d94d      	bls.n	800842e <_vfiprintf_r+0x1a6>
 8008392:	b1b0      	cbz	r0, 80083c2 <_vfiprintf_r+0x13a>
 8008394:	9207      	str	r2, [sp, #28]
 8008396:	e014      	b.n	80083c2 <_vfiprintf_r+0x13a>
 8008398:	eba0 0308 	sub.w	r3, r0, r8
 800839c:	fa09 f303 	lsl.w	r3, r9, r3
 80083a0:	4313      	orrs	r3, r2
 80083a2:	9304      	str	r3, [sp, #16]
 80083a4:	46a2      	mov	sl, r4
 80083a6:	e7d2      	b.n	800834e <_vfiprintf_r+0xc6>
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	1d19      	adds	r1, r3, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	9103      	str	r1, [sp, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bfbb      	ittet	lt
 80083b4:	425b      	neglt	r3, r3
 80083b6:	f042 0202 	orrlt.w	r2, r2, #2
 80083ba:	9307      	strge	r3, [sp, #28]
 80083bc:	9307      	strlt	r3, [sp, #28]
 80083be:	bfb8      	it	lt
 80083c0:	9204      	strlt	r2, [sp, #16]
 80083c2:	7823      	ldrb	r3, [r4, #0]
 80083c4:	2b2e      	cmp	r3, #46	; 0x2e
 80083c6:	d10c      	bne.n	80083e2 <_vfiprintf_r+0x15a>
 80083c8:	7863      	ldrb	r3, [r4, #1]
 80083ca:	2b2a      	cmp	r3, #42	; 0x2a
 80083cc:	d134      	bne.n	8008438 <_vfiprintf_r+0x1b0>
 80083ce:	9b03      	ldr	r3, [sp, #12]
 80083d0:	1d1a      	adds	r2, r3, #4
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	9203      	str	r2, [sp, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	bfb8      	it	lt
 80083da:	f04f 33ff 	movlt.w	r3, #4294967295
 80083de:	3402      	adds	r4, #2
 80083e0:	9305      	str	r3, [sp, #20]
 80083e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80084b8 <_vfiprintf_r+0x230>
 80083e6:	7821      	ldrb	r1, [r4, #0]
 80083e8:	2203      	movs	r2, #3
 80083ea:	4650      	mov	r0, sl
 80083ec:	f7f7 ff18 	bl	8000220 <memchr>
 80083f0:	b138      	cbz	r0, 8008402 <_vfiprintf_r+0x17a>
 80083f2:	9b04      	ldr	r3, [sp, #16]
 80083f4:	eba0 000a 	sub.w	r0, r0, sl
 80083f8:	2240      	movs	r2, #64	; 0x40
 80083fa:	4082      	lsls	r2, r0
 80083fc:	4313      	orrs	r3, r2
 80083fe:	3401      	adds	r4, #1
 8008400:	9304      	str	r3, [sp, #16]
 8008402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008406:	4829      	ldr	r0, [pc, #164]	; (80084ac <_vfiprintf_r+0x224>)
 8008408:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800840c:	2206      	movs	r2, #6
 800840e:	f7f7 ff07 	bl	8000220 <memchr>
 8008412:	2800      	cmp	r0, #0
 8008414:	d03f      	beq.n	8008496 <_vfiprintf_r+0x20e>
 8008416:	4b26      	ldr	r3, [pc, #152]	; (80084b0 <_vfiprintf_r+0x228>)
 8008418:	bb1b      	cbnz	r3, 8008462 <_vfiprintf_r+0x1da>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	3307      	adds	r3, #7
 800841e:	f023 0307 	bic.w	r3, r3, #7
 8008422:	3308      	adds	r3, #8
 8008424:	9303      	str	r3, [sp, #12]
 8008426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008428:	443b      	add	r3, r7
 800842a:	9309      	str	r3, [sp, #36]	; 0x24
 800842c:	e768      	b.n	8008300 <_vfiprintf_r+0x78>
 800842e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008432:	460c      	mov	r4, r1
 8008434:	2001      	movs	r0, #1
 8008436:	e7a6      	b.n	8008386 <_vfiprintf_r+0xfe>
 8008438:	2300      	movs	r3, #0
 800843a:	3401      	adds	r4, #1
 800843c:	9305      	str	r3, [sp, #20]
 800843e:	4619      	mov	r1, r3
 8008440:	f04f 0c0a 	mov.w	ip, #10
 8008444:	4620      	mov	r0, r4
 8008446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800844a:	3a30      	subs	r2, #48	; 0x30
 800844c:	2a09      	cmp	r2, #9
 800844e:	d903      	bls.n	8008458 <_vfiprintf_r+0x1d0>
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0c6      	beq.n	80083e2 <_vfiprintf_r+0x15a>
 8008454:	9105      	str	r1, [sp, #20]
 8008456:	e7c4      	b.n	80083e2 <_vfiprintf_r+0x15a>
 8008458:	fb0c 2101 	mla	r1, ip, r1, r2
 800845c:	4604      	mov	r4, r0
 800845e:	2301      	movs	r3, #1
 8008460:	e7f0      	b.n	8008444 <_vfiprintf_r+0x1bc>
 8008462:	ab03      	add	r3, sp, #12
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	462a      	mov	r2, r5
 8008468:	4b12      	ldr	r3, [pc, #72]	; (80084b4 <_vfiprintf_r+0x22c>)
 800846a:	a904      	add	r1, sp, #16
 800846c:	4630      	mov	r0, r6
 800846e:	f3af 8000 	nop.w
 8008472:	4607      	mov	r7, r0
 8008474:	1c78      	adds	r0, r7, #1
 8008476:	d1d6      	bne.n	8008426 <_vfiprintf_r+0x19e>
 8008478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800847a:	07d9      	lsls	r1, r3, #31
 800847c:	d405      	bmi.n	800848a <_vfiprintf_r+0x202>
 800847e:	89ab      	ldrh	r3, [r5, #12]
 8008480:	059a      	lsls	r2, r3, #22
 8008482:	d402      	bmi.n	800848a <_vfiprintf_r+0x202>
 8008484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008486:	f7ff fdce 	bl	8008026 <__retarget_lock_release_recursive>
 800848a:	89ab      	ldrh	r3, [r5, #12]
 800848c:	065b      	lsls	r3, r3, #25
 800848e:	f53f af1d 	bmi.w	80082cc <_vfiprintf_r+0x44>
 8008492:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008494:	e71c      	b.n	80082d0 <_vfiprintf_r+0x48>
 8008496:	ab03      	add	r3, sp, #12
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	462a      	mov	r2, r5
 800849c:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <_vfiprintf_r+0x22c>)
 800849e:	a904      	add	r1, sp, #16
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f879 	bl	8008598 <_printf_i>
 80084a6:	e7e4      	b.n	8008472 <_vfiprintf_r+0x1ea>
 80084a8:	0801e544 	.word	0x0801e544
 80084ac:	0801e54e 	.word	0x0801e54e
 80084b0:	00000000 	.word	0x00000000
 80084b4:	08008263 	.word	0x08008263
 80084b8:	0801e54a 	.word	0x0801e54a

080084bc <_printf_common>:
 80084bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	4616      	mov	r6, r2
 80084c2:	4699      	mov	r9, r3
 80084c4:	688a      	ldr	r2, [r1, #8]
 80084c6:	690b      	ldr	r3, [r1, #16]
 80084c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	bfb8      	it	lt
 80084d0:	4613      	movlt	r3, r2
 80084d2:	6033      	str	r3, [r6, #0]
 80084d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084d8:	4607      	mov	r7, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	b10a      	cbz	r2, 80084e2 <_printf_common+0x26>
 80084de:	3301      	adds	r3, #1
 80084e0:	6033      	str	r3, [r6, #0]
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	0699      	lsls	r1, r3, #26
 80084e6:	bf42      	ittt	mi
 80084e8:	6833      	ldrmi	r3, [r6, #0]
 80084ea:	3302      	addmi	r3, #2
 80084ec:	6033      	strmi	r3, [r6, #0]
 80084ee:	6825      	ldr	r5, [r4, #0]
 80084f0:	f015 0506 	ands.w	r5, r5, #6
 80084f4:	d106      	bne.n	8008504 <_printf_common+0x48>
 80084f6:	f104 0a19 	add.w	sl, r4, #25
 80084fa:	68e3      	ldr	r3, [r4, #12]
 80084fc:	6832      	ldr	r2, [r6, #0]
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	42ab      	cmp	r3, r5
 8008502:	dc26      	bgt.n	8008552 <_printf_common+0x96>
 8008504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008508:	1e13      	subs	r3, r2, #0
 800850a:	6822      	ldr	r2, [r4, #0]
 800850c:	bf18      	it	ne
 800850e:	2301      	movne	r3, #1
 8008510:	0692      	lsls	r2, r2, #26
 8008512:	d42b      	bmi.n	800856c <_printf_common+0xb0>
 8008514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008518:	4649      	mov	r1, r9
 800851a:	4638      	mov	r0, r7
 800851c:	47c0      	blx	r8
 800851e:	3001      	adds	r0, #1
 8008520:	d01e      	beq.n	8008560 <_printf_common+0xa4>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	6922      	ldr	r2, [r4, #16]
 8008526:	f003 0306 	and.w	r3, r3, #6
 800852a:	2b04      	cmp	r3, #4
 800852c:	bf02      	ittt	eq
 800852e:	68e5      	ldreq	r5, [r4, #12]
 8008530:	6833      	ldreq	r3, [r6, #0]
 8008532:	1aed      	subeq	r5, r5, r3
 8008534:	68a3      	ldr	r3, [r4, #8]
 8008536:	bf0c      	ite	eq
 8008538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800853c:	2500      	movne	r5, #0
 800853e:	4293      	cmp	r3, r2
 8008540:	bfc4      	itt	gt
 8008542:	1a9b      	subgt	r3, r3, r2
 8008544:	18ed      	addgt	r5, r5, r3
 8008546:	2600      	movs	r6, #0
 8008548:	341a      	adds	r4, #26
 800854a:	42b5      	cmp	r5, r6
 800854c:	d11a      	bne.n	8008584 <_printf_common+0xc8>
 800854e:	2000      	movs	r0, #0
 8008550:	e008      	b.n	8008564 <_printf_common+0xa8>
 8008552:	2301      	movs	r3, #1
 8008554:	4652      	mov	r2, sl
 8008556:	4649      	mov	r1, r9
 8008558:	4638      	mov	r0, r7
 800855a:	47c0      	blx	r8
 800855c:	3001      	adds	r0, #1
 800855e:	d103      	bne.n	8008568 <_printf_common+0xac>
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008568:	3501      	adds	r5, #1
 800856a:	e7c6      	b.n	80084fa <_printf_common+0x3e>
 800856c:	18e1      	adds	r1, r4, r3
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	2030      	movs	r0, #48	; 0x30
 8008572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008576:	4422      	add	r2, r4
 8008578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800857c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008580:	3302      	adds	r3, #2
 8008582:	e7c7      	b.n	8008514 <_printf_common+0x58>
 8008584:	2301      	movs	r3, #1
 8008586:	4622      	mov	r2, r4
 8008588:	4649      	mov	r1, r9
 800858a:	4638      	mov	r0, r7
 800858c:	47c0      	blx	r8
 800858e:	3001      	adds	r0, #1
 8008590:	d0e6      	beq.n	8008560 <_printf_common+0xa4>
 8008592:	3601      	adds	r6, #1
 8008594:	e7d9      	b.n	800854a <_printf_common+0x8e>
	...

08008598 <_printf_i>:
 8008598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800859c:	7e0f      	ldrb	r7, [r1, #24]
 800859e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085a0:	2f78      	cmp	r7, #120	; 0x78
 80085a2:	4691      	mov	r9, r2
 80085a4:	4680      	mov	r8, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	469a      	mov	sl, r3
 80085aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085ae:	d807      	bhi.n	80085c0 <_printf_i+0x28>
 80085b0:	2f62      	cmp	r7, #98	; 0x62
 80085b2:	d80a      	bhi.n	80085ca <_printf_i+0x32>
 80085b4:	2f00      	cmp	r7, #0
 80085b6:	f000 80d4 	beq.w	8008762 <_printf_i+0x1ca>
 80085ba:	2f58      	cmp	r7, #88	; 0x58
 80085bc:	f000 80c0 	beq.w	8008740 <_printf_i+0x1a8>
 80085c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085c8:	e03a      	b.n	8008640 <_printf_i+0xa8>
 80085ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085ce:	2b15      	cmp	r3, #21
 80085d0:	d8f6      	bhi.n	80085c0 <_printf_i+0x28>
 80085d2:	a101      	add	r1, pc, #4	; (adr r1, 80085d8 <_printf_i+0x40>)
 80085d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085d8:	08008631 	.word	0x08008631
 80085dc:	08008645 	.word	0x08008645
 80085e0:	080085c1 	.word	0x080085c1
 80085e4:	080085c1 	.word	0x080085c1
 80085e8:	080085c1 	.word	0x080085c1
 80085ec:	080085c1 	.word	0x080085c1
 80085f0:	08008645 	.word	0x08008645
 80085f4:	080085c1 	.word	0x080085c1
 80085f8:	080085c1 	.word	0x080085c1
 80085fc:	080085c1 	.word	0x080085c1
 8008600:	080085c1 	.word	0x080085c1
 8008604:	08008749 	.word	0x08008749
 8008608:	08008671 	.word	0x08008671
 800860c:	08008703 	.word	0x08008703
 8008610:	080085c1 	.word	0x080085c1
 8008614:	080085c1 	.word	0x080085c1
 8008618:	0800876b 	.word	0x0800876b
 800861c:	080085c1 	.word	0x080085c1
 8008620:	08008671 	.word	0x08008671
 8008624:	080085c1 	.word	0x080085c1
 8008628:	080085c1 	.word	0x080085c1
 800862c:	0800870b 	.word	0x0800870b
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	1d1a      	adds	r2, r3, #4
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	602a      	str	r2, [r5, #0]
 8008638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800863c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008640:	2301      	movs	r3, #1
 8008642:	e09f      	b.n	8008784 <_printf_i+0x1ec>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	682b      	ldr	r3, [r5, #0]
 8008648:	0607      	lsls	r7, r0, #24
 800864a:	f103 0104 	add.w	r1, r3, #4
 800864e:	6029      	str	r1, [r5, #0]
 8008650:	d501      	bpl.n	8008656 <_printf_i+0xbe>
 8008652:	681e      	ldr	r6, [r3, #0]
 8008654:	e003      	b.n	800865e <_printf_i+0xc6>
 8008656:	0646      	lsls	r6, r0, #25
 8008658:	d5fb      	bpl.n	8008652 <_printf_i+0xba>
 800865a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800865e:	2e00      	cmp	r6, #0
 8008660:	da03      	bge.n	800866a <_printf_i+0xd2>
 8008662:	232d      	movs	r3, #45	; 0x2d
 8008664:	4276      	negs	r6, r6
 8008666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800866a:	485a      	ldr	r0, [pc, #360]	; (80087d4 <_printf_i+0x23c>)
 800866c:	230a      	movs	r3, #10
 800866e:	e012      	b.n	8008696 <_printf_i+0xfe>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	6820      	ldr	r0, [r4, #0]
 8008674:	1d19      	adds	r1, r3, #4
 8008676:	6029      	str	r1, [r5, #0]
 8008678:	0605      	lsls	r5, r0, #24
 800867a:	d501      	bpl.n	8008680 <_printf_i+0xe8>
 800867c:	681e      	ldr	r6, [r3, #0]
 800867e:	e002      	b.n	8008686 <_printf_i+0xee>
 8008680:	0641      	lsls	r1, r0, #25
 8008682:	d5fb      	bpl.n	800867c <_printf_i+0xe4>
 8008684:	881e      	ldrh	r6, [r3, #0]
 8008686:	4853      	ldr	r0, [pc, #332]	; (80087d4 <_printf_i+0x23c>)
 8008688:	2f6f      	cmp	r7, #111	; 0x6f
 800868a:	bf0c      	ite	eq
 800868c:	2308      	moveq	r3, #8
 800868e:	230a      	movne	r3, #10
 8008690:	2100      	movs	r1, #0
 8008692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008696:	6865      	ldr	r5, [r4, #4]
 8008698:	60a5      	str	r5, [r4, #8]
 800869a:	2d00      	cmp	r5, #0
 800869c:	bfa2      	ittt	ge
 800869e:	6821      	ldrge	r1, [r4, #0]
 80086a0:	f021 0104 	bicge.w	r1, r1, #4
 80086a4:	6021      	strge	r1, [r4, #0]
 80086a6:	b90e      	cbnz	r6, 80086ac <_printf_i+0x114>
 80086a8:	2d00      	cmp	r5, #0
 80086aa:	d04b      	beq.n	8008744 <_printf_i+0x1ac>
 80086ac:	4615      	mov	r5, r2
 80086ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80086b2:	fb03 6711 	mls	r7, r3, r1, r6
 80086b6:	5dc7      	ldrb	r7, [r0, r7]
 80086b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086bc:	4637      	mov	r7, r6
 80086be:	42bb      	cmp	r3, r7
 80086c0:	460e      	mov	r6, r1
 80086c2:	d9f4      	bls.n	80086ae <_printf_i+0x116>
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	d10b      	bne.n	80086e0 <_printf_i+0x148>
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	07de      	lsls	r6, r3, #31
 80086cc:	d508      	bpl.n	80086e0 <_printf_i+0x148>
 80086ce:	6923      	ldr	r3, [r4, #16]
 80086d0:	6861      	ldr	r1, [r4, #4]
 80086d2:	4299      	cmp	r1, r3
 80086d4:	bfde      	ittt	le
 80086d6:	2330      	movle	r3, #48	; 0x30
 80086d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086e0:	1b52      	subs	r2, r2, r5
 80086e2:	6122      	str	r2, [r4, #16]
 80086e4:	f8cd a000 	str.w	sl, [sp]
 80086e8:	464b      	mov	r3, r9
 80086ea:	aa03      	add	r2, sp, #12
 80086ec:	4621      	mov	r1, r4
 80086ee:	4640      	mov	r0, r8
 80086f0:	f7ff fee4 	bl	80084bc <_printf_common>
 80086f4:	3001      	adds	r0, #1
 80086f6:	d14a      	bne.n	800878e <_printf_i+0x1f6>
 80086f8:	f04f 30ff 	mov.w	r0, #4294967295
 80086fc:	b004      	add	sp, #16
 80086fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	f043 0320 	orr.w	r3, r3, #32
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	4833      	ldr	r0, [pc, #204]	; (80087d8 <_printf_i+0x240>)
 800870c:	2778      	movs	r7, #120	; 0x78
 800870e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	6829      	ldr	r1, [r5, #0]
 8008716:	061f      	lsls	r7, r3, #24
 8008718:	f851 6b04 	ldr.w	r6, [r1], #4
 800871c:	d402      	bmi.n	8008724 <_printf_i+0x18c>
 800871e:	065f      	lsls	r7, r3, #25
 8008720:	bf48      	it	mi
 8008722:	b2b6      	uxthmi	r6, r6
 8008724:	07df      	lsls	r7, r3, #31
 8008726:	bf48      	it	mi
 8008728:	f043 0320 	orrmi.w	r3, r3, #32
 800872c:	6029      	str	r1, [r5, #0]
 800872e:	bf48      	it	mi
 8008730:	6023      	strmi	r3, [r4, #0]
 8008732:	b91e      	cbnz	r6, 800873c <_printf_i+0x1a4>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	f023 0320 	bic.w	r3, r3, #32
 800873a:	6023      	str	r3, [r4, #0]
 800873c:	2310      	movs	r3, #16
 800873e:	e7a7      	b.n	8008690 <_printf_i+0xf8>
 8008740:	4824      	ldr	r0, [pc, #144]	; (80087d4 <_printf_i+0x23c>)
 8008742:	e7e4      	b.n	800870e <_printf_i+0x176>
 8008744:	4615      	mov	r5, r2
 8008746:	e7bd      	b.n	80086c4 <_printf_i+0x12c>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	6826      	ldr	r6, [r4, #0]
 800874c:	6961      	ldr	r1, [r4, #20]
 800874e:	1d18      	adds	r0, r3, #4
 8008750:	6028      	str	r0, [r5, #0]
 8008752:	0635      	lsls	r5, r6, #24
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	d501      	bpl.n	800875c <_printf_i+0x1c4>
 8008758:	6019      	str	r1, [r3, #0]
 800875a:	e002      	b.n	8008762 <_printf_i+0x1ca>
 800875c:	0670      	lsls	r0, r6, #25
 800875e:	d5fb      	bpl.n	8008758 <_printf_i+0x1c0>
 8008760:	8019      	strh	r1, [r3, #0]
 8008762:	2300      	movs	r3, #0
 8008764:	6123      	str	r3, [r4, #16]
 8008766:	4615      	mov	r5, r2
 8008768:	e7bc      	b.n	80086e4 <_printf_i+0x14c>
 800876a:	682b      	ldr	r3, [r5, #0]
 800876c:	1d1a      	adds	r2, r3, #4
 800876e:	602a      	str	r2, [r5, #0]
 8008770:	681d      	ldr	r5, [r3, #0]
 8008772:	6862      	ldr	r2, [r4, #4]
 8008774:	2100      	movs	r1, #0
 8008776:	4628      	mov	r0, r5
 8008778:	f7f7 fd52 	bl	8000220 <memchr>
 800877c:	b108      	cbz	r0, 8008782 <_printf_i+0x1ea>
 800877e:	1b40      	subs	r0, r0, r5
 8008780:	6060      	str	r0, [r4, #4]
 8008782:	6863      	ldr	r3, [r4, #4]
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	2300      	movs	r3, #0
 8008788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800878c:	e7aa      	b.n	80086e4 <_printf_i+0x14c>
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	462a      	mov	r2, r5
 8008792:	4649      	mov	r1, r9
 8008794:	4640      	mov	r0, r8
 8008796:	47d0      	blx	sl
 8008798:	3001      	adds	r0, #1
 800879a:	d0ad      	beq.n	80086f8 <_printf_i+0x160>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	079b      	lsls	r3, r3, #30
 80087a0:	d413      	bmi.n	80087ca <_printf_i+0x232>
 80087a2:	68e0      	ldr	r0, [r4, #12]
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	4298      	cmp	r0, r3
 80087a8:	bfb8      	it	lt
 80087aa:	4618      	movlt	r0, r3
 80087ac:	e7a6      	b.n	80086fc <_printf_i+0x164>
 80087ae:	2301      	movs	r3, #1
 80087b0:	4632      	mov	r2, r6
 80087b2:	4649      	mov	r1, r9
 80087b4:	4640      	mov	r0, r8
 80087b6:	47d0      	blx	sl
 80087b8:	3001      	adds	r0, #1
 80087ba:	d09d      	beq.n	80086f8 <_printf_i+0x160>
 80087bc:	3501      	adds	r5, #1
 80087be:	68e3      	ldr	r3, [r4, #12]
 80087c0:	9903      	ldr	r1, [sp, #12]
 80087c2:	1a5b      	subs	r3, r3, r1
 80087c4:	42ab      	cmp	r3, r5
 80087c6:	dcf2      	bgt.n	80087ae <_printf_i+0x216>
 80087c8:	e7eb      	b.n	80087a2 <_printf_i+0x20a>
 80087ca:	2500      	movs	r5, #0
 80087cc:	f104 0619 	add.w	r6, r4, #25
 80087d0:	e7f5      	b.n	80087be <_printf_i+0x226>
 80087d2:	bf00      	nop
 80087d4:	0801e555 	.word	0x0801e555
 80087d8:	0801e566 	.word	0x0801e566

080087dc <__sflush_r>:
 80087dc:	898a      	ldrh	r2, [r1, #12]
 80087de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e2:	4605      	mov	r5, r0
 80087e4:	0710      	lsls	r0, r2, #28
 80087e6:	460c      	mov	r4, r1
 80087e8:	d458      	bmi.n	800889c <__sflush_r+0xc0>
 80087ea:	684b      	ldr	r3, [r1, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dc05      	bgt.n	80087fc <__sflush_r+0x20>
 80087f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dc02      	bgt.n	80087fc <__sflush_r+0x20>
 80087f6:	2000      	movs	r0, #0
 80087f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087fe:	2e00      	cmp	r6, #0
 8008800:	d0f9      	beq.n	80087f6 <__sflush_r+0x1a>
 8008802:	2300      	movs	r3, #0
 8008804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008808:	682f      	ldr	r7, [r5, #0]
 800880a:	6a21      	ldr	r1, [r4, #32]
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	d032      	beq.n	8008876 <__sflush_r+0x9a>
 8008810:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	075a      	lsls	r2, r3, #29
 8008816:	d505      	bpl.n	8008824 <__sflush_r+0x48>
 8008818:	6863      	ldr	r3, [r4, #4]
 800881a:	1ac0      	subs	r0, r0, r3
 800881c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800881e:	b10b      	cbz	r3, 8008824 <__sflush_r+0x48>
 8008820:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008822:	1ac0      	subs	r0, r0, r3
 8008824:	2300      	movs	r3, #0
 8008826:	4602      	mov	r2, r0
 8008828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800882a:	6a21      	ldr	r1, [r4, #32]
 800882c:	4628      	mov	r0, r5
 800882e:	47b0      	blx	r6
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	d106      	bne.n	8008844 <__sflush_r+0x68>
 8008836:	6829      	ldr	r1, [r5, #0]
 8008838:	291d      	cmp	r1, #29
 800883a:	d82b      	bhi.n	8008894 <__sflush_r+0xb8>
 800883c:	4a29      	ldr	r2, [pc, #164]	; (80088e4 <__sflush_r+0x108>)
 800883e:	410a      	asrs	r2, r1
 8008840:	07d6      	lsls	r6, r2, #31
 8008842:	d427      	bmi.n	8008894 <__sflush_r+0xb8>
 8008844:	2200      	movs	r2, #0
 8008846:	6062      	str	r2, [r4, #4]
 8008848:	04d9      	lsls	r1, r3, #19
 800884a:	6922      	ldr	r2, [r4, #16]
 800884c:	6022      	str	r2, [r4, #0]
 800884e:	d504      	bpl.n	800885a <__sflush_r+0x7e>
 8008850:	1c42      	adds	r2, r0, #1
 8008852:	d101      	bne.n	8008858 <__sflush_r+0x7c>
 8008854:	682b      	ldr	r3, [r5, #0]
 8008856:	b903      	cbnz	r3, 800885a <__sflush_r+0x7e>
 8008858:	6560      	str	r0, [r4, #84]	; 0x54
 800885a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800885c:	602f      	str	r7, [r5, #0]
 800885e:	2900      	cmp	r1, #0
 8008860:	d0c9      	beq.n	80087f6 <__sflush_r+0x1a>
 8008862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008866:	4299      	cmp	r1, r3
 8008868:	d002      	beq.n	8008870 <__sflush_r+0x94>
 800886a:	4628      	mov	r0, r5
 800886c:	f7ff fbea 	bl	8008044 <_free_r>
 8008870:	2000      	movs	r0, #0
 8008872:	6360      	str	r0, [r4, #52]	; 0x34
 8008874:	e7c0      	b.n	80087f8 <__sflush_r+0x1c>
 8008876:	2301      	movs	r3, #1
 8008878:	4628      	mov	r0, r5
 800887a:	47b0      	blx	r6
 800887c:	1c41      	adds	r1, r0, #1
 800887e:	d1c8      	bne.n	8008812 <__sflush_r+0x36>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0c5      	beq.n	8008812 <__sflush_r+0x36>
 8008886:	2b1d      	cmp	r3, #29
 8008888:	d001      	beq.n	800888e <__sflush_r+0xb2>
 800888a:	2b16      	cmp	r3, #22
 800888c:	d101      	bne.n	8008892 <__sflush_r+0xb6>
 800888e:	602f      	str	r7, [r5, #0]
 8008890:	e7b1      	b.n	80087f6 <__sflush_r+0x1a>
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	e7ad      	b.n	80087f8 <__sflush_r+0x1c>
 800889c:	690f      	ldr	r7, [r1, #16]
 800889e:	2f00      	cmp	r7, #0
 80088a0:	d0a9      	beq.n	80087f6 <__sflush_r+0x1a>
 80088a2:	0793      	lsls	r3, r2, #30
 80088a4:	680e      	ldr	r6, [r1, #0]
 80088a6:	bf08      	it	eq
 80088a8:	694b      	ldreq	r3, [r1, #20]
 80088aa:	600f      	str	r7, [r1, #0]
 80088ac:	bf18      	it	ne
 80088ae:	2300      	movne	r3, #0
 80088b0:	eba6 0807 	sub.w	r8, r6, r7
 80088b4:	608b      	str	r3, [r1, #8]
 80088b6:	f1b8 0f00 	cmp.w	r8, #0
 80088ba:	dd9c      	ble.n	80087f6 <__sflush_r+0x1a>
 80088bc:	6a21      	ldr	r1, [r4, #32]
 80088be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088c0:	4643      	mov	r3, r8
 80088c2:	463a      	mov	r2, r7
 80088c4:	4628      	mov	r0, r5
 80088c6:	47b0      	blx	r6
 80088c8:	2800      	cmp	r0, #0
 80088ca:	dc06      	bgt.n	80088da <__sflush_r+0xfe>
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	e78e      	b.n	80087f8 <__sflush_r+0x1c>
 80088da:	4407      	add	r7, r0
 80088dc:	eba8 0800 	sub.w	r8, r8, r0
 80088e0:	e7e9      	b.n	80088b6 <__sflush_r+0xda>
 80088e2:	bf00      	nop
 80088e4:	dfbffffe 	.word	0xdfbffffe

080088e8 <_fflush_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	690b      	ldr	r3, [r1, #16]
 80088ec:	4605      	mov	r5, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	b913      	cbnz	r3, 80088f8 <_fflush_r+0x10>
 80088f2:	2500      	movs	r5, #0
 80088f4:	4628      	mov	r0, r5
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	b118      	cbz	r0, 8008902 <_fflush_r+0x1a>
 80088fa:	6a03      	ldr	r3, [r0, #32]
 80088fc:	b90b      	cbnz	r3, 8008902 <_fflush_r+0x1a>
 80088fe:	f7ff f995 	bl	8007c2c <__sinit>
 8008902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f3      	beq.n	80088f2 <_fflush_r+0xa>
 800890a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800890c:	07d0      	lsls	r0, r2, #31
 800890e:	d404      	bmi.n	800891a <_fflush_r+0x32>
 8008910:	0599      	lsls	r1, r3, #22
 8008912:	d402      	bmi.n	800891a <_fflush_r+0x32>
 8008914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008916:	f7ff fb85 	bl	8008024 <__retarget_lock_acquire_recursive>
 800891a:	4628      	mov	r0, r5
 800891c:	4621      	mov	r1, r4
 800891e:	f7ff ff5d 	bl	80087dc <__sflush_r>
 8008922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008924:	07da      	lsls	r2, r3, #31
 8008926:	4605      	mov	r5, r0
 8008928:	d4e4      	bmi.n	80088f4 <_fflush_r+0xc>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	059b      	lsls	r3, r3, #22
 800892e:	d4e1      	bmi.n	80088f4 <_fflush_r+0xc>
 8008930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008932:	f7ff fb78 	bl	8008026 <__retarget_lock_release_recursive>
 8008936:	e7dd      	b.n	80088f4 <_fflush_r+0xc>

08008938 <__swhatbuf_r>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	460c      	mov	r4, r1
 800893c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008940:	2900      	cmp	r1, #0
 8008942:	b096      	sub	sp, #88	; 0x58
 8008944:	4615      	mov	r5, r2
 8008946:	461e      	mov	r6, r3
 8008948:	da0d      	bge.n	8008966 <__swhatbuf_r+0x2e>
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008950:	f04f 0100 	mov.w	r1, #0
 8008954:	bf0c      	ite	eq
 8008956:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800895a:	2340      	movne	r3, #64	; 0x40
 800895c:	2000      	movs	r0, #0
 800895e:	6031      	str	r1, [r6, #0]
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	b016      	add	sp, #88	; 0x58
 8008964:	bd70      	pop	{r4, r5, r6, pc}
 8008966:	466a      	mov	r2, sp
 8008968:	f000 f87c 	bl	8008a64 <_fstat_r>
 800896c:	2800      	cmp	r0, #0
 800896e:	dbec      	blt.n	800894a <__swhatbuf_r+0x12>
 8008970:	9901      	ldr	r1, [sp, #4]
 8008972:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008976:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800897a:	4259      	negs	r1, r3
 800897c:	4159      	adcs	r1, r3
 800897e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008982:	e7eb      	b.n	800895c <__swhatbuf_r+0x24>

08008984 <__smakebuf_r>:
 8008984:	898b      	ldrh	r3, [r1, #12]
 8008986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008988:	079d      	lsls	r5, r3, #30
 800898a:	4606      	mov	r6, r0
 800898c:	460c      	mov	r4, r1
 800898e:	d507      	bpl.n	80089a0 <__smakebuf_r+0x1c>
 8008990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	6123      	str	r3, [r4, #16]
 8008998:	2301      	movs	r3, #1
 800899a:	6163      	str	r3, [r4, #20]
 800899c:	b002      	add	sp, #8
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	ab01      	add	r3, sp, #4
 80089a2:	466a      	mov	r2, sp
 80089a4:	f7ff ffc8 	bl	8008938 <__swhatbuf_r>
 80089a8:	9900      	ldr	r1, [sp, #0]
 80089aa:	4605      	mov	r5, r0
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff fbb5 	bl	800811c <_malloc_r>
 80089b2:	b948      	cbnz	r0, 80089c8 <__smakebuf_r+0x44>
 80089b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b8:	059a      	lsls	r2, r3, #22
 80089ba:	d4ef      	bmi.n	800899c <__smakebuf_r+0x18>
 80089bc:	f023 0303 	bic.w	r3, r3, #3
 80089c0:	f043 0302 	orr.w	r3, r3, #2
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	e7e3      	b.n	8008990 <__smakebuf_r+0xc>
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	6020      	str	r0, [r4, #0]
 80089cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d0:	81a3      	strh	r3, [r4, #12]
 80089d2:	9b00      	ldr	r3, [sp, #0]
 80089d4:	6163      	str	r3, [r4, #20]
 80089d6:	9b01      	ldr	r3, [sp, #4]
 80089d8:	6120      	str	r0, [r4, #16]
 80089da:	b15b      	cbz	r3, 80089f4 <__smakebuf_r+0x70>
 80089dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e0:	4630      	mov	r0, r6
 80089e2:	f000 f851 	bl	8008a88 <_isatty_r>
 80089e6:	b128      	cbz	r0, 80089f4 <__smakebuf_r+0x70>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	f043 0301 	orr.w	r3, r3, #1
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	431d      	orrs	r5, r3
 80089f8:	81a5      	strh	r5, [r4, #12]
 80089fa:	e7cf      	b.n	800899c <__smakebuf_r+0x18>

080089fc <_putc_r>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	460d      	mov	r5, r1
 8008a00:	4614      	mov	r4, r2
 8008a02:	4606      	mov	r6, r0
 8008a04:	b118      	cbz	r0, 8008a0e <_putc_r+0x12>
 8008a06:	6a03      	ldr	r3, [r0, #32]
 8008a08:	b90b      	cbnz	r3, 8008a0e <_putc_r+0x12>
 8008a0a:	f7ff f90f 	bl	8007c2c <__sinit>
 8008a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a10:	07d8      	lsls	r0, r3, #31
 8008a12:	d405      	bmi.n	8008a20 <_putc_r+0x24>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	0599      	lsls	r1, r3, #22
 8008a18:	d402      	bmi.n	8008a20 <_putc_r+0x24>
 8008a1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a1c:	f7ff fb02 	bl	8008024 <__retarget_lock_acquire_recursive>
 8008a20:	68a3      	ldr	r3, [r4, #8]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	60a3      	str	r3, [r4, #8]
 8008a28:	da05      	bge.n	8008a36 <_putc_r+0x3a>
 8008a2a:	69a2      	ldr	r2, [r4, #24]
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	db12      	blt.n	8008a56 <_putc_r+0x5a>
 8008a30:	b2eb      	uxtb	r3, r5
 8008a32:	2b0a      	cmp	r3, #10
 8008a34:	d00f      	beq.n	8008a56 <_putc_r+0x5a>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	6022      	str	r2, [r4, #0]
 8008a3c:	701d      	strb	r5, [r3, #0]
 8008a3e:	b2ed      	uxtb	r5, r5
 8008a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a42:	07da      	lsls	r2, r3, #31
 8008a44:	d405      	bmi.n	8008a52 <_putc_r+0x56>
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	059b      	lsls	r3, r3, #22
 8008a4a:	d402      	bmi.n	8008a52 <_putc_r+0x56>
 8008a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a4e:	f7ff faea 	bl	8008026 <__retarget_lock_release_recursive>
 8008a52:	4628      	mov	r0, r5
 8008a54:	bd70      	pop	{r4, r5, r6, pc}
 8008a56:	4629      	mov	r1, r5
 8008a58:	4622      	mov	r2, r4
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7ff f9d5 	bl	8007e0a <__swbuf_r>
 8008a60:	4605      	mov	r5, r0
 8008a62:	e7ed      	b.n	8008a40 <_putc_r+0x44>

08008a64 <_fstat_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d07      	ldr	r5, [pc, #28]	; (8008a84 <_fstat_r+0x20>)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	4611      	mov	r1, r2
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	f7f8 f8d4 	bl	8000c1e <_fstat>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	d102      	bne.n	8008a80 <_fstat_r+0x1c>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	b103      	cbz	r3, 8008a80 <_fstat_r+0x1c>
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	bd38      	pop	{r3, r4, r5, pc}
 8008a82:	bf00      	nop
 8008a84:	20002b18 	.word	0x20002b18

08008a88 <_isatty_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d06      	ldr	r5, [pc, #24]	; (8008aa4 <_isatty_r+0x1c>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	f7f8 f8d3 	bl	8000c3e <_isatty>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_isatty_r+0x1a>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_isatty_r+0x1a>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	20002b18 	.word	0x20002b18

08008aa8 <_sbrk_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d06      	ldr	r5, [pc, #24]	; (8008ac4 <_sbrk_r+0x1c>)
 8008aac:	2300      	movs	r3, #0
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	f7f8 f8dc 	bl	8000c70 <_sbrk>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d102      	bne.n	8008ac2 <_sbrk_r+0x1a>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	b103      	cbz	r3, 8008ac2 <_sbrk_r+0x1a>
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
 8008ac4:	20002b18 	.word	0x20002b18

08008ac8 <_init>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	bf00      	nop
 8008acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ace:	bc08      	pop	{r3}
 8008ad0:	469e      	mov	lr, r3
 8008ad2:	4770      	bx	lr

08008ad4 <_fini>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	bf00      	nop
 8008ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ada:	bc08      	pop	{r3}
 8008adc:	469e      	mov	lr, r3
 8008ade:	4770      	bx	lr
